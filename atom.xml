<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>铃的杂货铺</title>
  
  <subtitle>二阶铃图</subtitle>
  <link href="http://blog.kekwy.com/atom.xml" rel="self"/>
  
  <link href="http://blog.kekwy.com/"/>
  <updated>2022-08-03T15:33:12.644Z</updated>
  <id>http://blog.kekwy.com/</id>
  
  <author>
    <name>可弟WZ铃号机</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类的高级特性</title>
    <link href="http://blog.kekwy.com/javaNotes-2/"/>
    <id>http://blog.kekwy.com/javaNotes-2/</id>
    <published>2022-08-01T11:50:13.000Z</published>
    <updated>2022-08-03T15:33:12.644Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="I-Java类包"><a href="#I-Java类包" class="headerlink" title="I. Java类包"></a>I. Java类包</h2><ol><li><p>类名冲突：</p><p>任何类与接口都需要隶属于某一个类包。可以通过将两个同名类定义在不同的类包中解决类名冲突的问题。</p></li><li><p>类的路径：</p><ul><li>同一个类包中的类相互访问时，可以不指定包名；</li><li>同一个包中的类不必存放在同一个位置，只要将CLASSPATH分别指向这两个位置即可。</li></ul></li><li><p>指定包与导入包：</p><p>将 <code>package</code> 表达式作为文件中的第一行非注释代码，java包名必须全部使用小写字母。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名;</span><br></pre></td></tr></table></figure><p>导入包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.*</span><br><span class="line"><span class="keyword">import</span> 包名.类名</span><br><span class="line"><span class="keyword">import</span> 包名.静态方法名</span><br></pre></td></tr></table></figure><p>tips: </p><p>使用 <code>import</code> 关键字指定一个包中的所有类时，并不会指定这个包的子包中的类，如需使用需要对子包作单独引用。</p></li></ol></div><div class="story post-story"><h2 id="II-final-关键字"><a href="#II-final-关键字" class="headerlink" title="II. final 关键字"></a>II. final 关键字</h2><ol><li>变量：<ul><li>修饰常量变量；</li><li>对象引用被 <code>final</code> 修饰后无法使其指向另一个对象；</li><li>Java中定义全局变量，通常使用 <code>public static final</code> 修饰，是能在定义时被赋值。</li></ul></li><li>方法：<ul><li>被 <code>final</code> 修饰的方法不能被重写；</li><li><code>private</code> 方法隐式被指定为 <code>final</code> 类型。</li></ul></li><li>类：<ul><li>被修饰的类不能被继承。</li></ul></li></ol></div><div class="story post-story"><h2 id="III-内部类"><a href="#III-内部类" class="headerlink" title="III. 内部类"></a>III. 内部类</h2><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><ol><li><p>基础用法：</p><ul><li><p>成员内部类的定义：（非内部类不能被声明为private或protected访问类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;<span class="comment">// 内部类</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内部类中可以访问外部类的所有成员变量和方法，外部类只能通过实例化内部类对象访问内部类成员（受权限修饰关键字限制）；</p></li><li><p>内部类中的变量与外部类变量同名时，可以使用 <code>this</code> 指针加以区分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若内部类与外部类中均有变量x</span></span><br><span class="line"><span class="built_in">this</span>.x; <span class="comment">// 内部类的x</span></span><br><span class="line">OuterClass.<span class="built_in">this</span>.x; <span class="comment">// 外部类的x</span></span><br><span class="line">x; <span class="comment">// 同名局部变量、形参（若有）</span></span><br></pre></td></tr></table></figure></li><li><p>在外部类和非静态方法之外实例化内部类对象，需要使用外部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OuterClass</span> <span class="variable">out</span> <span class="operator">=</span> = <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">OuterClass.<span class="type">innerClass</span> <span class="variable">in</span> <span class="operator">=</span> out.<span class="keyword">new</span> <span class="title class_">innerClass</span>();</span><br></pre></td></tr></table></figure><p>内部类对象会依赖于外部类对象。只有存在外部类对象，才能实例化内部类对象。</p></li></ul></li><li><p>内部类向上转型为接口;</p><ul><li>将一个权限修饰符为 <code>private</code> 的内部类向上转型为一个接口，就可以完全隐藏内部类的具体实现过程；</li><li>对于一个外部接口中的方法，可以通过在一个类中定义多个内部类，每个内部类分别实现该方法的方式，实现在类中多次实现接口中的同一个方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">OutInterface</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个外部不可访问的内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span> <span class="keyword">implements</span> <span class="title class_">OutInterface</span> &#123;</span><br><span class="line">        <span class="comment">// 实现接口方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// do something...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> OutInterface doit &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InnerClass</span>(); <span class="comment">// 将内部类向上转型为外部接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="type">OuterClass</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line"><span class="type">OutInterface</span> <span class="variable">outinter</span> <span class="operator">=</span> out.doit();</span><br><span class="line">outinter.f();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>外部不可直接访问内部类中的 f() 方法但是可以访问接口中的，通过将内部类向上转型执行内部类中定义的方法，对继承外部类的子类隐藏了实现细节。（向外提供外部类和接口）</p></li></ol><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ul><li><p>内部类可以在类的局部位置定义（如方法）</p></li><li><p>在方法中定义的内部类只能使用方法中被 <code>final</code> 修饰的变量。因为内部类对象的生存期超出方法运行的生存期，导致方法中的一般局部变量比内部类对象的生存期短，而被final型变量被视为常量，其生存期同样比方法运行的生存期长。</p></li></ul><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">...<span class="comment">//内部类体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>匿名内部类编译以后，产生以“外部类名$序号”为名称的.class文件，序号以1~n排列。</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><ul><li>创建静态内部类的对象不需要其外部类的对象；</li><li>静态内部类的对象中不能访问非静态外部类的对象。</li></ul><h3 id="内部类的继承"><a href="#内部类的继承" class="headerlink" title="内部类的继承"></a>内部类的继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputInnerClass</span> <span class="keyword">extends</span> <span class="title class_">ClassA</span>.ClassB &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OutputInnerClass</span><span class="params">(classA a)</span> &#123;</span><br><span class="line">a.<span class="built_in">super</span>();<span class="comment">// 生成B类的外部类对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassA</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ClassB</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考资料《Java从入门到精通（第5版）》</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="从继承开始的Java应用笔记" scheme="http://blog.kekwy.com/categories/%E4%BB%8E%E7%BB%A7%E6%89%BF%E5%BC%80%E5%A7%8B%E7%9A%84Java%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="http://blog.kekwy.com/tags/Java/"/>
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="编程" scheme="http://blog.kekwy.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>接口、继承与多态</title>
    <link href="http://blog.kekwy.com/javaNotes-1/"/>
    <id>http://blog.kekwy.com/javaNotes-1/</id>
    <published>2022-07-30T07:00:16.000Z</published>
    <updated>2022-08-01T11:51:42.005Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="I-类的继承"><a href="#I-类的继承" class="headerlink" title="I. 类的继承"></a>I. 类的继承</h2><p>权限修饰关键字：</p><table><thead><tr><th>private</th><th>外部以及子类均不可访问</th></tr></thead><tbody><tr><td>public</td><td>外部以及子类均不可访问</td></tr><tr><td>protected</td><td>外部不可，但子类可以访问</td></tr></tbody></table><ul><li>定义类时通过关键字<code>extends</code> + 父类类名定义继承；</li><li>子类方法中可以通过super关键字调用父类方法（受权限修饰关键字约束）；</li><li>子类中可以通过定义与父类某一方法名称相同的函数实现对父类中该方法的重写（覆盖）；</li><li>重写时如修改方法的权限范围，只能从小到大；</li><li>重写时返回值必须与父类中同名函数返回值相同或为其子类；</li><li>子类实例化时会自动调用父类的无参构造方法，但若需调用有参构造方法需要通过super关键字手动调用；</li><li>子类<code>finalize()</code>方法需要保证最后一个动作是调用父类的<code>finalize()</code>方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSomething2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doSomething3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Test <span class="title function_">doTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> <span class="keyword">extends</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">//调用父类构造方法</span></span><br><span class="line">        <span class="built_in">super</span>.doSomething1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    private void doSomething3() &#123;</span></span><br><span class="line"><span class="comment">        //do something</span></span><br><span class="line"><span class="comment">    &#125; 写法错误</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> Test1 <span class="title function_">doTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="II-Object类"><a href="#II-Object类" class="headerlink" title="II. Object类"></a>II. Object类</h2><ol><li><p><code>Objcect</code> 类是所有Java类的父类。</p><p>tips：<code>Object</code> 类中的 <code>getClass()</code> 、<code>notify()</code> 、<code>notifyAll()</code> 、<code>wait()</code> 等方法不能在子类中重写。（被定义为final类型）</p></li><li><p><code>Object</code> 类中的重要方法：</p><ul><li><p><code>getClass()</code>：返回对象执行时的Class实例。<em>（Unity的getObejct）</em></p></li><li><p><code>toString()</code>：将一个对象返回为字符串，一般需要根据需要<strong>在子类中重写</strong>.</p><p>tips：将对象打印时将自动调用该方法。</p></li><li><p><code>equals()</code>：默认使用“&#x3D;&#x3D;”运算符根据对象的引用（地址）判断是否相等。故一般需要<strong>按需重写</strong>。</p></li></ul></li></ol></div><div class="story post-story"><h2 id="III-对象类型的转换"><a href="#III-对象类型的转换" class="headerlink" title="III. 对象类型的转换"></a>III. 对象类型的转换</h2><ol><li><p>向上转型：将子类对象视为父类对象。由具体到抽象，总是安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Quadrangle</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Patallelogram</span>(); <span class="comment">// 平行四边形是四边形的子类</span></span><br></pre></td></tr></table></figure></li><li><p>向下转型：将父类对象转换为子类对象，必须通过强制类型转换，且必须保证当前父类对象是目标子类对象的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Quadrangle</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Patallelogram</span>();</span><br><span class="line"><span class="type">Patallelogram</span> <span class="variable">q</span> <span class="operator">=</span> (Patallelogram)p;</span><br></pre></td></tr></table></figure></li></ol></div><div class="story post-story"><h2 id="IV-使用instanceof操作符判断对象类型"><a href="#IV-使用instanceof操作符判断对象类型" class="headerlink" title="IV. 使用instanceof操作符判断对象类型"></a>IV. 使用instanceof操作符判断对象类型</h2><p>可用于实现向下转换时对父类对象实例类型的判断。</p><p>语法格式：（返回值为布尔型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myobject <span class="keyword">instanceof</span> ExampleClass;</span><br><span class="line"><span class="comment">// myobject对象是否为ExampleClass类的实例</span></span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="V-方法的重载"><a href="#V-方法的重载" class="headerlink" title="V. 方法的重载"></a>V. 方法的重载</h2><p>同过定义同名方法但参数不完全相同的方式实现方法的重载，但单单返回值不同不能实现重载。</p><p>编译器利用方法名、方法各参数类型和参数的个数以及参数的顺序来确定类中的方法是否唯一。</p><p>不定长参数也可以参与实现重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... a)</span>;</span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="VI-抽象类与接口"><a href="#VI-抽象类与接口" class="headerlink" title="VI. 抽象类与接口"></a>VI. 抽象类与接口</h2><ol><li><p>抽象类</p><p>tips：</p><ul><li>抽象类不能实例化对象；</li><li>只有抽象类才可以承载抽象方法；</li><li>抽象方法在其子类中必须被重写。</li></ul><p>定义抽象类的关键字 <code>abstract</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">testAbstract</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口：</p><p>定义接口使用关键字 <code>interface</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface 接口名 &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 自动虚方法，可以省略abstract关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>public：接口可以像类一样被权限修饰符修饰，但public关键字仅限于接口在与其同名的文件中被定义时；</li><li>接口中的方法必须被定义为public或abstract形式。</li></ul><p>实现接口使用关键字 <code>implements</code> ：</p><p>tips：Java中不许出现多继承但是可以通过同一个类实现许多接口来实现多继承，一个接口也可以继承另一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1</span></span><br><span class="line">class 类名 implements 接口<span class="number">1</span>，接口<span class="number">2</span>, ... &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="number">2</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">intf1</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">intf2</span> <span class="keyword">extends</span> <span class="title class_">intf1</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>参考资料《Java从入门到精通（第5版）》</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="从继承开始的Java应用笔记" scheme="http://blog.kekwy.com/categories/%E4%BB%8E%E7%BB%A7%E6%89%BF%E5%BC%80%E5%A7%8B%E7%9A%84Java%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="http://blog.kekwy.com/tags/Java/"/>
    
    <category term="学习" scheme="http://blog.kekwy.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="编程" scheme="http://blog.kekwy.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
